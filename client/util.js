"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function handlePromise(promise) {
    if (!promise)
        return;
    promise.catch((error) => {
        console.error(error);
    });
}
exports.handlePromise = handlePromise;
const fs_1 = require("fs");
function isFileSync(filePath) {
    if (!fs_1.existsSync(filePath))
        return false;
    return fs_1.lstatSync(filePath).isFile();
}
exports.isFileSync = isFileSync;
function isElement(node) {
    return node.nodeType === Node.ELEMENT_NODE;
}
exports.isElement = isElement;
function getPathToElement(element) {
    if (element.tagName.toLowerCase() === 'markdown-preview-plus-view') {
        return [
            {
                tag: 'div',
                index: 0,
            },
        ];
    }
    element = bubbleToContainerElement(element);
    const tag = encodeTag(element);
    const siblings = element.parentElement.children;
    let siblingsCount = 0;
    for (const sibling of Array.from(siblings)) {
        const siblingTag = sibling.nodeType === 1 ? encodeTag(sibling) : null;
        if (sibling === element) {
            const pathToElement = getPathToElement(element.parentElement);
            pathToElement.push({
                tag,
                index: siblingsCount,
            });
            return pathToElement;
        }
        else if (siblingTag === tag) {
            siblingsCount++;
        }
    }
    throw new Error('failure in getPathToElement');
}
exports.getPathToElement = getPathToElement;
function bubbleToContainerElement(element) {
    let testElement = element;
    for (;;) {
        const parent = testElement.parentElement;
        if (!parent)
            break;
        if (parent.classList.contains('MathJax_Display')) {
            return parent.parentElement;
        }
        if (parent.classList.contains('atom-text-editor')) {
            return parent;
        }
        testElement = parent;
    }
    return element;
}
exports.bubbleToContainerElement = bubbleToContainerElement;
function encodeTag(element) {
    if (element.classList.contains('math')) {
        return 'math';
    }
    if (element.classList.contains('atom-text-editor')) {
        return 'code';
    }
    return element.tagName.toLowerCase();
}
exports.encodeTag = encodeTag;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy1jbGllbnQvdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVCQUE4QixPQUFxQjtJQUNqRCxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUFDLE1BQU0sQ0FBQTtJQUNwQixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBWSxFQUFFLEVBQUU7UUFDN0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUN0QixDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFMRCxzQ0FLQztBQUNELDJCQUEwQztBQUMxQyxvQkFBMkIsUUFBZ0I7SUFDekMsRUFBRSxDQUFDLENBQUMsQ0FBQyxlQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7UUFBQyxNQUFNLENBQUMsS0FBSyxDQUFBO0lBQ3ZDLE1BQU0sQ0FBQyxjQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUE7QUFDckMsQ0FBQztBQUhELGdDQUdDO0FBRUQsbUJBQTBCLElBQVU7SUFDbEMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLFlBQVksQ0FBQTtBQUM1QyxDQUFDO0FBRkQsOEJBRUM7QUFhRCwwQkFDRSxPQUFvQjtJQUVwQixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxLQUFLLDRCQUE0QixDQUFDLENBQUMsQ0FBQztRQUNuRSxNQUFNLENBQUM7WUFDTDtnQkFDRSxHQUFHLEVBQUUsS0FBSztnQkFDVixLQUFLLEVBQUUsQ0FBQzthQUNUO1NBQ0YsQ0FBQTtJQUNILENBQUM7SUFFRCxPQUFPLEdBQUcsd0JBQXdCLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDM0MsTUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQzlCLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxhQUFjLENBQUMsUUFBUSxDQUFBO0lBQ2hELElBQUksYUFBYSxHQUFHLENBQUMsQ0FBQTtJQUVyQixHQUFHLENBQUMsQ0FBQyxNQUFNLE9BQU8sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQyxNQUFNLFVBQVUsR0FDZCxPQUFPLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQXNCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFBO1FBQ25FLEVBQUUsQ0FBQyxDQUFDLE9BQU8sS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3hCLE1BQU0sYUFBYSxHQUFHLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxhQUFjLENBQUMsQ0FBQTtZQUM5RCxhQUFhLENBQUMsSUFBSSxDQUFDO2dCQUNqQixHQUFHO2dCQUNILEtBQUssRUFBRSxhQUFhO2FBQ3JCLENBQUMsQ0FBQTtZQUNGLE1BQU0sQ0FBQyxhQUFhLENBQUE7UUFDdEIsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxVQUFVLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztZQUM5QixhQUFhLEVBQUUsQ0FBQTtRQUNqQixDQUFDO0lBQ0gsQ0FBQztJQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQTtBQUNoRCxDQUFDO0FBaENELDRDQWdDQztBQVdELGtDQUF5QyxPQUFvQjtJQUMzRCxJQUFJLFdBQVcsR0FBRyxPQUFPLENBQUE7SUFDekIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ1IsTUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLGFBQWEsQ0FBQTtRQUN4QyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUFDLEtBQUssQ0FBQTtRQUNsQixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqRCxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWMsQ0FBQTtRQUM5QixDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEQsTUFBTSxDQUFDLE1BQU0sQ0FBQTtRQUNmLENBQUM7UUFDRCxXQUFXLEdBQUcsTUFBTSxDQUFBO0lBQ3RCLENBQUM7SUFDRCxNQUFNLENBQUMsT0FBTyxDQUFBO0FBQ2hCLENBQUM7QUFkRCw0REFjQztBQVFELG1CQUEwQixPQUFvQjtJQUM1QyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkMsTUFBTSxDQUFDLE1BQU0sQ0FBQTtJQUNmLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuRCxNQUFNLENBQUMsTUFBTSxDQUFBO0lBQ2YsQ0FBQztJQUNELE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFBO0FBQ3RDLENBQUM7QUFSRCw4QkFRQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBoYW5kbGVQcm9taXNlKHByb21pc2U6IFByb21pc2U8YW55Pik6IHZvaWQge1xuICBpZiAoIXByb21pc2UpIHJldHVyblxuICBwcm9taXNlLmNhdGNoKChlcnJvcjogRXJyb3IpID0+IHtcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKVxuICB9KVxufVxuaW1wb3J0IHsgbHN0YXRTeW5jLCBleGlzdHNTeW5jIH0gZnJvbSAnZnMnXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxlU3luYyhmaWxlUGF0aDogc3RyaW5nKSB7XG4gIGlmICghZXhpc3RzU3luYyhmaWxlUGF0aCkpIHJldHVybiBmYWxzZVxuICByZXR1cm4gbHN0YXRTeW5jKGZpbGVQYXRoKS5pc0ZpbGUoKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFbGVtZW50KG5vZGU6IE5vZGUpOiBub2RlIGlzIEVsZW1lbnQge1xuICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREVcbn1cblxuLy9cbi8vIERldGVybWluZSBwYXRoIHRvIGEgdGFyZ2V0IGVsZW1lbnQgZnJvbSBhIGNvbnRhaW5lciBgbWFya2Rvd24tcHJldmlldy1wbHVzLXZpZXdgLlxuLy9cbi8vIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgVGFyZ2V0IEhUTUxFbGVtZW50LlxuLy8gQHJldHVybiB7KHRhZzogPHRhZz4sIGluZGV4OiA8aW5kZXg+KVtdfSBBcnJheSBvZiB0b2tlbnMgcmVwcmVzZW50aW5nIGEgcGF0aFxuLy8gICB0byBgZWxlbWVudGAgZnJvbSBgbWFya2Rvd24tcHJldmlldy1wbHVzLXZpZXdgLiBUaGUgcm9vdCBgbWFya2Rvd24tcHJldmlldy1wbHVzLXZpZXdgXG4vLyAgIGVsZW1lbnQgaXMgdGhlIGZpcnN0IGVsZW1lbnRzIGluIHRoZSBhcnJheSBhbmQgdGhlIHRhcmdldCBlbGVtZW50XG4vLyAgIGBlbGVtZW50YCBhdCB0aGUgaGlnaGVzdCBpbmRleC4gRWFjaCBlbGVtZW50IGNvbnNpc3RzIG9mIGEgYHRhZ2AgYW5kXG4vLyAgIGBpbmRleGAgcmVwcmVzZW50aW5nIGl0cyBpbmRleCBhbW9uZ3N0IGl0cyBzaWJsaW5nIGVsZW1lbnRzIG9mIHRoZSBzYW1lXG4vLyAgIGB0YWdgLlxuLy9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXRoVG9FbGVtZW50KFxuICBlbGVtZW50OiBIVE1MRWxlbWVudCxcbik6IEFycmF5PHsgdGFnOiBzdHJpbmc7IGluZGV4OiBudW1iZXIgfT4ge1xuICBpZiAoZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdtYXJrZG93bi1wcmV2aWV3LXBsdXMtdmlldycpIHtcbiAgICByZXR1cm4gW1xuICAgICAge1xuICAgICAgICB0YWc6ICdkaXYnLFxuICAgICAgICBpbmRleDogMCxcbiAgICAgIH0sXG4gICAgXVxuICB9XG5cbiAgZWxlbWVudCA9IGJ1YmJsZVRvQ29udGFpbmVyRWxlbWVudChlbGVtZW50KVxuICBjb25zdCB0YWcgPSBlbmNvZGVUYWcoZWxlbWVudClcbiAgY29uc3Qgc2libGluZ3MgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQhLmNoaWxkcmVuXG4gIGxldCBzaWJsaW5nc0NvdW50ID0gMFxuXG4gIGZvciAoY29uc3Qgc2libGluZyBvZiBBcnJheS5mcm9tKHNpYmxpbmdzKSkge1xuICAgIGNvbnN0IHNpYmxpbmdUYWcgPVxuICAgICAgc2libGluZy5ub2RlVHlwZSA9PT0gMSA/IGVuY29kZVRhZyhzaWJsaW5nIGFzIEhUTUxFbGVtZW50KSA6IG51bGxcbiAgICBpZiAoc2libGluZyA9PT0gZWxlbWVudCkge1xuICAgICAgY29uc3QgcGF0aFRvRWxlbWVudCA9IGdldFBhdGhUb0VsZW1lbnQoZWxlbWVudC5wYXJlbnRFbGVtZW50ISlcbiAgICAgIHBhdGhUb0VsZW1lbnQucHVzaCh7XG4gICAgICAgIHRhZyxcbiAgICAgICAgaW5kZXg6IHNpYmxpbmdzQ291bnQsXG4gICAgICB9KVxuICAgICAgcmV0dXJuIHBhdGhUb0VsZW1lbnRcbiAgICB9IGVsc2UgaWYgKHNpYmxpbmdUYWcgPT09IHRhZykge1xuICAgICAgc2libGluZ3NDb3VudCsrXG4gICAgfVxuICB9XG4gIHRocm93IG5ldyBFcnJvcignZmFpbHVyZSBpbiBnZXRQYXRoVG9FbGVtZW50Jylcbn1cblxuLy9cbi8vIEZpbmQgdGhlIGNsb3Nlc3QgYW5jZXN0b3Igb2YgYW4gZWxlbWVudCB0aGF0IGlzIG5vdCBhIGRlY2VuZGFudCBvZiBlaXRoZXJcbi8vIGBzcGFuLm1hdGhgIG9yIGBzcGFuLmF0b20tdGV4dC1lZGl0b3JgLlxuLy9cbi8vIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgZnJvbSB3aGljaCB0aGUgc2VhcmNoIGZvciBhXG4vLyAgIGNsb3Nlc3QgYW5jZXN0b3IgYmVnaW5zLlxuLy8gQHJldHVybiB7SFRNTEVsZW1lbnR9IFRoZSBjbG9zZXN0IGFuY2VzdG9yIHRvIGBlbGVtZW50YCB0aGF0IGRvZXMgbm90XG4vLyAgIGNvbnRhaW4gZWl0aGVyIGBzcGFuLm1hdGhgIG9yIGBzcGFuLmF0b20tdGV4dC1lZGl0b3JgLlxuLy9cbmV4cG9ydCBmdW5jdGlvbiBidWJibGVUb0NvbnRhaW5lckVsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBIVE1MRWxlbWVudCB7XG4gIGxldCB0ZXN0RWxlbWVudCA9IGVsZW1lbnRcbiAgZm9yICg7Oykge1xuICAgIGNvbnN0IHBhcmVudCA9IHRlc3RFbGVtZW50LnBhcmVudEVsZW1lbnRcbiAgICBpZiAoIXBhcmVudCkgYnJlYWtcbiAgICBpZiAocGFyZW50LmNsYXNzTGlzdC5jb250YWlucygnTWF0aEpheF9EaXNwbGF5JykpIHtcbiAgICAgIHJldHVybiBwYXJlbnQucGFyZW50RWxlbWVudCFcbiAgICB9XG4gICAgaWYgKHBhcmVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2F0b20tdGV4dC1lZGl0b3InKSkge1xuICAgICAgcmV0dXJuIHBhcmVudFxuICAgIH1cbiAgICB0ZXN0RWxlbWVudCA9IHBhcmVudFxuICB9XG4gIHJldHVybiBlbGVtZW50XG59XG5cbi8vXG4vLyBFbmNvZGUgdGFncyBmb3IgbWFya2Rvd24taXQuXG4vL1xuLy8gQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCBFbmNvZGUgdGhlIHRhZyBvZiBlbGVtZW50LlxuLy8gQHJldHVybiB7c3RyaW5nfSBFbmNvZGVkIHRhZy5cbi8vXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlVGFnKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogc3RyaW5nIHtcbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdtYXRoJykpIHtcbiAgICByZXR1cm4gJ21hdGgnXG4gIH1cbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdhdG9tLXRleHQtZWRpdG9yJykpIHtcbiAgICByZXR1cm4gJ2NvZGUnXG4gIH0gLy8gb25seSB0b2tlbi50eXBlIGlzIGBmZW5jZWAgY29kZSBibG9ja3Mgc2hvdWxkIGV2ZXIgYmUgZm91bmQgaW4gdGhlIGZpcnN0IGxldmVsIG9mIHRoZSB0b2tlbnMgYXJyYXlcbiAgcmV0dXJuIGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpXG59XG4iXX0=