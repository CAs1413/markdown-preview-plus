"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const two_dim_array_1 = require("./two-dim-array");
const util_1 = require("./util");
let curHash = 0;
const hashTo = {};
class WrappedDomTree {
    constructor(dom, clone, rep) {
        this.children = [];
        this.size = 0;
        if (clone) {
            this.shownTree = new WrappedDomTree(dom, false, this);
            this.dom = dom.cloneNode(true);
        }
        else {
            this.dom = dom;
            this.rep = rep;
        }
        this.clone = clone;
        this.hash = curHash++;
        hashTo[this.hash] = this;
        this.isText = dom.nodeType === Node.TEXT_NODE;
        if (util_1.isElement(dom)) {
            this.tagName = dom.tagName;
            this.className = dom.className;
            this.style = dom.getAttribute('style');
        }
        this.diffHash = {};
        if (this.isText) {
            this.size = 1;
        }
        else {
            this.children = Array.from(this.dom.childNodes).map((dom, ind) => new WrappedDomTree(dom, false, rep ? rep.children[ind] : undefined));
            this.size = this.children.length
                ? this.children.reduce((prev, cur) => prev + cur.size, 0)
                : 0;
            if (!this.size) {
                this.size = 1;
            }
        }
    }
    diffTo(otherTree) {
        if (this.clone && this.shownTree) {
            return this.shownTree.diffTo(otherTree);
        }
        const diff = this.rep && this.rep.diff(otherTree);
        const operations = diff && diff.operations;
        let indexShift = 0;
        const inserted = [];
        let last;
        let possibleReplace;
        let r;
        let lastOp;
        let lastElmDeleted;
        let lastElmInserted;
        if (operations) {
            if (Array.isArray(operations)) {
                for (const op of operations) {
                    if (op.type === 'd') {
                        const possibleLastDeleted = this.children[op.tree + indexShift].dom;
                        r = this.remove(op.tree + indexShift);
                        this.rep && this.rep.remove(op.tree + indexShift);
                        if (!last || last.nextSibling === r || last === r) {
                            last = r;
                            if (last &&
                                lastOp &&
                                lastOp.type === 'i' &&
                                op.tree === lastOp.pos) {
                                lastElmDeleted = possibleLastDeleted;
                            }
                            else {
                                lastElmDeleted = undefined;
                                lastElmInserted = undefined;
                            }
                            lastOp = op;
                        }
                        indexShift--;
                    }
                    else if (op.type === 'i') {
                        this.rep &&
                            this.rep.insert(op.pos + indexShift, otherTree.children[op.otherTree]);
                        r = this.insert(op.pos + indexShift, otherTree.children[op.otherTree], this.rep && this.rep.children[op.pos + indexShift]);
                        inserted.push(r);
                        if (!last || last.nextSibling === r) {
                            last = r;
                            lastOp = op;
                            lastElmInserted = r;
                        }
                        indexShift++;
                    }
                    else {
                        const re = this.children[op.tree + indexShift].diffTo(otherTree.children[op.otherTree]);
                        if (!last ||
                            (last.nextSibling === this.children[op.tree + indexShift].dom &&
                                re.last)) {
                            ;
                            ({ last } = re);
                            if (re.possibleReplace) {
                                lastElmInserted = re.possibleReplace.cur;
                                lastElmDeleted = re.possibleReplace.prev;
                            }
                            lastOp = op;
                        }
                        inserted.push(...re.inserted);
                    }
                }
            }
            else {
                console.debug(operations);
                throw new Error('invalid operations');
            }
        }
        if (lastOp && lastOp.type !== 'i' && lastElmInserted && lastElmDeleted) {
            possibleReplace = {
                cur: lastElmInserted,
                prev: lastElmDeleted,
            };
        }
        return {
            last,
            inserted,
            possibleReplace,
        };
    }
    removeSelf() {
        hashTo[this.hash] = undefined;
        this.children &&
            this.children.forEach((c) => {
                c.removeSelf();
            });
    }
    insert(i, tree, rep) {
        const dom = tree.dom.cloneNode(true);
        if (i === this.dom.childNodes.length) {
            this.dom.appendChild(dom);
        }
        else {
            this.dom.insertBefore(dom, this.dom.childNodes[i]);
        }
        const ctree = new WrappedDomTree(dom, false, rep);
        this.children.splice(i, 0, ctree);
        return this.dom.childNodes[i];
    }
    remove(i) {
        this.dom.removeChild(this.dom.childNodes[i]);
        this.children[i].removeSelf();
        this.children.splice(i, 1);
        return this.dom.childNodes[i - 1];
    }
    diff(otherTree, tmax) {
        if (this.equalTo(otherTree)) {
            return { score: 0, operations: undefined };
        }
        if (this.cannotReplaceWith(otherTree)) {
            return { score: 1 / 0, operations: undefined };
        }
        const key = otherTree.hash;
        if (Object.keys(this.diffHash).includes(key.toString())) {
            return this.diffHash[key];
        }
        if (tmax === undefined) {
            tmax = 100000;
        }
        if (tmax <= 0) {
            return { score: 0 };
        }
        let offset = 0;
        const forwardSearch = (offset) => offset < this.children.length &&
            offset < otherTree.children.length &&
            this.children[offset].equalTo(otherTree.children[offset]);
        while (forwardSearch(offset)) {
            offset++;
        }
        const dp = new two_dim_array_1.TwoDimArray(this.children.length + 1 - offset, otherTree.children.length + 1 - offset);
        const p = new two_dim_array_1.TwoDimArray(this.children.length + 1 - offset, otherTree.children.length + 1 - offset);
        dp.set(0, 0, 0);
        let sum = 0;
        for (let i = 1; i + offset < otherTree.children.length; i++) {
            dp.set(0, i, sum);
            p.set(0, i, i - 1);
            sum += otherTree.children[i + offset].size;
        }
        if (otherTree.children.length - offset > 0) {
            const i = otherTree.children.length - offset;
            dp.set(0, i, sum);
            p.set(0, i, i - 1);
        }
        sum = 0;
        for (let i = 1; i + offset < this.children.length; i++) {
            dp.set(i, 0, sum);
            p.set(i, 0, (i - 1) * p.col);
            sum += this.children[i + offset].size;
        }
        if (this.children.length - offset > 0) {
            const i = this.children.length - offset;
            dp.set(i, 0, sum);
            p.set(i, 0, (i - 1) * p.col);
        }
        const getScore = (i, j, max) => {
            const res = dp.get(i, j);
            if (res !== undefined) {
                return res;
            }
            if (max === undefined) {
                max = 1 / 0;
            }
            if (max <= 0) {
                return 1 / 0;
            }
            let val = max;
            const bound = max;
            const subdiff = this.children[i - 1 + offset].diff(otherTree.children[j - 1 + offset], bound).score;
            let force = false;
            if (subdiff < bound &&
                subdiff + 1 <
                    this.children[i - 1 + offset].size +
                        otherTree.children[j - 1 + offset].size) {
                force = true;
            }
            val = getScore(i - 1, j - 1, bound - subdiff) + subdiff;
            let prev = p.getInd(i - 1, j - 1);
            if (!force) {
                let other = getScore(i - 1, j, Math.min(val, max) - this.children[i - 1 + offset].size) + this.children[i - 1 + offset].size;
                if (other < val) {
                    prev = p.getInd(i - 1, j);
                    val = other;
                }
                other =
                    getScore(i, j - 1, Math.min(val, max) - otherTree.children[j - 1 + offset].size) + otherTree.children[j - 1 + offset].size;
                if (other < val) {
                    prev = p.getInd(i, j - 1);
                    val = other;
                }
            }
            if (val >= max) {
                val = 1 / 0;
            }
            dp.set(i, j, val);
            p.set(i, j, prev);
            return val;
        };
        const score = getScore(this.children.length - offset, otherTree.children.length - offset, tmax);
        const operations = [];
        let cur = p.getInd(this.children.length - offset, otherTree.children.length - offset);
        let cr = this.children.length - 1 - offset;
        let cc = otherTree.children.length - 1 - offset;
        while (p.rawGet(cur) !== undefined) {
            const prev = p.rawGet(cur);
            const rc = p.get2DInd(prev);
            const pr = rc.r - 1;
            const pc = rc.c - 1;
            if (pr === cr) {
                operations.unshift({
                    type: 'i',
                    otherTree: cc + offset,
                    pos: cr + 1 + offset,
                });
            }
            else if (pc === cc) {
                operations.unshift({
                    type: 'd',
                    tree: cr + offset,
                });
            }
            else {
                const op = this.children[cr + offset].diff(otherTree.children[cc + offset]).operations;
                if (op && op.length) {
                    operations.unshift({
                        type: 'r',
                        tree: cr + offset,
                        otherTree: cc + offset,
                    });
                }
            }
            cur = prev;
            cr = pr;
            cc = pc;
        }
        this.diffHash[key] = {
            score,
            operations,
        };
        return this.diffHash[key];
    }
    equalTo(otherTree) {
        return this.dom.isEqualNode(otherTree.dom);
    }
    cannotReplaceWith(otherTree) {
        return (this.isText ||
            otherTree.isText ||
            this.tagName !== otherTree.tagName ||
            this.className !== otherTree.className ||
            this.style !== otherTree.style ||
            this.className === 'math' ||
            this.className === 'atom-text-editor' ||
            this.tagName === 'A' ||
            (this.tagName === 'IMG' && !this.dom.isEqualNode(otherTree.dom)));
    }
}
exports.WrappedDomTree = WrappedDomTree;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcHBlZC1kb20tdHJlZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy1jbGllbnQvd3JhcHBlZC1kb20tdHJlZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQXNCQSxtREFBNkM7QUFDN0MsaUNBQWtDO0FBRWxDLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQTtBQUNmLE1BQU0sTUFBTSxHQUFrRCxFQUFFLENBQUE7QUFPaEU7SUF5QkUsWUFBWSxHQUFTLEVBQUUsS0FBYyxFQUFFLEdBQW9CO1FBdEJuRCxhQUFRLEdBQXFCLEVBQUUsQ0FBQTtRQUMvQixTQUFJLEdBQVcsQ0FBQyxDQUFBO1FBc0J0QixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ1YsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLGNBQWMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFBO1lBQ3JELElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQVksQ0FBQTtRQUMzQyxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQTtZQUNkLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFBO1FBQ2hCLENBQUM7UUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtRQUNsQixJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sRUFBRSxDQUFBO1FBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFBO1FBQ3hCLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFBO1FBQzdDLEVBQUUsQ0FBQyxDQUFDLGdCQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FB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LEdBQUcsTUFBTSxFQUNqQyxTQUFTLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUN2QyxDQUFBO1FBQ0QsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBRWYsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFBO1FBQ1gsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUM1RCxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUE7WUFDakIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtZQUNsQixHQUFHLElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFBO1FBQzVDLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzQyxNQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7WUFDNUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1lBQ2pCLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7UUFDcEIsQ0FBQztRQUVELEdBQUcsR0FBRyxDQUFDLENBQUE7UUFFUCxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFD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QVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDNUMsQ0FBQztJQUVPLGlCQUFpQixDQUFDLFNBQXlCO1FBQ2pELE1BQU0sQ0FBQyxDQUNMLElBQUksQ0FBQyxNQUFNO1lBQ1gsU0FBUyxDQUFDLE1BQU07WUFDaEIsSUFBSSxDQUFDLE9BQU8sS0FBSyxTQUFTLENBQUMsT0FBTztZQUNsQyxJQUFJLENBQUMsU0FBUyxLQUFLLFNBQVMsQ0FBQyxTQUFTO1lBQ3RDLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLEtBQUs7WUFDOUIsSUFBSSxDQUFDLFNBQVMsS0FBSyxNQUFNO1lBQ3pCLElBQUksQ0FBQyxTQUFTLEtBQUssa0JBQWtCO1lBQ3JDLElBQUksQ0FBQyxPQUFPLEtBQUssR0FBRztZQUNwQixDQUFDLElBQUksQ0FBQyxPQUFPLEtBQUssS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQ2pFLENBQUE7SUFDSCxDQUFDO0NBQ0Y7QUExWkQsd0NBMFpDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBmaWxlIGluY29ycG9yYXRlcyBjb2RlIGZyb20gW21hcmttb25dKGh0dHBzOi8vZ2l0aHViLmNvbS95eWpoYW8vbWFya21vbilcbi8vIGNvdmVyZWQgYnkgdGhlIGZvbGxvd2luZyB0ZXJtczpcbi8vXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTQsIFlhbyBZdWppYW4sIGh0dHA6Ly95anlhby5jb21cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuaW1wb3J0IHsgVHdvRGltQXJyYXkgfSBmcm9tICcuL3R3by1kaW0tYXJyYXknXG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tICcuL3V0aWwnXG5cbmxldCBjdXJIYXNoID0gMFxuY29uc3QgaGFzaFRvOiB7IFtrZXk6IHN0cmluZ106IFdyYXBwZWREb21UcmVlIHwgdW5kZWZpbmVkIH0gPSB7fVxuXG50eXBlIE9wZXJhdGlvbiA9XG4gIHwgeyB0eXBlOiAncic7IHRyZWU6IG51bWJlcjsgb3RoZXJUcmVlOiBudW1iZXIgfVxuICB8IHsgdHlwZTogJ2QnOyB0cmVlOiBudW1iZXIgfVxuICB8IHsgdHlwZTogJ2knOyBvdGhlclRyZWU6IG51bWJlcjsgcG9zOiBudW1iZXIgfVxuXG5leHBvcnQgY2xhc3MgV3JhcHBlZERvbVRyZWUge1xuICBwdWJsaWMgcmVhZG9ubHkgc2hvd25UcmVlPzogV3JhcHBlZERvbVRyZWVcbiAgcHVibGljIHJlYWRvbmx5IGRvbTogTm9kZVxuICBwcml2YXRlIGNoaWxkcmVuOiBXcmFwcGVkRG9tVHJlZVtdID0gW11cbiAgcHJpdmF0ZSBzaXplOiBudW1iZXIgPSAwXG4gIHByaXZhdGUgZGlmZkhhc2g6IHtcbiAgICBba2V5OiBzdHJpbmddOiB7XG4gICAgICBzY29yZTogbnVtYmVyXG4gICAgICBvcGVyYXRpb25zPzogT3BlcmF0aW9uW11cbiAgICB9XG4gIH1cbiAgcHJpdmF0ZSBjbGFzc05hbWU/OiBzdHJpbmdcbiAgcHJpdmF0ZSB0YWdOYW1lPzogc3RyaW5nXG4gIHByaXZhdGUgc3R5bGU/OiBzdHJpbmcgfCBudWxsXG4gIHByaXZhdGUgcmVwPzogV3JhcHBlZERvbVRyZWVcbiAgcHJpdmF0ZSBpc1RleHQ6IGJvb2xlYW5cbiAgcHJpdmF0ZSBoYXNoOiBudW1iZXJcbiAgcHJpdmF0ZSBjbG9uZTogYm9vbGVhblxuXG4gIC8vIEBwYXJhbSBkb20gQSBET00gZWxlbWVudCBvYmplY3RcbiAgLy8gICAgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL2VsZW1lbnRcbiAgLy8gQHBhcmFtIGNsb25lIEJvb2xlYW4gZmxhZyBpbmRpY2F0aW5nIGlmIHRoaXMgaXMgdGhlIERPTSB0cmVlIHRvIG1vZGlmeVxuICAvLyBAcGFyYW0gcmVwIFdyYXBwZWREb21UcmVlIG9mIGEgRE9NIGVsZW1lbnQgbm9kZSBpbiBkb21cbiAgY29uc3RydWN0b3IoZG9tOiBOb2RlLCBjbG9uZTogdHJ1ZSlcbiAgY29uc3RydWN0b3IoZG9tOiBOb2RlLCBjbG9uZTogZmFsc2UsIHJlcD86IFdyYXBwZWREb21UcmVlKVxuICBjb25zdHJ1Y3Rvcihkb206IE5vZGUsIGNsb25lOiBib29sZWFuLCByZXA/OiBXcmFwcGVkRG9tVHJlZSkge1xuICAgIGlmIChjbG9uZSkge1xuICAgICAgdGhpcy5zaG93blRyZWUgPSBuZXcgV3JhcHBlZERvbVRyZWUoZG9tLCBmYWxzZSwgdGhpcylcbiAgICAgIHRoaXMuZG9tID0gZG9tLmNsb25lTm9kZSh0cnVlKSBhcyBFbGVtZW50XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZG9tID0gZG9tXG4gICAgICB0aGlzLnJlcCA9IHJlcFxuICAgIH1cblxuICAgIHRoaXMuY2xvbmUgPSBjbG9uZVxuICAgIHRoaXMuaGFzaCA9IGN1ckhhc2grK1xuICAgIGhhc2hUb1t0aGlzLmhhc2hdID0gdGhpc1xuICAgIHRoaXMuaXNUZXh0ID0gZG9tLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERVxuICAgIGlmIChpc0VsZW1lbnQoZG9tKSkge1xuICAgICAgdGhpcy50YWdOYW1lID0gZG9tLnRhZ05hbWVcbiAgICAgIHRoaXMuY2xhc3NOYW1lID0gZG9tLmNsYXNzTmFtZVxuICAgICAgdGhpcy5zdHlsZSA9IGRvbS5nZXRBdHRyaWJ1dGUoJ3N0eWxlJylcbiAgICB9XG4gICAgdGhpcy5kaWZmSGFzaCA9IHt9XG5cbiAgICBpZiAodGhpcy5pc1RleHQpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IDFcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jaGlsZHJlbiA9IEFycmF5LmZyb20odGhpcy5kb20uY2hpbGROb2RlcykubWFwKFxuICAgICAgICAoZG9tLCBpbmQpID0+XG4gICAgICAgICAgbmV3IFdyYXBwZWREb21UcmVlKFxuICAgICAgICAgICAgZG9tIGFzIEVsZW1lbnQsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHJlcCA/IHJlcC5jaGlsZHJlbltpbmRdIDogdW5kZWZpbmVkLFxuICAgICAgICAgICksXG4gICAgICApXG4gICAgICB0aGlzLnNpemUgPSB0aGlzLmNoaWxkcmVuLmxlbmd0aFxuICAgICAgICA/IHRoaXMuY2hpbGRyZW4ucmVkdWNlKChwcmV2LCBjdXIpID0+IHByZXYgKyBjdXIuc2l6ZSwgMClcbiAgICAgICAgOiAwXG4gICAgICBpZiAoIXRoaXMuc2l6ZSkge1xuICAgICAgICB0aGlzLnNpemUgPSAxXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQHBhcmFtIG90aGVyVHJlZSBXcmFwcGVkRG9tVHJlZSBvZiBhIERPTSBlbGVtZW50IHRvIGRpZmYgYWdhaW5zdFxuICBwdWJsaWMgZGlmZlRvKFxuICAgIG90aGVyVHJlZTogV3JhcHBlZERvbVRyZWUsXG4gICk6IHtcbiAgICBwb3NzaWJsZVJlcGxhY2U/OiB7XG4gICAgICBjdXI/OiBOb2RlXG4gICAgICBwcmV2PzogTm9kZVxuICAgIH1cbiAgICBpbnNlcnRlZDogTm9kZVtdXG4gICAgbGFzdD86IE5vZGVcbiAgfSB7XG4gICAgaWYgKHRoaXMuY2xvbmUgJiYgdGhpcy5zaG93blRyZWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnNob3duVHJlZS5kaWZmVG8ob3RoZXJUcmVlKVxuICAgIH1cblxuICAgIGNvbnN0IGRpZmYgPSB0aGlzLnJlcCAmJiB0aGlzLnJlcC5kaWZmKG90aGVyVHJlZSlcbiAgICBjb25zdCBvcGVyYXRpb25zID0gZGlmZiAmJiBkaWZmLm9wZXJhdGlvbnNcbiAgICBsZXQgaW5kZXhTaGlmdCA9IDBcbiAgICBjb25zdCBpbnNlcnRlZDogTm9kZVtdID0gW11cblxuICAgIC8vIEZvcmNlIHZhcmlhYmxlcyB0byBsZWFrIHRvIGRpZmZUbyBzY29wZVxuICAgIGxldCBsYXN0OiBOb2RlIHwgdW5kZWZpbmVkXG4gICAgbGV0IHBvc3NpYmxlUmVwbGFjZVxuICAgIGxldCByXG4gICAgbGV0IGxhc3RPcDogT3BlcmF0aW9uIHwgdW5kZWZpbmVkXG4gICAgbGV0IGxhc3RFbG1EZWxldGVkOiBOb2RlIHwgdW5kZWZpbmVkXG4gICAgbGV0IGxhc3RFbG1JbnNlcnRlZDogTm9kZSB8IHVuZGVmaW5lZFxuXG4gICAgaWYgKG9wZXJhdGlvbnMpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG9wZXJhdGlvbnMpKSB7XG4gICAgICAgIGZvciAoY29uc3Qgb3Agb2Ygb3BlcmF0aW9ucykge1xuICAgICAgICAgIGlmIChvcC50eXBlID09PSAnZCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc3NpYmxlTGFzdERlbGV0ZWQgPSB0aGlzLmNoaWxkcmVuW29wLnRyZWUgKyBpbmRleFNoaWZ0XS5kb21cbiAgICAgICAgICAgIHIgPSB0aGlzLnJlbW92ZShvcC50cmVlICsgaW5kZXhTaGlmdClcbiAgICAgICAgICAgIHRoaXMucmVwICYmIHRoaXMucmVwLnJlbW92ZShvcC50cmVlICsgaW5kZXhTaGlmdClcbiAgICAgICAgICAgIGlmICghbGFzdCB8fCBsYXN0Lm5leHRTaWJsaW5nID09PSByIHx8IGxhc3QgPT09IHIpIHtcbiAgICAgICAgICAgICAgbGFzdCA9IHJcbiAgICAgICAgICAgICAgLy8gVW5kZWZpbmVkIGVycm9ycyBjYW4gYmUgdGhyb3cgc28gd2UgYWRkIGEgY29uZGl0aW9uIG9uIGxhc3RPcFxuICAgICAgICAgICAgICAvLyBiZWluZyBkZWZpbmVkXG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBsYXN0ICYmXG4gICAgICAgICAgICAgICAgbGFzdE9wICYmXG4gICAgICAgICAgICAgICAgbGFzdE9wLnR5cGUgPT09ICdpJyAmJlxuICAgICAgICAgICAgICAgIG9wLnRyZWUgPT09IGxhc3RPcC5wb3NcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgbGFzdEVsbURlbGV0ZWQgPSBwb3NzaWJsZUxhc3REZWxldGVkXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGFzdEVsbURlbGV0ZWQgPSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICBsYXN0RWxtSW5zZXJ0ZWQgPSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsYXN0T3AgPSBvcFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5kZXhTaGlmdC0tXG4gICAgICAgICAgfSBlbHNlIGlmIChvcC50eXBlID09PSAnaScpIHtcbiAgICAgICAgICAgIHRoaXMucmVwICYmXG4gICAgICAgICAgICAgIHRoaXMucmVwLmluc2VydChcbiAgICAgICAgICAgICAgICBvcC5wb3MgKyBpbmRleFNoaWZ0LFxuICAgICAgICAgICAgICAgIG90aGVyVHJlZS5jaGlsZHJlbltvcC5vdGhlclRyZWVdLFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICByID0gdGhpcy5pbnNlcnQoXG4gICAgICAgICAgICAgIG9wLnBvcyArIGluZGV4U2hpZnQsXG4gICAgICAgICAgICAgIG90aGVyVHJlZS5jaGlsZHJlbltvcC5vdGhlclRyZWVdLFxuICAgICAgICAgICAgICB0aGlzLnJlcCAmJiB0aGlzLnJlcC5jaGlsZHJlbltvcC5wb3MgKyBpbmRleFNoaWZ0XSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIGluc2VydGVkLnB1c2gocilcbiAgICAgICAgICAgIGlmICghbGFzdCB8fCBsYXN0Lm5leHRTaWJsaW5nID09PSByKSB7XG4gICAgICAgICAgICAgIGxhc3QgPSByXG4gICAgICAgICAgICAgIGxhc3RPcCA9IG9wXG4gICAgICAgICAgICAgIGxhc3RFbG1JbnNlcnRlZCA9IHIgYXMgRWxlbWVudFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5kZXhTaGlmdCsrXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHJlID0gdGhpcy5jaGlsZHJlbltvcC50cmVlICsgaW5kZXhTaGlmdF0uZGlmZlRvKFxuICAgICAgICAgICAgICBvdGhlclRyZWUuY2hpbGRyZW5bb3Aub3RoZXJUcmVlXSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgIWxhc3QgfHxcbiAgICAgICAgICAgICAgKGxhc3QubmV4dFNpYmxpbmcgPT09IHRoaXMuY2hpbGRyZW5bb3AudHJlZSArIGluZGV4U2hpZnRdLmRvbSAmJlxuICAgICAgICAgICAgICAgIHJlLmxhc3QpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgOyh7IGxhc3QgfSA9IHJlKVxuICAgICAgICAgICAgICBpZiAocmUucG9zc2libGVSZXBsYWNlKSB7XG4gICAgICAgICAgICAgICAgbGFzdEVsbUluc2VydGVkID0gcmUucG9zc2libGVSZXBsYWNlLmN1ciBhcyBFbGVtZW50IHwgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgbGFzdEVsbURlbGV0ZWQgPSByZS5wb3NzaWJsZVJlcGxhY2UucHJldlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGxhc3RPcCA9IG9wXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnNlcnRlZC5wdXNoKC4uLnJlLmluc2VydGVkKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhvcGVyYXRpb25zKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgb3BlcmF0aW9ucycpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGxhc3RPcCAmJiBsYXN0T3AudHlwZSAhPT0gJ2knICYmIGxhc3RFbG1JbnNlcnRlZCAmJiBsYXN0RWxtRGVsZXRlZCkge1xuICAgICAgcG9zc2libGVSZXBsYWNlID0ge1xuICAgICAgICBjdXI6IGxhc3RFbG1JbnNlcnRlZCxcbiAgICAgICAgcHJldjogbGFzdEVsbURlbGV0ZWQsXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxhc3QsXG4gICAgICBpbnNlcnRlZCxcbiAgICAgIHBvc3NpYmxlUmVwbGFjZSxcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlU2VsZigpIHtcbiAgICBoYXNoVG9bdGhpcy5oYXNoXSA9IHVuZGVmaW5lZFxuICAgIHRoaXMuY2hpbGRyZW4gJiZcbiAgICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaCgoYykgPT4ge1xuICAgICAgICBjLnJlbW92ZVNlbGYoKVxuICAgICAgfSlcbiAgfVxuXG4gIHByaXZhdGUgaW5zZXJ0KGk6IG51bWJlciwgdHJlZTogV3JhcHBlZERvbVRyZWUsIHJlcD86IFdyYXBwZWREb21UcmVlKSB7XG4gICAgY29uc3QgZG9tID0gdHJlZS5kb20uY2xvbmVOb2RlKHRydWUpXG4gICAgaWYgKGkgPT09IHRoaXMuZG9tLmNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmRvbS5hcHBlbmRDaGlsZChkb20pXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZG9tLmluc2VydEJlZm9yZShkb20sIHRoaXMuZG9tLmNoaWxkTm9kZXNbaV0pXG4gICAgfVxuXG4gICAgY29uc3QgY3RyZWUgPSBuZXcgV3JhcHBlZERvbVRyZWUoZG9tIGFzIEVsZW1lbnQsIGZhbHNlLCByZXApXG4gICAgdGhpcy5jaGlsZHJlbi5zcGxpY2UoaSwgMCwgY3RyZWUpXG4gICAgcmV0dXJuIHRoaXMuZG9tLmNoaWxkTm9kZXNbaV1cbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlKGk6IG51bWJlcikge1xuICAgIHRoaXMuZG9tLnJlbW92ZUNoaWxkKHRoaXMuZG9tLmNoaWxkTm9kZXNbaV0pXG4gICAgdGhpcy5jaGlsZHJlbltpXS5yZW1vdmVTZWxmKClcbiAgICB0aGlzLmNoaWxkcmVuLnNwbGljZShpLCAxKVxuICAgIHJldHVybiB0aGlzLmRvbS5jaGlsZE5vZGVzW2kgLSAxXVxuICB9XG5cbiAgcHJpdmF0ZSBkaWZmKFxuICAgIG90aGVyVHJlZTogV3JhcHBlZERvbVRyZWUsXG4gICAgdG1heD86IG51bWJlcixcbiAgKToge1xuICAgIHNjb3JlOiBudW1iZXJcbiAgICBvcGVyYXRpb25zPzogT3BlcmF0aW9uW11cbiAgfSB7XG4gICAgaWYgKHRoaXMuZXF1YWxUbyhvdGhlclRyZWUpKSB7XG4gICAgICByZXR1cm4geyBzY29yZTogMCwgb3BlcmF0aW9uczogdW5kZWZpbmVkIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5jYW5ub3RSZXBsYWNlV2l0aChvdGhlclRyZWUpKSB7XG4gICAgICByZXR1cm4geyBzY29yZTogMSAvIDAsIG9wZXJhdGlvbnM6IHVuZGVmaW5lZCB9XG4gICAgfVxuXG4gICAgY29uc3Qga2V5ID0gb3RoZXJUcmVlLmhhc2hcbiAgICBpZiAoT2JqZWN0LmtleXModGhpcy5kaWZmSGFzaCkuaW5jbHVkZXMoa2V5LnRvU3RyaW5nKCkpKSB7XG4gICAgICByZXR1cm4gdGhpcy5kaWZmSGFzaFtrZXldXG4gICAgfVxuXG4gICAgaWYgKHRtYXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgdG1heCA9IDEwMDAwMFxuICAgIH1cbiAgICBpZiAodG1heCA8PSAwKSB7XG4gICAgICByZXR1cm4geyBzY29yZTogMCB9XG4gICAgfVxuXG4gICAgbGV0IG9mZnNldCA9IDBcbiAgICBjb25zdCBmb3J3YXJkU2VhcmNoID0gKG9mZnNldDogbnVtYmVyKSA9PlxuICAgICAgb2Zmc2V0IDwgdGhpcy5jaGlsZHJlbi5sZW5ndGggJiZcbiAgICAgIG9mZnNldCA8IG90aGVyVHJlZS5jaGlsZHJlbi5sZW5ndGggJiZcbiAgICAgIHRoaXMuY2hpbGRyZW5bb2Zmc2V0XS5lcXVhbFRvKG90aGVyVHJlZS5jaGlsZHJlbltvZmZzZXRdKVxuICAgIHdoaWxlIChmb3J3YXJkU2VhcmNoKG9mZnNldCkpIHtcbiAgICAgIG9mZnNldCsrXG4gICAgfVxuXG4gICAgY29uc3QgZHAgPSBuZXcgVHdvRGltQXJyYXk8bnVtYmVyPihcbiAgICAgIHRoaXMuY2hpbGRyZW4ubGVuZ3RoICsgMSAtIG9mZnNldCxcbiAgICAgIG90aGVyVHJlZS5jaGlsZHJlbi5sZW5ndGggKyAxIC0gb2Zmc2V0LFxuICAgIClcbiAgICBjb25zdCBwID0gbmV3IFR3b0RpbUFycmF5PG51bWJlcj4oXG4gICAgICB0aGlzLmNoaWxkcmVuLmxlbmd0aCArIDEgLSBvZmZzZXQsXG4gICAgICBvdGhlclRyZWUuY2hpbGRyZW4ubGVuZ3RoICsgMSAtIG9mZnNldCxcbiAgICApXG4gICAgZHAuc2V0KDAsIDAsIDApXG5cbiAgICBsZXQgc3VtID0gMFxuICAgIGZvciAobGV0IGkgPSAxOyBpICsgb2Zmc2V0IDwgb3RoZXJUcmVlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkcC5zZXQoMCwgaSwgc3VtKVxuICAgICAgcC5zZXQoMCwgaSwgaSAtIDEpXG4gICAgICBzdW0gKz0gb3RoZXJUcmVlLmNoaWxkcmVuW2kgKyBvZmZzZXRdLnNpemVcbiAgICB9XG4gICAgaWYgKG90aGVyVHJlZS5jaGlsZHJlbi5sZW5ndGggLSBvZmZzZXQgPiAwKSB7XG4gICAgICBjb25zdCBpID0gb3RoZXJUcmVlLmNoaWxkcmVuLmxlbmd0aCAtIG9mZnNldFxuICAgICAgZHAuc2V0KDAsIGksIHN1bSlcbiAgICAgIHAuc2V0KDAsIGksIGkgLSAxKVxuICAgIH1cblxuICAgIHN1bSA9IDBcblxuICAgIGZvciAobGV0IGkgPSAxOyBpICsgb2Zmc2V0IDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgZHAuc2V0KGksIDAsIHN1bSlcbiAgICAgIHAuc2V0KGksIDAsIChpIC0gMSkgKiBwLmNvbClcbiAgICAgIHN1bSArPSB0aGlzLmNoaWxkcmVuW2kgKyBvZmZzZXRdLnNpemVcbiAgICB9XG4gICAgaWYgKHRoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gb2Zmc2V0ID4gMCkge1xuICAgICAgY29uc3QgaSA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gb2Zmc2V0XG4gICAgICBkcC5zZXQoaSwgMCwgc3VtKVxuICAgICAgcC5zZXQoaSwgMCwgKGkgLSAxKSAqIHAuY29sKVxuICAgIH1cblxuICAgIGNvbnN0IGdldFNjb3JlID0gKGk6IG51bWJlciwgajogbnVtYmVyLCBtYXg/OiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICAgICAgY29uc3QgcmVzID0gZHAuZ2V0KGksIGopXG4gICAgICBpZiAocmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc1xuICAgICAgfVxuICAgICAgaWYgKG1heCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG1heCA9IDEgLyAwXG4gICAgICB9XG4gICAgICBpZiAobWF4IDw9IDApIHtcbiAgICAgICAgcmV0dXJuIDEgLyAwXG4gICAgICB9XG5cbiAgICAgIGxldCB2YWwgPSBtYXhcbiAgICAgIGNvbnN0IGJvdW5kID0gbWF4XG4gICAgICBjb25zdCBzdWJkaWZmID0gdGhpcy5jaGlsZHJlbltpIC0gMSArIG9mZnNldF0uZGlmZihcbiAgICAgICAgb3RoZXJUcmVlLmNoaWxkcmVuW2ogLSAxICsgb2Zmc2V0XSxcbiAgICAgICAgYm91bmQsXG4gICAgICApLnNjb3JlXG4gICAgICBsZXQgZm9yY2UgPSBmYWxzZVxuICAgICAgaWYgKFxuICAgICAgICBzdWJkaWZmIDwgYm91bmQgJiZcbiAgICAgICAgc3ViZGlmZiArIDEgPFxuICAgICAgICAgIHRoaXMuY2hpbGRyZW5baSAtIDEgKyBvZmZzZXRdLnNpemUgK1xuICAgICAgICAgICAgb3RoZXJUcmVlLmNoaWxkcmVuW2ogLSAxICsgb2Zmc2V0XS5zaXplXG4gICAgICApIHtcbiAgICAgICAgZm9yY2UgPSB0cnVlXG4gICAgICB9XG4gICAgICB2YWwgPSBnZXRTY29yZShpIC0gMSwgaiAtIDEsIGJvdW5kIC0gc3ViZGlmZikgKyBzdWJkaWZmXG4gICAgICBsZXQgcHJldiA9IHAuZ2V0SW5kKGkgLSAxLCBqIC0gMSlcblxuICAgICAgaWYgKCFmb3JjZSkge1xuICAgICAgICBsZXQgb3RoZXIgPVxuICAgICAgICAgIGdldFNjb3JlKFxuICAgICAgICAgICAgaSAtIDEsXG4gICAgICAgICAgICBqLFxuICAgICAgICAgICAgTWF0aC5taW4odmFsLCBtYXgpIC0gdGhpcy5jaGlsZHJlbltpIC0gMSArIG9mZnNldF0uc2l6ZSxcbiAgICAgICAgICApICsgdGhpcy5jaGlsZHJlbltpIC0gMSArIG9mZnNldF0uc2l6ZVxuICAgICAgICBpZiAob3RoZXIgPCB2YWwpIHtcbiAgICAgICAgICBwcmV2ID0gcC5nZXRJbmQoaSAtIDEsIGopXG4gICAgICAgICAgdmFsID0gb3RoZXJcbiAgICAgICAgfVxuXG4gICAgICAgIG90aGVyID1cbiAgICAgICAgICBnZXRTY29yZShcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBqIC0gMSxcbiAgICAgICAgICAgIE1hdGgubWluKHZhbCwgbWF4KSAtIG90aGVyVHJlZS5jaGlsZHJlbltqIC0gMSArIG9mZnNldF0uc2l6ZSxcbiAgICAgICAgICApICsgb3RoZXJUcmVlLmNoaWxkcmVuW2ogLSAxICsgb2Zmc2V0XS5zaXplXG4gICAgICAgIGlmIChvdGhlciA8IHZhbCkge1xuICAgICAgICAgIHByZXYgPSBwLmdldEluZChpLCBqIC0gMSlcbiAgICAgICAgICB2YWwgPSBvdGhlclxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWwgPj0gbWF4KSB7XG4gICAgICAgIHZhbCA9IDEgLyAwXG4gICAgICB9XG5cbiAgICAgIGRwLnNldChpLCBqLCB2YWwpXG4gICAgICBwLnNldChpLCBqLCBwcmV2KVxuICAgICAgcmV0dXJuIHZhbFxuICAgIH1cblxuICAgIGNvbnN0IHNjb3JlID0gZ2V0U2NvcmUoXG4gICAgICB0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIG9mZnNldCxcbiAgICAgIG90aGVyVHJlZS5jaGlsZHJlbi5sZW5ndGggLSBvZmZzZXQsXG4gICAgICB0bWF4LFxuICAgIClcbiAgICBjb25zdCBvcGVyYXRpb25zOiBPcGVyYXRpb25bXSA9IFtdXG5cbiAgICBsZXQgY3VyID0gcC5nZXRJbmQoXG4gICAgICB0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIG9mZnNldCxcbiAgICAgIG90aGVyVHJlZS5jaGlsZHJlbi5sZW5ndGggLSBvZmZzZXQsXG4gICAgKVxuICAgIGxldCBjciA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMSAtIG9mZnNldFxuICAgIGxldCBjYyA9IG90aGVyVHJlZS5jaGlsZHJlbi5sZW5ndGggLSAxIC0gb2Zmc2V0XG5cbiAgICB3aGlsZSAocC5yYXdHZXQoY3VyKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBwcmV2ID0gcC5yYXdHZXQoY3VyKSFcbiAgICAgIGNvbnN0IHJjID0gcC5nZXQyREluZChwcmV2KVxuICAgICAgY29uc3QgcHIgPSByYy5yIC0gMVxuICAgICAgY29uc3QgcGMgPSByYy5jIC0gMVxuXG4gICAgICBpZiAocHIgPT09IGNyKSB7XG4gICAgICAgIG9wZXJhdGlvbnMudW5zaGlmdCh7XG4gICAgICAgICAgdHlwZTogJ2knLFxuICAgICAgICAgIG90aGVyVHJlZTogY2MgKyBvZmZzZXQsXG4gICAgICAgICAgcG9zOiBjciArIDEgKyBvZmZzZXQsXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKHBjID09PSBjYykge1xuICAgICAgICBvcGVyYXRpb25zLnVuc2hpZnQoe1xuICAgICAgICAgIHR5cGU6ICdkJyxcbiAgICAgICAgICB0cmVlOiBjciArIG9mZnNldCxcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG9wID0gdGhpcy5jaGlsZHJlbltjciArIG9mZnNldF0uZGlmZihcbiAgICAgICAgICBvdGhlclRyZWUuY2hpbGRyZW5bY2MgKyBvZmZzZXRdLFxuICAgICAgICApLm9wZXJhdGlvbnNcbiAgICAgICAgaWYgKG9wICYmIG9wLmxlbmd0aCkge1xuICAgICAgICAgIG9wZXJhdGlvbnMudW5zaGlmdCh7XG4gICAgICAgICAgICB0eXBlOiAncicsXG4gICAgICAgICAgICB0cmVlOiBjciArIG9mZnNldCxcbiAgICAgICAgICAgIG90aGVyVHJlZTogY2MgKyBvZmZzZXQsXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY3VyID0gcHJldlxuICAgICAgY3IgPSBwclxuICAgICAgY2MgPSBwY1xuICAgIH1cblxuICAgIHRoaXMuZGlmZkhhc2hba2V5XSA9IHtcbiAgICAgIHNjb3JlLFxuICAgICAgb3BlcmF0aW9ucyxcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5kaWZmSGFzaFtrZXldXG4gIH1cblxuICBwcml2YXRlIGVxdWFsVG8ob3RoZXJUcmVlOiBXcmFwcGVkRG9tVHJlZSkge1xuICAgIHJldHVybiB0aGlzLmRvbS5pc0VxdWFsTm9kZShvdGhlclRyZWUuZG9tKVxuICB9XG5cbiAgcHJpdmF0ZSBjYW5ub3RSZXBsYWNlV2l0aChvdGhlclRyZWU6IFdyYXBwZWREb21UcmVlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuaXNUZXh0IHx8XG4gICAgICBvdGhlclRyZWUuaXNUZXh0IHx8XG4gICAgICB0aGlzLnRhZ05hbWUgIT09IG90aGVyVHJlZS50YWdOYW1lIHx8XG4gICAgICB0aGlzLmNsYXNzTmFtZSAhPT0gb3RoZXJUcmVlLmNsYXNzTmFtZSB8fFxuICAgICAgdGhpcy5zdHlsZSAhPT0gb3RoZXJUcmVlLnN0eWxlIHx8XG4gICAgICB0aGlzLmNsYXNzTmFtZSA9PT0gJ21hdGgnIHx8XG4gICAgICB0aGlzLmNsYXNzTmFtZSA9PT0gJ2F0b20tdGV4dC1lZGl0b3InIHx8XG4gICAgICB0aGlzLnRhZ05hbWUgPT09ICdBJyB8fFxuICAgICAgKHRoaXMudGFnTmFtZSA9PT0gJ0lNRycgJiYgIXRoaXMuZG9tLmlzRXF1YWxOb2RlKG90aGVyVHJlZS5kb20pKVxuICAgIClcbiAgfVxufVxuIl19