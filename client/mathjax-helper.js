"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const CSON = require("season");
const fs = require("fs");
const util_1 = require("./util");
let isMathJaxDisabled = false;
async function mathProcessor(domElements, renderer) {
    if (isMathJaxDisabled)
        return;
    const jax = await loadMathJax(renderer);
    await jax.queueTypeset(domElements);
}
exports.mathProcessor = mathProcessor;
async function processHTMLString(frame, element) {
    if (isMathJaxDisabled) {
        return element.innerHTML;
    }
    const jax = await loadMathJax('SVG');
    await jax.queueTypeset([element]);
    const msvgh = await new Promise((resolve) => frame.executeJavaScript(`return document.getElementById('MathJax_SVG_Hidden')`, false, resolve));
    const svgGlyphs = msvgh && msvgh.parentNode.cloneNode(true);
    if (svgGlyphs !== null) {
        element.insertBefore(svgGlyphs, element.firstChild);
    }
    return element.innerHTML;
}
exports.processHTMLString = processHTMLString;
function disableMathJax(disable) {
    isMathJaxDisabled = disable;
}
async function loadMathJax(renderer) {
    if (window.mathJaxStub)
        return window.mathJaxStub;
    return attachMathJax(renderer);
}
exports.testing = {
    loadMathJax,
    disableMathJax,
};
function getUserMacrosPath() {
    return path.join(process.env.HOME, 'markdown-preview-plus.cson');
}
function loadMacrosFile(filePath) {
    if (!CSON.isObjectPath(filePath)) {
        return {};
    }
    return CSON.readFileSync(filePath, function (error, object) {
        if (object === undefined) {
            object = {};
        }
        if (error !== undefined) {
            console.warn(`Error reading Latex Macros file '${filePath}': ${error.stack !== undefined ? error.stack : error}`);
            console.error(`Failed to load Latex Macros from '${filePath}'`, {
                detail: error.message,
                dismissable: true,
            });
        }
        return object;
    });
}
function loadUserMacros() {
    const userMacrosPath = getUserMacrosPath();
    if (util_1.isFileSync(userMacrosPath)) {
        return loadMacrosFile(userMacrosPath);
    }
    else {
        console.debug('Creating markdown-preview-plus.cson, this is a one-time operation.');
        createMacrosTemplate(userMacrosPath);
        return loadMacrosFile(userMacrosPath);
    }
}
function createMacrosTemplate(filePath) {
    const templatePath = path.join(__dirname, '../assets/macros-template.cson');
    const templateFile = fs.readFileSync(templatePath, 'utf8');
    fs.writeFileSync(filePath, templateFile);
}
function checkMacros(macrosObject) {
    const namePattern = /^[^a-zA-Z\d\s]$|^[a-zA-Z]*$/;
    for (const name in macrosObject) {
        const value = macrosObject[name];
        if (!name.match(namePattern) || !valueMatchesPattern(value)) {
            delete macrosObject[name];
            console.error(`Failed to load LaTeX macro named '${name}'. Please see the [LaTeX guide](https://github.com/atom-community/markdown-preview-plus/blob/master/docs/math.md#macro-names)`);
        }
    }
    return macrosObject;
}
function valueMatchesPattern(value) {
    if (Array.isArray(value)) {
        const macroDefinition = value[0];
        const numberOfArgs = value[1];
        if (typeof numberOfArgs === 'number') {
            return numberOfArgs % 1 === 0 && typeof macroDefinition === 'string';
        }
        else {
            return false;
        }
    }
    else if (typeof value === 'string') {
        return true;
    }
    else {
        return false;
    }
}
const configureMathJax = function (jax, renderer) {
    let userMacros = loadUserMacros();
    if (userMacros) {
        userMacros = checkMacros(userMacros);
    }
    else {
        userMacros = {};
    }
    jax.jaxConfigure(userMacros, renderer);
    console.log('Loaded maths rendering engine MathJax');
};
async function attachMathJax(renderer) {
    console.log('Loading maths rendering engine MathJax');
    await Promise.all([
        injectScript(`${require.resolve('mathjax')}?delayStartupUntil=configured`),
        injectScript(require.resolve('./mathjax-stub')),
    ]);
    configureMathJax(window.mathJaxStub, renderer);
    return window.mathJaxStub;
}
async function injectScript(scriptSrc) {
    const script = document.createElement('script');
    script.src = scriptSrc;
    script.type = 'text/javascript';
    document.head.appendChild(script);
    return new Promise((resolve) => {
        script.addEventListener('load', () => resolve());
    });
}
exports.injectScript = injectScript;
//# sourceMappingURL=data:application/json;base64,