"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const electron_1 = require("electron");
const update_preview_1 = require("./update-preview");
const mathjax_helper_1 = require("./mathjax-helper");
electron_1.ipcRenderer.on('style', (_event, { styles }) => {
    let styleElem = document.head.querySelector('style#atom-styles');
    if (!styleElem) {
        styleElem = document.createElement('style');
        styleElem.id = 'atom-styles';
        document.head.appendChild(styleElem);
    }
    styleElem.innerHTML = styles.join('\n');
});
electron_1.ipcRenderer.on('update-images', (_event, { oldsrc, v }) => {
    const imgs = document.querySelectorAll('img[src]');
    for (const img of Array.from(imgs)) {
        let ovs;
        let ov;
        let src = img.getAttribute('src');
        const match = src.match(/^(.*)\?v=(\d+)$/);
        if (match)
            [, src, ovs] = match;
        if (src === oldsrc) {
            if (ovs !== undefined)
                ov = parseInt(ovs, 10);
            if (v !== ov)
                img.src = v ? `${src}?v=${v}` : `${src}`;
        }
    }
});
electron_1.ipcRenderer.on('sync', (_event, { pathToToken }) => {
    let element = document.querySelector('div.update-preview');
    if (!element)
        return;
    for (const token of pathToToken) {
        const candidateElement = element
            .querySelectorAll(`:scope > ${token.tag}`)
            .item(token.index);
        if (candidateElement) {
            element = candidateElement;
        }
        else {
            break;
        }
    }
    if (element.classList.contains('update-preview')) {
        return;
    }
    if (!element.classList.contains('update-preview')) {
        element.scrollIntoView();
    }
    const maxScrollTop = document.body.scrollHeight - document.body.clientHeight;
    if (!(document.body.scrollTop >= maxScrollTop)) {
        document.body.scrollTop -= document.body.clientHeight / 4;
    }
    element.classList.add('flash');
    setTimeout(() => element.classList.remove('flash'), 1000);
});
electron_1.ipcRenderer.on('use-github-style', (_event, { value }) => {
    const elem = document.querySelector('markdown-preview-plus-view');
    if (!elem)
        throw new Error(`Can't find MPP-view`);
    if (value) {
        elem.setAttribute('data-use-github-style', '');
    }
    else {
        elem.removeAttribute('data-use-github-style');
    }
});
let updatePreview;
electron_1.ipcRenderer.on('update-preview', (_event, { html, renderLaTeX, mjrenderer }) => {
    const preview = document.querySelector('div.update-preview');
    if (!preview)
        return;
    if (!updatePreview) {
        updatePreview = new update_preview_1.UpdatePreview(preview);
    }
    const parser = new DOMParser();
    const domDocument = parser.parseFromString(html, 'text/html');
    const domFragment = document.createDocumentFragment();
    for (const elem of Array.from(domDocument.body.childNodes)) {
        domFragment.appendChild(elem);
    }
    updatePreview.update(document, domFragment, renderLaTeX, mjrenderer);
    const doc = document;
    if (doc && domDocument.head.hasChildNodes) {
        let container = doc.head.querySelector('original-elements');
        if (!container) {
            container = doc.createElement('original-elements');
            doc.head.appendChild(container);
        }
        container.innerHTML = '';
        for (const headElement of Array.from(domDocument.head.childNodes)) {
            container.appendChild(headElement.cloneNode(true));
        }
    }
});
electron_1.ipcRenderer.on('set-atom-home', (_evt, { home }) => {
    window.resolveAtomHome(home);
});
electron_1.ipcRenderer.on('error', (_evt, { msg }) => {
    const preview = document.querySelector('div.update-preview');
    if (!preview)
        return;
    const errorDiv = document.createElement('div');
    errorDiv.innerHTML = `<h2>Previewing Markdown Failed</h2><h3>${msg}</h3>`;
    preview.appendChild(errorDiv);
});
document.addEventListener('mousewheel', (event) => {
    if (event.ctrlKey) {
        if (event.wheelDeltaY > 0) {
            electron_1.ipcRenderer.sendToHost('zoom-in', undefined);
        }
        else if (event.wheelDeltaY < 0) {
            electron_1.ipcRenderer.sendToHost('zoom-out', undefined);
        }
        event.preventDefault();
        event.stopPropagation();
    }
});
document.addEventListener('contextmenu', (e) => {
    console.log(e);
});
electron_1.ipcRenderer.on('get-html-svg', async () => {
    const el = document.querySelector('markdown-preview-plus-view > div');
    if (!el)
        return;
    const res = await mathjax_helper_1.processHTMLString(el);
    electron_1.ipcRenderer.sendToHost('html-svg-result', res);
});
//# sourceMappingURL=data:application/json;base64,