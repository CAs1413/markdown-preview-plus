"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const morph = require("morphdom");
const MathJaxHelper = require("./mathjax-helper");
const util_1 = require("./util");
class UpdatePreview {
    constructor(dom) {
        this.dom = dom;
    }
    update(domFragment, renderLaTeX, mjrenderer) {
        const newDom = domFragment.cloneNode(true);
        for (const m of Array.from(newDom.querySelectorAll('span.math'))) {
            const mscr = m.firstElementChild;
            if (!mscr || mscr.nodeName !== 'SCRIPT')
                continue;
            m.isSameNode = function (target) {
                if (target.nodeName !== 'SPAN')
                    return false;
                const el = target;
                if (!el.classList.contains('math'))
                    return false;
                const scr = el.querySelector('script');
                if (!scr)
                    return false;
                return mscr.innerHTML === scr.innerHTML;
            };
        }
        morph(this.dom, newDom, { childrenOnly: true });
        if (renderLaTeX) {
            util_1.handlePromise(MathJaxHelper.mathProcessor([this.dom], mjrenderer));
        }
    }
}
exports.UpdatePreview = UpdatePreview;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLXByZXZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMtY2xpZW50L3VwZGF0ZS1wcmV2aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBc0JBLGtDQUFrQztBQUNsQyxrREFBa0Q7QUFDbEQsaUNBQXNDO0FBRXRDO0lBQ0UsWUFBb0IsR0FBZ0I7UUFBaEIsUUFBRyxHQUFILEdBQUcsQ0FBYTtJQUVwQyxDQUFDO0lBRU0sTUFBTSxDQUNYLFdBQTZCLEVBQzdCLFdBQW9CLEVBQ3BCLFVBQTJCO1FBRTNCLE1BQU0sTUFBTSxHQUFHLFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFxQixDQUFBO1FBRTlELEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pFLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxpQkFBNkMsQ0FBQTtZQUM1RCxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQztnQkFBQyxRQUFRLENBQUE7WUFDakQsQ0FBQyxDQUFDLFVBQVUsR0FBRyxVQUFTLE1BQVk7Z0JBQ2xDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEtBQUssTUFBTSxDQUFDO29CQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUE7Z0JBQzVDLE1BQU0sRUFBRSxHQUFHLE1BQXlCLENBQUE7Z0JBQ3BDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQTtnQkFDaEQsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQTtnQkFDdEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7b0JBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQTtnQkFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEtBQUssR0FBRyxDQUFDLFNBQVMsQ0FBQTtZQUN6QyxDQUFDLENBQUE7UUFDSCxDQUFDO1FBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7UUFDL0MsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUNoQixvQkFBYSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQTtRQUNwRSxDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBOUJELHNDQThCQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgZmlsZSBpbmNvcnBvcmF0ZXMgY29kZSBmcm9tIFttYXJrbW9uXShodHRwczovL2dpdGh1Yi5jb20veXlqaGFvL21hcmttb24pXG4vLyBjb3ZlcmVkIGJ5IHRoZSBmb2xsb3dpbmcgdGVybXM6XG4vL1xuLy8gQ29weXJpZ2h0IChjKSAyMDE0LCBZYW8gWXVqaWFuLCBodHRwOi8veWp5YW8uY29tXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cbmltcG9ydCBtb3JwaCA9IHJlcXVpcmUoJ21vcnBoZG9tJylcbmltcG9ydCBNYXRoSmF4SGVscGVyID0gcmVxdWlyZSgnLi9tYXRoamF4LWhlbHBlcicpXG5pbXBvcnQgeyBoYW5kbGVQcm9taXNlIH0gZnJvbSAnLi91dGlsJ1xuXG5leHBvcnQgY2xhc3MgVXBkYXRlUHJldmlldyB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZG9tOiBIVE1MRWxlbWVudCkge1xuICAgIC8qIG5vLW9wICovXG4gIH1cblxuICBwdWJsaWMgdXBkYXRlKFxuICAgIGRvbUZyYWdtZW50OiBEb2N1bWVudEZyYWdtZW50LFxuICAgIHJlbmRlckxhVGVYOiBib29sZWFuLFxuICAgIG1qcmVuZGVyZXI6IE1hdGhKYXhSZW5kZXJlcixcbiAgKSB7XG4gICAgY29uc3QgbmV3RG9tID0gZG9tRnJhZ21lbnQuY2xvbmVOb2RlKHRydWUpIGFzIERvY3VtZW50RnJhZ21lbnRcblxuICAgIGZvciAoY29uc3QgbSBvZiBBcnJheS5mcm9tKG5ld0RvbS5xdWVyeVNlbGVjdG9yQWxsKCdzcGFuLm1hdGgnKSkpIHtcbiAgICAgIGNvbnN0IG1zY3IgPSBtLmZpcnN0RWxlbWVudENoaWxkIGFzIEhUTUxTY3JpcHRFbGVtZW50IHwgbnVsbFxuICAgICAgaWYgKCFtc2NyIHx8IG1zY3Iubm9kZU5hbWUgIT09ICdTQ1JJUFQnKSBjb250aW51ZVxuICAgICAgbS5pc1NhbWVOb2RlID0gZnVuY3Rpb24odGFyZ2V0OiBOb2RlKSB7XG4gICAgICAgIGlmICh0YXJnZXQubm9kZU5hbWUgIT09ICdTUEFOJykgcmV0dXJuIGZhbHNlXG4gICAgICAgIGNvbnN0IGVsID0gdGFyZ2V0IGFzIEhUTUxTcGFuRWxlbWVudFxuICAgICAgICBpZiAoIWVsLmNsYXNzTGlzdC5jb250YWlucygnbWF0aCcpKSByZXR1cm4gZmFsc2VcbiAgICAgICAgY29uc3Qgc2NyID0gZWwucXVlcnlTZWxlY3Rvcignc2NyaXB0JylcbiAgICAgICAgaWYgKCFzY3IpIHJldHVybiBmYWxzZVxuICAgICAgICByZXR1cm4gbXNjci5pbm5lckhUTUwgPT09IHNjci5pbm5lckhUTUxcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtb3JwaCh0aGlzLmRvbSwgbmV3RG9tLCB7IGNoaWxkcmVuT25seTogdHJ1ZSB9KVxuICAgIGlmIChyZW5kZXJMYVRlWCkge1xuICAgICAgaGFuZGxlUHJvbWlzZShNYXRoSmF4SGVscGVyLm1hdGhQcm9jZXNzb3IoW3RoaXMuZG9tXSwgbWpyZW5kZXJlcikpXG4gICAgfVxuICB9XG59XG4iXX0=