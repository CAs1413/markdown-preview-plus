"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const electron_1 = require("electron");
const request_handler_1 = require("./request-handler");
const util_1 = require("../../util");
const should_scroll_sync_1 = require("./should-scroll-sync");
const event_handler_1 = require("./event-handler");
function setupEditor(editor) {
    const disp = new atom_1.CompositeDisposable();
    const windowId = electron_1.remote.getCurrentWindow().id;
    const editorId = editor.id;
    const emit = event_handler_1.constructEmitter(windowId, editorId);
    const requestHandler = new request_handler_1.RequestHandler(windowId, editorId, {
        scrollToBufferRange([min, max]) {
            if (min === 0) {
                editor.scrollToBufferPosition([min, 0]);
            }
            else if (max >= editor.getLastBufferRow() - 1) {
                editor.scrollToBufferPosition([max, 0]);
            }
            else {
                const range = atom_1.Range.fromObject([[min, 0], [max, 0]]);
                editor.scrollToScreenRange(editor.screenRangeForBufferRange(range), {
                    center: false,
                });
            }
        },
        destroy() {
            disp.dispose();
        },
        init() {
            return {
                path: editor.getPath(),
                title: editor.getTitle(),
                grammar: editor.getGrammar().scopeName,
                text: editor.getText(),
            };
        },
        openSource(row) {
            if (row !== undefined) {
                editor.setCursorBufferPosition([row, 0]);
            }
            electron_1.remote.getCurrentWindow().focus();
            const pane = atom.workspace.paneForItem(editor);
            if (!pane)
                return;
            pane.activateItem(editor);
            pane.activate();
        },
    });
    disp.add(editor.getBuffer().onDidStopChanging(() => {
        if (util_1.atomConfig().previewConfig.liveUpdate) {
            emit('changeText', editor.getText());
        }
        if (util_1.atomConfig().syncConfig.syncPreviewOnChange) {
            emit('syncPreview', editor.getCursorBufferPosition().row);
        }
    }), editor.onDidChangePath(() => {
        emit('changePath', {
            path: editor.getPath(),
            title: editor.getTitle(),
        });
    }), editor.onDidChangeGrammar((grammar) => {
        emit('changeGrammar', grammar.scopeName);
    }), editor.onDidDestroy(() => {
        if (util_1.atomConfig().previewConfig.closePreviewWithEditor) {
            emit('destroy', undefined);
        }
    }), editor.getBuffer().onDidSave(() => {
        if (!util_1.atomConfig().previewConfig.liveUpdate) {
            emit('changeText', editor.getText());
        }
    }), editor.getBuffer().onDidReload(() => {
        if (!util_1.atomConfig().previewConfig.liveUpdate) {
            emit('changeText', editor.getText());
        }
    }), atom.views.getView(editor).onDidChangeScrollTop(() => {
        if (!should_scroll_sync_1.shouldScrollSync('editor'))
            return;
        const [first, last] = editor.getVisibleRowRange();
        const firstLine = editor.bufferRowForScreenRow(first);
        const lastLine = editor.bufferRowForScreenRow(last);
        emit('scrollSync', [firstLine, lastLine]);
    }), atom.commands.add(atom.views.getView(editor), {
        'markdown-preview-plus:sync-preview': () => {
            emit('syncPreview', editor.getCursorBufferPosition().row);
        },
    }), requestHandler);
    return disp;
}
exports.setupEditor = setupEditor;
//# sourceMappingURL=data:application/json;base64,