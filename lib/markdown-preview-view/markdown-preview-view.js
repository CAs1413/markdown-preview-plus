"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const atom_1 = require("atom");
const lodash_1 = require("lodash");
const fs = require("fs");
const renderer = require("../renderer");
const markdownIt = require("../markdown-it-helper");
const util_1 = require("../util");
const util = require("./util");
const webview_handler_1 = require("./webview-handler");
const pdf_export_util_1 = require("./pdf-export-util");
const macros_util_1 = require("../macros-util");
class MarkdownPreviewView {
    constructor(renderLaTeX = util_1.atomConfig().mathConfig
        .enableLatexRenderingByDefault) {
        this.renderLaTeX = renderLaTeX;
        this.emitter = new atom_1.Emitter();
        this.disposables = new atom_1.CompositeDisposable();
        this.destroyed = false;
        this.loading = true;
        this.changeHandler = () => {
            util_1.handlePromise(this.renderMarkdown());
            const pane = atom.workspace.paneForItem(this);
            if (pane !== undefined && pane !== atom.workspace.getActivePane()) {
                pane.activateItem(this);
            }
        };
        this.handler = new Promise((resolve) => {
            const handler = new webview_handler_1.WebviewHandler(async () => {
                const config = util_1.atomConfig();
                await handler.init({
                    userMacros: macros_util_1.loadUserMacros(),
                    mathJaxConfig: config.mathConfig,
                    context: 'live-preview',
                });
                await handler.setBasePath(this.getPath());
                this.emitter.emit('did-change-title');
                resolve(handler);
            });
            this.element = handler.element;
            MarkdownPreviewView.elementMap.set(this.element, this);
        });
        this._initialRenderPromsie = this.handler
            .then(() => this.renderMarkdown())
            .then(() => {
            this.loading = false;
        });
        util_1.handlePromise(this.handleEvents());
    }
    static viewForElement(element) {
        return MarkdownPreviewView.elementMap.get(element);
    }
    destroy() {
        if (this.destroyed)
            return;
        this.destroyed = true;
        this.disposables.dispose();
        util_1.handlePromise(this.handler.then((h) => h.destroy()));
        if (this.element)
            MarkdownPreviewView.elementMap.delete(this.element);
    }
    async runJS(js) {
        return (await this.handler).runJS(js);
    }
    async initialRenderPromise() {
        await this._initialRenderPromsie;
    }
    onDidChangeTitle(callback) {
        return this.emitter.on('did-change-title', callback);
    }
    onDidChangeMarkdown(callback) {
        return this.emitter.on('did-change-markdown', callback);
    }
    toggleRenderLatex() {
        this.renderLaTeX = !this.renderLaTeX;
        this.changeHandler();
    }
    getDefaultLocation() {
        return util_1.atomConfig().previewConfig.previewDock;
    }
    getIconName() {
        return 'markdown';
    }
    getSaveDialogOptions() {
        let defaultPath = this.getPath();
        if (defaultPath === undefined) {
            const projectPath = atom.project.getPaths()[0];
            defaultPath = 'untitled.md';
            if (projectPath) {
                defaultPath = path.join(projectPath, defaultPath);
            }
        }
        defaultPath += '.' + util_1.atomConfig().saveConfig.defaultSaveFormat;
        return { defaultPath };
    }
    saveAs(filePath) {
        if (filePath === undefined)
            return;
        if (this.loading)
            throw new Error('Preview is still loading');
        const { name, ext } = path.parse(filePath);
        if (ext === '.pdf') {
            util_1.handlePromise(this.getMarkdownSource().then(async (mdSource) => pdf_export_util_1.saveAsPDF(mdSource, this.getPath(), this.getGrammar(), this.renderLaTeX, filePath)));
        }
        else {
            util_1.handlePromise(this.getHTMLToSave(filePath).then(async (html) => {
                const fullHtml = util.mkHtml(name, html, this.renderLaTeX, await (await this.handler).getTeXConfig());
                fs.writeFileSync(filePath, fullHtml);
                return atom.workspace.open(filePath);
            }));
        }
    }
    didScrollPreview(_min, _max) {
    }
    openSource(initialLine) {
        const path = this.getPath();
        if (path === undefined)
            return;
        util_1.handlePromise(atom.workspace.open(path, {
            initialLine,
            searchAllPanes: true,
        }));
    }
    async syncPreview(line, flash) {
        return (await this.handler).sync(line, flash);
    }
    openNewWindow() {
        const path = this.getPath();
        if (!path) {
            atom.notifications.addWarning('Can not open this preview in new window: no file path');
            return;
        }
        atom.open({
            pathsToOpen: [`markdown-preview-plus://file/${path}`],
            newWindow: true,
        });
        util.destroy(this);
    }
    async handleEvents() {
        const handler = await this.handler;
        this.disposables.add(atom.grammars.onDidAddGrammar(() => lodash_1.debounce(() => {
            util_1.handlePromise(this.renderMarkdown());
        }, 250)), atom.grammars.onDidUpdateGrammar(lodash_1.debounce(() => {
            util_1.handlePromise(this.renderMarkdown());
        }, 250)), atom.commands.add(handler.element, {
            'core:move-up': () => handler.element.scrollBy({ top: -10 }),
            'core:move-down': () => handler.element.scrollBy({ top: 10 }),
            'core:copy': () => {
                util_1.handlePromise(this.copyToClipboard());
            },
            'markdown-preview-plus:open-dev-tools': () => {
                handler.openDevTools();
            },
            'markdown-preview-plus:new-window': () => {
                this.openNewWindow();
            },
            'markdown-preview-plus:print': () => {
                handler.print();
            },
            'markdown-preview-plus:zoom-in': () => {
                handler.zoomIn();
            },
            'markdown-preview-plus:zoom-out': () => {
                handler.zoomOut();
            },
            'markdown-preview-plus:reset-zoom': () => {
                handler.resetZoom();
            },
            'markdown-preview-plus:sync-source': async (_event) => {
                const line = await handler.syncSource();
                this.openSource(line);
            },
        }), atom.config.onDidChange('markdown-preview-plus.markdownItConfig', () => {
            if (util_1.atomConfig().renderer === 'markdown-it')
                this.changeHandler();
        }), atom.config.onDidChange('markdown-preview-plus.pandocConfig', () => {
            if (util_1.atomConfig().renderer === 'pandoc')
                this.changeHandler();
        }), atom.config.onDidChange('markdown-preview-plus.mathConfig.latexRenderer', () => {
            util_1.handlePromise(handler.reload());
        }), atom.config.onDidChange('markdown-preview-plus.mathConfig.numberEquations', () => {
            util_1.handlePromise(handler.reload());
        }), atom.config.onDidChange('markdown-preview-plus.renderer', this.changeHandler), atom.config.onDidChange('markdown-preview-plus.useGitHubStyle', () => {
            util_1.handlePromise(handler.updateStyles());
        }), atom.config.onDidChange('markdown-preview-plus.syntaxThemeName', () => {
            util_1.handlePromise(handler.updateStyles());
        }), atom.config.onDidChange('markdown-preview-plus.importPackageStyles', () => {
            util_1.handlePromise(handler.updateStyles());
        }), handler.emitter.on('did-scroll-preview', ({ min, max }) => {
            this.didScrollPreview(min, max);
        }));
    }
    async renderMarkdown() {
        return this.renderMarkdownText(await this.getMarkdownSource());
    }
    async getHTMLToSave(savePath) {
        const source = await this.getMarkdownSource();
        return renderer.render({
            text: source,
            filePath: this.getPath(),
            grammar: this.getGrammar(),
            renderLaTeX: this.renderLaTeX,
            mode: 'save',
            savePath,
        });
    }
    async renderMarkdownText(text) {
        try {
            const domDocument = await renderer.render({
                text,
                filePath: this.getPath(),
                grammar: this.getGrammar(),
                renderLaTeX: this.renderLaTeX,
                mode: 'normal',
                imageWatcher: (await this.handler).imageWatcher,
            });
            if (this.destroyed)
                return;
            const handler = await this.handler;
            await handler.update(domDocument.documentElement.outerHTML, this.renderLaTeX);
            await handler.setSourceMap(util.buildLineMap(markdownIt.getTokens(text, this.renderLaTeX)));
            this.emitter.emit('did-change-markdown');
        }
        catch (error) {
            await this.showError(error);
        }
    }
    async showError(error) {
        if (this.destroyed) {
            atom.notifications.addFatalError('Error reported on a destroyed Markdown Preview Plus view', {
                dismissable: true,
                stack: error.stack,
                detail: error.message,
            });
            return;
        }
        else if (this.loading) {
            atom.notifications.addFatalError('Error reported when Markdown Preview Plus view is loading', {
                dismissable: true,
                stack: error.stack,
                detail: error.message,
            });
            return;
        }
        else {
            return (await this.handler).error(error.message);
        }
    }
    async copyToClipboard() {
        const handler = await this.handler;
        const selection = await handler.getSelection();
        if (selection !== undefined) {
            atom.clipboard.write(selection);
        }
        else {
            const src = await this.getMarkdownSource();
            await util_1.copyHtml(src, this.getPath(), this.renderLaTeX);
        }
    }
}
exports.MarkdownPreviewView = MarkdownPreviewView;
MarkdownPreviewView.elementMap = new WeakMap();
//# sourceMappingURL=data:application/json;base64,