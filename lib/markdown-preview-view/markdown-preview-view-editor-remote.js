"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const util = require("./util");
const markdown_preview_view_1 = require("./markdown-preview-view");
const util_1 = require("../util");
const electron_1 = require("electron");
class MarkdownPreviewViewEditorRemote extends markdown_preview_view_1.MarkdownPreviewView {
    constructor(windowId, editorId) {
        super();
        this.windowId = windowId;
        this.editorId = editorId;
        this.ipcIdx = 0;
        this.title = '<Pending>';
        this.syncPreviewHelper = async () => {
            const pos = await this.ipc('getCursorBufferRow', undefined);
            this.syncPreview(pos);
        };
        this.handleEditorEvents();
        this.myWindowId = electron_1.remote.getCurrentWindow().id;
        util_1.handlePromise(this.ipc('init', undefined));
    }
    destroy() {
        util_1.handlePromise(this.ipc('destroy', undefined));
        super.destroy();
    }
    getTitle() {
        return `${this.title} Preview`;
    }
    getURI() {
        return `markdown-preview-plus://remote-editor/${this.windowId}/${this.editorId}`;
    }
    getPath() {
        return this.path;
    }
    serialize() {
        return undefined;
    }
    async getMarkdownSource() {
        return this.ipc('getText', undefined);
    }
    getGrammar() {
        return this.grammar;
    }
    async didScrollPreview(min, max) {
        if (!this.shouldScrollSync('preview'))
            return;
        if (min === 0) {
            await this.ipc('scrollToBufferRow', min);
        }
        else if (max >= (await this.ipc('getLastBufferRow', undefined)) - 1) {
            await this.ipc('scrollToBufferRow', max);
        }
        else {
            await this.ipc('scrollToBufferRange', [min, max]);
        }
    }
    openSource(initialLine) {
        util_1.handlePromise(this.ipc('openSource', initialLine));
    }
    handleEditorEvents() {
        this.disposables.add(this.ipcEvent('onDidStopChanging', () => {
            if (util_1.atomConfig().previewConfig.liveUpdate) {
                this.changeHandler();
            }
            if (util_1.atomConfig().syncConfig.syncPreviewOnChange) {
                util_1.handlePromise(this.syncPreviewHelper());
            }
        }), this.ipcEvent('onDidChangePath', ({ title, path }) => {
            this.title = title;
            this.path = path;
            this.emitter.emit('did-change-title');
        }), this.ipcEvent('onDidChangeGrammar', (grammarName) => {
            this.grammar = atom.grammars.grammarForScopeName(grammarName);
            this.emitter.emit('did-change-title');
        }), this.ipcEvent('onDidDestroy', () => {
            if (util_1.atomConfig().previewConfig.closePreviewWithEditor) {
                util.destroy(this);
            }
        }), this.ipcEvent('onDidSave', () => {
            if (!util_1.atomConfig().previewConfig.liveUpdate) {
                this.changeHandler();
            }
        }), this.ipcEvent('onDidReload', () => {
            if (!util_1.atomConfig().previewConfig.liveUpdate) {
                this.changeHandler();
            }
        }), this.ipcEvent('onDidChangeScrollTop', (bufferRowRange) => {
            if (!this.shouldScrollSync('editor'))
                return;
            const [first, last] = bufferRowRange;
            this.element.send('scroll-sync', {
                firstLine: first,
                lastLine: last,
            });
        }), this.ipcEvent('syncPreview', this.syncPreviewHelper));
    }
    shouldScrollSync(whatScrolled) {
        const config = util_1.atomConfig().syncConfig;
        if (config.syncEditorOnPreviewScroll && config.syncPreviewOnEditorScroll) {
            return ((whatScrolled === 'preview') === electron_1.remote.getCurrentWindow().isFocused());
        }
        else {
            return ((config.syncEditorOnPreviewScroll && whatScrolled === 'preview') ||
                (config.syncPreviewOnEditorScroll && whatScrolled === 'editor'));
        }
    }
    async ipc(cmd, args) {
        return new Promise((resolve) => {
            const idx = this.ipcIdx++;
            const handler = (e) => {
                if (e.forWindowId === this.myWindowId &&
                    e.windowId === this.windowId &&
                    e.editorId === this.editorId &&
                    e.idx === idx) {
                    electron_1.remote.ipcMain.removeListener('markdown-preview-plus-editor-reply', handler);
                    resolve(e.reply);
                }
            };
            electron_1.remote.ipcMain.on('markdown-preview-plus-editor-reply', handler);
            electron_1.remote.ipcMain.emit('markdown-preview-plus-editor-request', {
                windowId: this.windowId,
                editorId: this.editorId,
                forWindowId: this.myWindowId,
                idx,
                cmd,
                args,
            });
        });
    }
    ipcEvent(name, callback) {
        const handler = (e) => {
            if (this.editorId === e.editorId &&
                this.windowId === e.windowId &&
                name === e.event) {
                callback(e.arg);
            }
        };
        electron_1.remote.ipcMain.on('markdown-preview-plus-editor-event', handler);
        return new atom_1.Disposable(function () {
            electron_1.remote.ipcMain.removeListener('markdown-preview-plus-editor-event', handler);
        });
    }
    static setupEditor(editor) {
        const disp = new atom_1.CompositeDisposable();
        const windowId = electron_1.remote.getCurrentWindow().id;
        const editorId = editor.id;
        function emit(event, arg) {
            electron_1.remote.ipcMain.emit('markdown-preview-plus-editor-event', {
                editorId,
                windowId,
                event,
                arg,
            });
        }
        function requestHandler(e) {
            if (e.editorId !== editorId || e.windowId !== windowId)
                return;
            let reply = undefined;
            switch (e.cmd) {
                case 'getCursorBufferRow':
                    reply = editor.getCursorBufferPosition().row;
                    break;
                case 'scrollToBufferRange':
                    const [min, max] = e.args;
                    const range = atom_1.Range.fromObject([[min, 0], [max, 0]]);
                    editor.scrollToScreenRange(editor.screenRangeForBufferRange(range), {
                        center: false,
                    });
                    reply = undefined;
                    break;
                case 'scrollToBufferRow':
                    editor.scrollToBufferPosition([e.args, 0]);
                    reply = undefined;
                    break;
                case 'getLastBufferRow':
                    reply = editor.getLastBufferRow();
                    break;
                case 'getText':
                    reply = editor.getText();
                    break;
                case 'destroy':
                    disp.dispose();
                    reply = undefined;
                    break;
                case 'init':
                    emit('onDidChangePath', {
                        path: editor.getPath(),
                        title: editor.getTitle(),
                    });
                    emit('onDidChangeGrammar', editor.getGrammar().scopeName);
                    break;
                case 'openSource':
                    if (e.args !== undefined) {
                        editor.setCursorBufferPosition([e.args, 0]);
                    }
                    electron_1.remote.getCurrentWindow().focus();
                    const pane = atom.workspace.paneForItem(editor);
                    if (!pane)
                        break;
                    pane.activateItem(editor);
                    pane.activate();
                    break;
            }
            electron_1.remote.ipcMain.emit('markdown-preview-plus-editor-reply', {
                editorId: e.editorId,
                windowId: e.windowId,
                forWindowId: e.forWindowId,
                idx: e.idx,
                reply,
            });
        }
        electron_1.remote.ipcMain.on('markdown-preview-plus-editor-request', requestHandler);
        disp.add(editor.getBuffer().onDidStopChanging(() => {
            emit('onDidStopChanging', undefined);
        }), editor.onDidChangePath(() => {
            emit('onDidChangePath', {
                path: editor.getPath(),
                title: editor.getTitle(),
            });
        }), editor.onDidChangeGrammar((grammar) => {
            emit('onDidChangeGrammar', grammar.scopeName);
        }), editor.onDidDestroy(() => {
            emit('onDidDestroy', undefined);
        }), editor.getBuffer().onDidSave(() => {
            emit('onDidSave', undefined);
        }), editor.getBuffer().onDidReload(() => {
            emit('onDidReload', undefined);
        }), atom.views.getView(editor).onDidChangeScrollTop(() => {
            const [first, last] = editor.getVisibleRowRange();
            const firstLine = editor.bufferRowForScreenRow(first);
            const lastLine = editor.bufferRowForScreenRow(last);
            emit('onDidChangeScrollTop', [firstLine, lastLine]);
        }), atom.commands.add(atom.views.getView(editor), {
            'markdown-preview-plus:sync-preview': () => {
                emit('syncPreview', undefined);
            },
        }), new atom_1.Disposable(() => {
            electron_1.remote.ipcMain.removeListener('markdown-preview-plus-editor-request', requestHandler);
        }));
        return disp;
    }
}
exports.MarkdownPreviewViewEditorRemote = MarkdownPreviewViewEditorRemote;
//# sourceMappingURL=data:application/json;base64,