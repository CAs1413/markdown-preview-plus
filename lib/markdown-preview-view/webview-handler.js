"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const electron_1 = require("electron");
const fileUriToPath = require("file-uri-to-path");
const util_1 = require("../util");
const util_2 = require("./util");
const image_watch_helper_1 = require("../image-watch-helper");
class WebviewHandler {
    constructor(init) {
        this.emitter = new atom_1.Emitter();
        this.disposables = new atom_1.CompositeDisposable();
        this.destroyed = false;
        this.zoomLevel = 0;
        this.replyCallbacks = new Map();
        this.replyCallbackId = 0;
        this._element = document.createElement('webview');
        this._element.classList.add('markdown-preview-plus', 'native-key-bindings');
        this._element.disablewebsecurity = 'true';
        this._element.nodeintegration = 'true';
        this._element.src = `file:///${__dirname}/../../client/template.html`;
        this._element.style.width = '100%';
        this._element.style.height = '100%';
        this._element.addEventListener('ipc-message', (e) => {
            switch (e.channel) {
                case 'zoom-in':
                    this.zoomIn();
                    break;
                case 'zoom-out':
                    this.zoomOut();
                    break;
                case 'did-scroll-preview':
                    this.emitter.emit('did-scroll-preview', e.args[0]);
                    break;
                case 'uncaught-error': {
                    const err = e.args[0];
                    const newErr = new Error();
                    atom.notifications.addFatalError(`Uncaught error ${err.name} in markdown-preview-plus webview client`, {
                        dismissable: true,
                        stack: newErr.stack,
                        detail: `${err.message}\n\nstack:\n${err.stack}`,
                    });
                    break;
                }
                case 'show-context-menu': {
                    atom.contextMenu.showForEvent({ target: this._element });
                    break;
                }
                case 'request-reply': {
                    const { id, request, result } = e.args[0];
                    const cb = this.replyCallbacks.get(id);
                    if (cb && request === cb.request) {
                        const callback = cb.callback;
                        callback(result);
                    }
                    break;
                }
            }
        });
        this._element.addEventListener('will-navigate', async (e) => {
            const exts = util_1.atomConfig().previewConfig.shellOpenFileExtensions;
            const forceOpenExternal = exts.some((ext) => e.url.toLowerCase().endsWith(`.${ext.toLowerCase()}`));
            if (e.url.startsWith('file://') && !forceOpenExternal) {
                util_1.handlePromise(atom.workspace.open(fileUriToPath(e.url)));
            }
            else {
                electron_1.shell.openExternal(e.url);
            }
        });
        this.disposables.add(atom.styles.onDidAddStyleElement(() => {
            util_1.handlePromise(this.updateStyles());
        }), atom.styles.onDidRemoveStyleElement(() => {
            util_1.handlePromise(this.updateStyles());
        }), atom.styles.onDidUpdateStyleElement(() => {
            util_1.handlePromise(this.updateStyles());
        }));
        this.initPromise = new Promise((resolve) => {
            this._element.addEventListener('dom-ready', () => {
                if (this.destroyed)
                    return;
                this._element.setZoomLevel(this.zoomLevel);
                resolve();
                util_1.handlePromise(this.updateStyles().then(init));
            });
        });
        this.disposables.add((this.imageWatcher = new image_watch_helper_1.ImageWatcher(this.updateImages.bind(this))));
    }
    get element() {
        return this._element;
    }
    async runJS(js) {
        return new Promise((resolve) => this._element.executeJavaScript(js, false, resolve));
    }
    destroy() {
        if (this.destroyed)
            return;
        this.destroyed = true;
        this.disposables.dispose();
        this._element.remove();
    }
    async update(html, renderLaTeX) {
        if (this.destroyed)
            return undefined;
        return this.runRequest('update-preview', {
            html,
            renderLaTeX,
        });
    }
    async setSourceMap(map) {
        return this.send('set-source-map', { map });
    }
    async setBasePath(path) {
        return this.send('set-base-path', { path });
    }
    async init(params) {
        return this.send('init', params);
    }
    async updateImages(oldSource, version) {
        return this.send('update-images', {
            oldsrc: oldSource,
            v: version,
        });
    }
    async printToPDF(opts) {
        return new Promise((resolve, reject) => {
            this._element.getWebContents().printToPDF(opts, (error, data) => {
                if (error) {
                    reject(error);
                    return;
                }
                resolve(data);
            });
        });
    }
    async sync(line, flash) {
        return this.send('sync', { line, flash });
    }
    async syncSource() {
        return this.runRequest('sync-source', {});
    }
    async scrollSync(firstLine, lastLine) {
        return this.send('scroll-sync', { firstLine, lastLine });
    }
    zoomIn() {
        this.zoomLevel += 0.1;
        this._element.setZoomLevel(this.zoomLevel);
    }
    zoomOut() {
        this.zoomLevel -= 0.1;
        this._element.setZoomLevel(this.zoomLevel);
    }
    resetZoom() {
        this.zoomLevel = 0;
        this._element.setZoomLevel(this.zoomLevel);
    }
    print() {
        this._element.print();
    }
    openDevTools() {
        this._element.openDevTools();
    }
    async reload() {
        await this.runRequest('reload', {});
        this._element.reload();
    }
    async error(msg) {
        return this.send('error', { msg });
    }
    async getTeXConfig() {
        return this.runRequest('get-tex-config', {});
    }
    async getSelection() {
        return this.runRequest('get-selection', {});
    }
    async updateStyles() {
        return this.send('style', { styles: util_2.getPreviewStyles(true) });
    }
    async runRequest(request, args) {
        const id = this.replyCallbackId++;
        const result = new Promise((resolve) => {
            this.replyCallbacks.set(id, {
                request: request,
                callback: (result) => {
                    this.replyCallbacks.delete(id);
                    resolve(result);
                },
            });
        });
        const newargs = Object.assign({ id }, args);
        await this.send(request, newargs);
        return result;
    }
    async send(channel, value) {
        await this.initPromise;
        this._element.send(channel, value);
    }
}
exports.WebviewHandler = WebviewHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vidmlldy1oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21hcmtkb3duLXByZXZpZXctdmlldy93ZWJ2aWV3LWhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBbUQ7QUFDbkQsdUNBQTRDO0FBQzVDLGtEQUFrRDtBQUVsRCxrQ0FBbUQ7QUFFbkQsaUNBQXlDO0FBQ3pDLDhEQUFvRDtBQTJDcEQsTUFBYSxjQUFjO0lBZ0J6QixZQUFZLElBQWdDO1FBZjVCLFlBQU8sR0FBRyxJQUFJLGNBQU8sRUFLbEMsQ0FBQTtRQUVPLGdCQUFXLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFBO1FBRXpDLGNBQVMsR0FBRyxLQUFLLENBQUE7UUFDakIsY0FBUyxHQUFHLENBQUMsQ0FBQTtRQUNiLG1CQUFjLEdBQUcsSUFBSSxHQUFHLEVBQStCLENBQUE7UUFDdkQsb0JBQWUsR0FBRyxDQUFDLENBQUE7UUFJekIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ2pELElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRSxxQkFBcUIsQ0FBQyxDQUFBO1FBQzNFLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLEdBQUcsTUFBTSxDQUFBO1FBQ3pDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxHQUFHLE1BQU0sQ0FBQTtRQUN0QyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxXQUFXLFNBQVMsNkJBQTZCLENBQUE7UUFDckUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQTtRQUNsQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO1FBQ25DLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQzVCLGFBQWEsRUFDYixD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QUFFO1lBQ3pELElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRztnQkFDM0IsT0FBTyxFQUFFLE9BQU87Z0JBQ2hCLFFBQVEsRUFBRSxDQUFDLE1BQTBCLEVBQUUsRUFBRTtvQkFDdkMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUE7b0JBQzlCLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQTtnQkFDakIsQ0FBQzthQUNvQyxDQUFDLENBQUE7UUFDMUMsQ0FBQyxDQUFDLENBQUE7UUFDRixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDM0MsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFJLE9BQU8sRUFBRSxPQUF3QixDQUFDLENBQUE7UUFDckQsT0FBTyxNQUFNLENBQUE7SUFDZixDQUFDO0lBRVMsS0FBSyxDQUFDLElBQUksQ0FDbEIsT0FBVSxFQUNWLEtBQW9CO1FBRXBCLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQTtRQUN0QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBSSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUE7SUFDdkMsQ0FBQztDQUNGO0FBdFBELHdDQXNQQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVtaXR0ZXIsIENvbXBvc2l0ZURpc3Bvc2FibGUgfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHsgV2Vidmlld1RhZywgc2hlbGwgfSBmcm9tICdlbGVjdHJvbidcbmltcG9ydCBmaWxlVXJpVG9QYXRoID0gcmVxdWlyZSgnZmlsZS11cmktdG8tcGF0aCcpXG5cbmltcG9ydCB7IGhhbmRsZVByb21pc2UsIGF0b21Db25maWcgfSBmcm9tICcuLi91dGlsJ1xuaW1wb3J0IHsgUmVxdWVzdFJlcGx5TWFwLCBDaGFubmVsTWFwIH0gZnJvbSAnLi4vLi4vc3JjLWNsaWVudC9pcGMnXG5pbXBvcnQgeyBnZXRQcmV2aWV3U3R5bGVzIH0gZnJvbSAnLi91dGlsJ1xuaW1wb3J0IHsgSW1hZ2VXYXRjaGVyIH0gZnJvbSAnLi4vaW1hZ2Utd2F0Y2gtaGVscGVyJ1xuXG5leHBvcnQgdHlwZSBSZXBseUNhbGxiYWNrU3RydWN0PFxuICBUIGV4dGVuZHMga2V5b2YgUmVxdWVzdFJlcGx5TWFwID0ga2V5b2YgUmVxdWVzdFJlcGx5TWFwXG4+ID0ge1xuICBbSyBpbiBrZXlvZiBSZXF1ZXN0UmVwbHlNYXBdOiB7XG4gICAgcmVxdWVzdDogS1xuICAgIGNhbGxiYWNrOiAocmVwbHk6IFJlcXVlc3RSZXBseU1hcFtLXSkgPT4gdm9pZFxuICB9XG59W1RdXG5cbmludGVyZmFjZSBQcmludFRvUERGT3B0aW9uc1JlYWwge1xuICAvKipcbiAgICogU3BlY2lmaWVzIHRoZSB0eXBlIG9mIG1hcmdpbnMgdG8gdXNlLiBVc2VzIDAgZm9yIGRlZmF1bHQgbWFyZ2luLCAxIGZvciBub1xuICAgKiBtYXJnaW4sIGFuZCAyIGZvciBtaW5pbXVtIG1hcmdpbi5cbiAgICovXG4gIG1hcmdpbnNUeXBlPzogbnVtYmVyXG4gIC8qKlxuICAgKiBTcGVjaWZ5IHBhZ2Ugc2l6ZSBvZiB0aGUgZ2VuZXJhdGVkIFBERi4gQ2FuIGJlIEEzLCBBNCwgQTUsIExlZ2FsLCBMZXR0ZXIsXG4gICAqIFRhYmxvaWQgb3IgYW4gT2JqZWN0IGNvbnRhaW5pbmcgaGVpZ2h0IGFuZCB3aWR0aCBpbiBtaWNyb25zLlxuICAgKi9cbiAgcGFnZVNpemU/OlxuICAgIHwgeyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlciB9XG4gICAgfCAnQTMnXG4gICAgfCAnQTQnXG4gICAgfCAnQTUnXG4gICAgfCAnTGVnYWwnXG4gICAgfCAnTGV0dGVyJ1xuICAgIHwgJ1RhYmxvaWQnXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHByaW50IENTUyBiYWNrZ3JvdW5kcy5cbiAgICovXG4gIHByaW50QmFja2dyb3VuZD86IGJvb2xlYW5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gcHJpbnQgc2VsZWN0aW9uIG9ubHkuXG4gICAqL1xuICBwcmludFNlbGVjdGlvbk9ubHk/OiBib29sZWFuXG4gIC8qKlxuICAgKiB0cnVlIGZvciBsYW5kc2NhcGUsIGZhbHNlIGZvciBwb3J0cmFpdC5cbiAgICovXG4gIGxhbmRzY2FwZT86IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNsYXNzIFdlYnZpZXdIYW5kbGVyIHtcbiAgcHVibGljIHJlYWRvbmx5IGVtaXR0ZXIgPSBuZXcgRW1pdHRlcjxcbiAgICB7fSxcbiAgICB7XG4gICAgICAnZGlkLXNjcm9sbC1wcmV2aWV3JzogeyBtaW46IG51bWJlcjsgbWF4OiBudW1iZXIgfVxuICAgIH1cbiAgPigpXG4gIHB1YmxpYyByZWFkb25seSBpbWFnZVdhdGNoZXI6IEltYWdlV2F0Y2hlclxuICBwcm90ZWN0ZWQgZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gIHByaXZhdGUgcmVhZG9ubHkgX2VsZW1lbnQ6IFdlYnZpZXdUYWdcbiAgcHJpdmF0ZSBkZXN0cm95ZWQgPSBmYWxzZVxuICBwcml2YXRlIHpvb21MZXZlbCA9IDBcbiAgcHJpdmF0ZSByZXBseUNhbGxiYWNrcyA9IG5ldyBNYXA8bnVtYmVyLCBSZXBseUNhbGxiYWNrU3RydWN0PigpXG4gIHByaXZhdGUgcmVwbHlDYWxsYmFja0lkID0gMFxuICBwcml2YXRlIHJlYWRvbmx5IGluaXRQcm9taXNlOiBQcm9taXNlPHZvaWQ+XG5cbiAgY29uc3RydWN0b3IoaW5pdDogKCkgPT4gdm9pZCB8IFByb21pc2U8dm9pZD4pIHtcbiAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnd2VidmlldycpXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdtYXJrZG93bi1wcmV2aWV3LXBsdXMnLCAnbmF0aXZlLWtleS1iaW5kaW5ncycpXG4gICAgdGhpcy5fZWxlbWVudC5kaXNhYmxld2Vic2VjdXJpdHkgPSAndHJ1ZSdcbiAgICB0aGlzLl9lbGVtZW50Lm5vZGVpbnRlZ3JhdGlvbiA9ICd0cnVlJ1xuICAgIHRoaXMuX2VsZW1lbnQuc3JjID0gYGZpbGU6Ly8vJHtfX2Rpcm5hbWV9Ly4uLy4uL2NsaWVudC90ZW1wbGF0ZS5odG1sYFxuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUud2lkdGggPSAnMTAwJSdcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmhlaWdodCA9ICcxMDAlJ1xuICAgIHRoaXMuX2VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdpcGMtbWVzc2FnZScsXG4gICAgICAoZTogRWxlY3Ryb24uSXBjTWVzc2FnZUV2ZW50Q3VzdG9tKSA9PiB7XG4gICAgICAgIHN3aXRjaCAoZS5jaGFubmVsKSB7XG4gICAgICAgICAgY2FzZSAnem9vbS1pbic6XG4gICAgICAgICAgICB0aGlzLnpvb21JbigpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGNhc2UgJ3pvb20tb3V0JzpcbiAgICAgICAgICAgIHRoaXMuem9vbU91dCgpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGNhc2UgJ2RpZC1zY3JvbGwtcHJldmlldyc6XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLXNjcm9sbC1wcmV2aWV3JywgZS5hcmdzWzBdKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlICd1bmNhdWdodC1lcnJvcic6IHtcbiAgICAgICAgICAgIGNvbnN0IGVyciA9IGUuYXJnc1swXVxuICAgICAgICAgICAgY29uc3QgbmV3RXJyID0gbmV3IEVycm9yKClcbiAgICAgICAgICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRGYXRhbEVycm9yKFxuICAgICAgICAgICAgICBgVW5jYXVnaHQgZXJyb3IgJHtlcnIubmFtZX0gaW4gbWFya2Rvd24tcHJldmlldy1wbHVzIHdlYnZpZXcgY2xpZW50YCxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRpc21pc3NhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHN0YWNrOiBuZXdFcnIuc3RhY2ssXG4gICAgICAgICAgICAgICAgZGV0YWlsOiBgJHtlcnIubWVzc2FnZX1cXG5cXG5zdGFjazpcXG4ke2Vyci5zdGFja31gLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSAnc2hvdy1jb250ZXh0LW1lbnUnOiB7XG4gICAgICAgICAgICBhdG9tLmNvbnRleHRNZW51LnNob3dGb3JFdmVudCh7IHRhcmdldDogdGhpcy5fZWxlbWVudCB9KVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gcmVwbGllc1xuICAgICAgICAgIGNhc2UgJ3JlcXVlc3QtcmVwbHknOiB7XG4gICAgICAgICAgICBjb25zdCB7IGlkLCByZXF1ZXN0LCByZXN1bHQgfSA9IGUuYXJnc1swXVxuICAgICAgICAgICAgY29uc3QgY2IgPSB0aGlzLnJlcGx5Q2FsbGJhY2tzLmdldChpZClcbiAgICAgICAgICAgIGlmIChjYiAmJiByZXF1ZXN0ID09PSBjYi5yZXF1ZXN0KSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrOiAocjogYW55KSA9PiB2b2lkID0gY2IuY2FsbGJhY2tcbiAgICAgICAgICAgICAgY2FsbGJhY2socmVzdWx0KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgKVxuICAgIHRoaXMuX2VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignd2lsbC1uYXZpZ2F0ZScsIGFzeW5jIChlKSA9PiB7XG4gICAgICBjb25zdCBleHRzID0gYXRvbUNvbmZpZygpLnByZXZpZXdDb25maWcuc2hlbGxPcGVuRmlsZUV4dGVuc2lvbnNcbiAgICAgIGNvbnN0IGZvcmNlT3BlbkV4dGVybmFsID0gZXh0cy5zb21lKChleHQpID0+XG4gICAgICAgIGUudXJsLnRvTG93ZXJDYXNlKCkuZW5kc1dpdGgoYC4ke2V4dC50b0xvd2VyQ2FzZSgpfWApLFxuICAgICAgKVxuICAgICAgaWYgKGUudXJsLnN0YXJ0c1dpdGgoJ2ZpbGU6Ly8nKSAmJiAhZm9yY2VPcGVuRXh0ZXJuYWwpIHtcbiAgICAgICAgaGFuZGxlUHJvbWlzZShhdG9tLndvcmtzcGFjZS5vcGVuKGZpbGVVcmlUb1BhdGgoZS51cmwpKSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNoZWxsLm9wZW5FeHRlcm5hbChlLnVybClcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQoXG4gICAgICBhdG9tLnN0eWxlcy5vbkRpZEFkZFN0eWxlRWxlbWVudCgoKSA9PiB7XG4gICAgICAgIGhhbmRsZVByb21pc2UodGhpcy51cGRhdGVTdHlsZXMoKSlcbiAgICAgIH0pLFxuICAgICAgYXRvbS5zdHlsZXMub25EaWRSZW1vdmVTdHlsZUVsZW1lbnQoKCkgPT4ge1xuICAgICAgICBoYW5kbGVQcm9taXNlKHRoaXMudXBkYXRlU3R5bGVzKCkpXG4gICAgICB9KSxcbiAgICAgIGF0b20uc3R5bGVzLm9uRGlkVXBkYXRlU3R5bGVFbGVtZW50KCgpID0+IHtcbiAgICAgICAgaGFuZGxlUHJvbWlzZSh0aGlzLnVwZGF0ZVN0eWxlcygpKVxuICAgICAgfSksXG4gICAgKVxuXG4gICAgdGhpcy5pbml0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLl9lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RvbS1yZWFkeScsICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuZGVzdHJveWVkKSByZXR1cm5cbiAgICAgICAgdGhpcy5fZWxlbWVudC5zZXRab29tTGV2ZWwodGhpcy56b29tTGV2ZWwpXG4gICAgICAgIHJlc29sdmUoKVxuICAgICAgICBoYW5kbGVQcm9taXNlKHRoaXMudXBkYXRlU3R5bGVzKCkudGhlbihpbml0KSlcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKFxuICAgICAgKHRoaXMuaW1hZ2VXYXRjaGVyID0gbmV3IEltYWdlV2F0Y2hlcih0aGlzLnVwZGF0ZUltYWdlcy5iaW5kKHRoaXMpKSksXG4gICAgKVxuICB9XG5cbiAgcHVibGljIGdldCBlbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudFxuICB9XG5cbiAgcHVibGljIGFzeW5jIHJ1bkpTPFQ+KGpzOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8VD4oKHJlc29sdmUpID0+XG4gICAgICB0aGlzLl9lbGVtZW50LmV4ZWN1dGVKYXZhU2NyaXB0KGpzLCBmYWxzZSwgcmVzb2x2ZSksXG4gICAgKVxuICB9XG5cbiAgcHVibGljIGRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMuZGVzdHJveWVkKSByZXR1cm5cbiAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWVcbiAgICB0aGlzLmRpc3Bvc2FibGVzLmRpc3Bvc2UoKVxuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKClcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyB1cGRhdGUoaHRtbDogc3RyaW5nLCByZW5kZXJMYVRlWDogYm9vbGVhbikge1xuICAgIGlmICh0aGlzLmRlc3Ryb3llZCkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzLnJ1blJlcXVlc3QoJ3VwZGF0ZS1wcmV2aWV3Jywge1xuICAgICAgaHRtbCxcbiAgICAgIHJlbmRlckxhVGVYLFxuICAgIH0pXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc2V0U291cmNlTWFwKG1hcDoge1xuICAgIFtsaW5lOiBudW1iZXJdOiB7IHRhZzogc3RyaW5nOyBpbmRleDogbnVtYmVyIH1bXVxuICB9KSB7XG4gICAgcmV0dXJuIHRoaXMuc2VuZDwnc2V0LXNvdXJjZS1tYXAnPignc2V0LXNvdXJjZS1tYXAnLCB7IG1hcCB9KVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHNldEJhc2VQYXRoKHBhdGg/OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5zZW5kPCdzZXQtYmFzZS1wYXRoJz4oJ3NldC1iYXNlLXBhdGgnLCB7IHBhdGggfSlcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBpbml0KHBhcmFtczogQ2hhbm5lbE1hcFsnaW5pdCddKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VuZDwnaW5pdCc+KCdpbml0JywgcGFyYW1zKVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHVwZGF0ZUltYWdlcyhvbGRTb3VyY2U6IHN0cmluZywgdmVyc2lvbjogbnVtYmVyIHwgdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VuZDwndXBkYXRlLWltYWdlcyc+KCd1cGRhdGUtaW1hZ2VzJywge1xuICAgICAgb2xkc3JjOiBvbGRTb3VyY2UsXG4gICAgICB2OiB2ZXJzaW9uLFxuICAgIH0pXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcHJpbnRUb1BERihvcHRzOiBQcmludFRvUERGT3B0aW9uc1JlYWwpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8QnVmZmVyPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAvLyBUT0RPOiBDb21wbGFpbiBvbiBFbGVjdHJvblxuICAgICAgdGhpcy5fZWxlbWVudC5nZXRXZWJDb250ZW50cygpLnByaW50VG9QREYob3B0cyBhcyBhbnksIChlcnJvciwgZGF0YSkgPT4ge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZShkYXRhKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHN5bmMobGluZTogbnVtYmVyLCBmbGFzaDogYm9vbGVhbikge1xuICAgIHJldHVybiB0aGlzLnNlbmQ8J3N5bmMnPignc3luYycsIHsgbGluZSwgZmxhc2ggfSlcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzeW5jU291cmNlKCkge1xuICAgIHJldHVybiB0aGlzLnJ1blJlcXVlc3QoJ3N5bmMtc291cmNlJywge30pXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc2Nyb2xsU3luYyhmaXJzdExpbmU6IG51bWJlciwgbGFzdExpbmU6IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLnNlbmQ8J3Njcm9sbC1zeW5jJz4oJ3Njcm9sbC1zeW5jJywgeyBmaXJzdExpbmUsIGxhc3RMaW5lIH0pXG4gIH1cblxuICBwdWJsaWMgem9vbUluKCkge1xuICAgIHRoaXMuem9vbUxldmVsICs9IDAuMVxuICAgIHRoaXMuX2VsZW1lbnQuc2V0Wm9vbUxldmVsKHRoaXMuem9vbUxldmVsKVxuICB9XG5cbiAgcHVibGljIHpvb21PdXQoKSB7XG4gICAgdGhpcy56b29tTGV2ZWwgLT0gMC4xXG4gICAgdGhpcy5fZWxlbWVudC5zZXRab29tTGV2ZWwodGhpcy56b29tTGV2ZWwpXG4gIH1cblxuICBwdWJsaWMgcmVzZXRab29tKCkge1xuICAgIHRoaXMuem9vbUxldmVsID0gMFxuICAgIHRoaXMuX2VsZW1lbnQuc2V0Wm9vbUxldmVsKHRoaXMuem9vbUxldmVsKVxuICB9XG5cbiAgcHVibGljIHByaW50KCkge1xuICAgIHRoaXMuX2VsZW1lbnQucHJpbnQoKVxuICB9XG5cbiAgcHVibGljIG9wZW5EZXZUb29scygpIHtcbiAgICB0aGlzLl9lbGVtZW50Lm9wZW5EZXZUb29scygpXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcmVsb2FkKCkge1xuICAgIGF3YWl0IHRoaXMucnVuUmVxdWVzdCgncmVsb2FkJywge30pXG4gICAgdGhpcy5fZWxlbWVudC5yZWxvYWQoKVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGVycm9yKG1zZzogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VuZDwnZXJyb3InPignZXJyb3InLCB7IG1zZyB9KVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldFRlWENvbmZpZygpIHtcbiAgICByZXR1cm4gdGhpcy5ydW5SZXF1ZXN0KCdnZXQtdGV4LWNvbmZpZycsIHt9KVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldFNlbGVjdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5ydW5SZXF1ZXN0KCdnZXQtc2VsZWN0aW9uJywge30pXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgdXBkYXRlU3R5bGVzKCkge1xuICAgIHJldHVybiB0aGlzLnNlbmQ8J3N0eWxlJz4oJ3N0eWxlJywgeyBzdHlsZXM6IGdldFByZXZpZXdTdHlsZXModHJ1ZSkgfSlcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBydW5SZXF1ZXN0PFQgZXh0ZW5kcyBrZXlvZiBSZXF1ZXN0UmVwbHlNYXA+KFxuICAgIHJlcXVlc3Q6IFQsXG4gICAgYXJnczogeyBbSyBpbiBFeGNsdWRlPGtleW9mIENoYW5uZWxNYXBbVF0sICdpZCc+XTogQ2hhbm5lbE1hcFtUXVtLXSB9LFxuICApIHtcbiAgICBjb25zdCBpZCA9IHRoaXMucmVwbHlDYWxsYmFja0lkKytcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgUHJvbWlzZTxSZXF1ZXN0UmVwbHlNYXBbVF0+KChyZXNvbHZlKSA9PiB7XG4gICAgICB0aGlzLnJlcGx5Q2FsbGJhY2tzLnNldChpZCwgKHtcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgY2FsbGJhY2s6IChyZXN1bHQ6IFJlcXVlc3RSZXBseU1hcFtUXSkgPT4ge1xuICAgICAgICAgIHRoaXMucmVwbHlDYWxsYmFja3MuZGVsZXRlKGlkKVxuICAgICAgICAgIHJlc29sdmUocmVzdWx0KVxuICAgICAgICB9LFxuICAgICAgfSBhcyB1bmtub3duKSBhcyBSZXBseUNhbGxiYWNrU3RydWN0PFQ+KVxuICAgIH0pXG4gICAgY29uc3QgbmV3YXJncyA9IE9iamVjdC5hc3NpZ24oeyBpZCB9LCBhcmdzKVxuICAgIGF3YWl0IHRoaXMuc2VuZDxUPihyZXF1ZXN0LCBuZXdhcmdzIGFzIENoYW5uZWxNYXBbVF0pXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIHNlbmQ8VCBleHRlbmRzIGtleW9mIENoYW5uZWxNYXA+KFxuICAgIGNoYW5uZWw6IFQsXG4gICAgdmFsdWU6IENoYW5uZWxNYXBbVF0sXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMuaW5pdFByb21pc2VcbiAgICB0aGlzLl9lbGVtZW50LnNlbmQ8VD4oY2hhbm5lbCwgdmFsdWUpXG4gIH1cbn1cbiJdfQ==