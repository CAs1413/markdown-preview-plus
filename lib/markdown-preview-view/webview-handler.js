"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const atom_1 = require("atom");
const electron_1 = require("electron");
const fileUriToPath = require("file-uri-to-path");
const util_1 = require("../util");
const util_2 = require("./util");
class WebviewHandler {
    constructor(init) {
        this.emitter = new atom_1.Emitter();
        this.disposables = new atom_1.CompositeDisposable();
        this.destroyed = false;
        this.zoomLevel = 0;
        this.replyCallbacks = new Map();
        this.replyCallbackId = 0;
        this._element = document.createElement('webview');
        this._element.classList.add('markdown-preview-plus', 'native-key-bindings');
        this._element.disablewebsecurity = 'true';
        this._element.nodeintegration = 'true';
        this._element.src = `file:///${__dirname}/../../client/template.html`;
        this._element.style.width = '100%';
        this._element.style.height = '100%';
        this._element.addEventListener('ipc-message', (e) => {
            switch (e.channel) {
                case 'zoom-in':
                    this.zoomIn();
                    break;
                case 'zoom-out':
                    this.zoomOut();
                    break;
                case 'did-scroll-preview':
                    this.emitter.emit('did-scroll-preview', e.args[0]);
                    break;
                case 'request-reply': {
                    const { id, request, result } = e.args[0];
                    const cb = this.replyCallbacks.get(id);
                    if (cb && request === cb.request) {
                        const callback = cb.callback;
                        callback(result);
                    }
                    break;
                }
            }
        });
        this._element.addEventListener('will-navigate', async (e) => {
            const exts = util_1.atomConfig().previewConfig.shellOpenFileExtensions;
            const forceOpenExternal = exts.some((ext) => e.url.toLowerCase().endsWith(`.${ext.toLowerCase()}`));
            if (e.url.startsWith('file://') && !forceOpenExternal) {
                util_1.handlePromise(atom.workspace.open(fileUriToPath(e.url)));
            }
            else {
                electron_1.shell.openExternal(e.url);
            }
        });
        this.disposables.add(atom.styles.onDidAddStyleElement(() => {
            this.updateStyles();
        }), atom.styles.onDidRemoveStyleElement(() => {
            this.updateStyles();
        }), atom.styles.onDidUpdateStyleElement(() => {
            this.updateStyles();
        }));
        const onload = () => {
            if (this.destroyed)
                return;
            this._element.setZoomLevel(this.zoomLevel);
            this.updateStyles();
            init();
        };
        this._element.addEventListener('dom-ready', onload);
    }
    get element() {
        return this._element;
    }
    async runJS(js) {
        return new Promise((resolve) => this._element.executeJavaScript(js, false, resolve));
    }
    destroy() {
        if (this.destroyed)
            return;
        this.destroyed = true;
        this.disposables.dispose();
        this._element.remove();
    }
    async update(html, renderLaTeX) {
        if (this.destroyed)
            return undefined;
        return this.runRequest('update-preview', {
            html,
            renderLaTeX,
        });
    }
    setSourceMap(map) {
        this._element.send('set-source-map', { map });
    }
    setBasePath(path) {
        this._element.send('set-base-path', { path });
    }
    init(atomHome, mathJaxConfig, mathJaxRenderer = util_1.atomConfig().mathConfig.latexRenderer) {
        this._element.send('init', {
            atomHome,
            mathJaxConfig,
            mathJaxRenderer,
        });
    }
    updateImages(oldSource, version) {
        this._element.send('update-images', {
            oldsrc: oldSource,
            v: version,
        });
    }
    async saveToPDF(filePath) {
        const opts = util_1.atomConfig().saveConfig.saveToPDFOptions;
        const customPageSize = parsePageSize(opts.customPageSize);
        const pageSize = opts.pageSize === 'Custom' ? customPageSize : opts.pageSize;
        if (pageSize === undefined) {
            throw new Error(`Failed to parse custom page size: ${opts.customPageSize}`);
        }
        const selection = await this.getSelection();
        const printSelectionOnly = selection ? opts.printSelectionOnly : false;
        const newOpts = Object.assign({}, opts, { pageSize,
            printSelectionOnly });
        await this.prepareSaveToPDF(newOpts);
        try {
            const data = await new Promise((resolve, reject) => {
                this._element.printToPDF(newOpts, (error, data) => {
                    if (error) {
                        reject(error);
                        return;
                    }
                    resolve(data);
                });
            });
            await new Promise((resolve, reject) => {
                fs.writeFile(filePath, data, (error) => {
                    if (error) {
                        reject(error);
                        return;
                    }
                    resolve();
                });
            });
        }
        finally {
            util_1.handlePromise(this.finishSaveToPDF());
        }
    }
    sync(line, flash) {
        this._element.send('sync', { line, flash });
    }
    async syncSource() {
        return this.runRequest('sync-source', {});
    }
    scrollSync(firstLine, lastLine) {
        this._element.send('scroll-sync', { firstLine, lastLine });
    }
    zoomIn() {
        this.zoomLevel += 0.1;
        this._element.setZoomLevel(this.zoomLevel);
    }
    zoomOut() {
        this.zoomLevel -= 0.1;
        this._element.setZoomLevel(this.zoomLevel);
    }
    resetZoom() {
        this.zoomLevel = 0;
        this._element.setZoomLevel(this.zoomLevel);
    }
    print() {
        this._element.print();
    }
    openDevTools() {
        this._element.openDevTools();
    }
    async reload() {
        await this.runRequest('reload', {});
        this._element.reload();
    }
    error(msg) {
        this._element.send('error', { msg });
    }
    async getTeXConfig() {
        return this.runRequest('get-tex-config', {});
    }
    async getSelection() {
        return this.runRequest('get-selection', {});
    }
    updateStyles() {
        this._element.send('style', { styles: util_2.getPreviewStyles(true) });
    }
    async runRequest(request, args) {
        const id = this.replyCallbackId++;
        return new Promise((resolve) => {
            this.replyCallbacks.set(id, {
                request: request,
                callback: (result) => {
                    this.replyCallbacks.delete(id);
                    resolve(result);
                },
            });
            const newargs = Object.assign({ id }, args);
            this._element.send(request, newargs);
        });
    }
    async prepareSaveToPDF(opts) {
        const [width, height] = getPageWidth(opts.pageSize);
        return this.runRequest('set-width', {
            width: opts.landscape ? height : width,
        });
    }
    async finishSaveToPDF() {
        return this.runRequest('set-width', { width: undefined });
    }
}
exports.WebviewHandler = WebviewHandler;
function parsePageSize(size) {
    if (!size)
        return undefined;
    const rx = /^([\d.,]+)(cm|mm|in)?x([\d.,]+)(cm|mm|in)?$/i;
    const res = size.replace(/\s*/g, '').match(rx);
    if (res) {
        const width = parseFloat(res[1]);
        const wunit = res[2];
        const height = parseFloat(res[3]);
        const hunit = res[4];
        return {
            width: convert(width, wunit),
            height: convert(height, hunit),
        };
    }
    else {
        return undefined;
    }
}
function convert(val, unit) {
    return val * unitInMicrons(unit);
}
function unitInMicrons(unit = 'mm') {
    switch (unit) {
        case 'mm':
            return 1000;
        case 'cm':
            return 10000;
        case 'in':
            return 25400;
    }
}
function getPageWidth(pageSize) {
    switch (pageSize) {
        case 'A3':
            return [297, 420];
        case 'A4':
            return [210, 297];
        case 'A5':
            return [148, 210];
        case 'Legal':
            return [216, 356];
        case 'Letter':
            return [216, 279];
        case 'Tabloid':
            return [279, 432];
        default:
            return [pageSize.width / 1000, pageSize.height / 1000];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vidmlldy1oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21hcmtkb3duLXByZXZpZXctdmlldy93ZWJ2aWV3LWhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5QkFBd0I7QUFDeEIsK0JBQWlFO0FBQ2pFLHVDQUE0QztBQUM1QyxrREFBa0Q7QUFFbEQsa0NBQW1EO0FBRW5ELGlDQUF5QztBQVd6QyxNQUFhLGNBQWM7SUFjekIsWUFBWSxJQUFnQjtRQWJaLFlBQU8sR0FBRyxJQUFJLGNBQU8sRUFLbEMsQ0FBQTtRQUNPLGdCQUFXLEdBQUcsSUFBSSwwQkFBbUIsRUFBRSxDQUFBO1FBRXpDLGNBQVMsR0FBRyxLQUFLLENBQUE7UUFDakIsY0FBUyxHQUFHLENBQUMsQ0FBQTtRQUNiLG1CQUFjLEdBQUcsSUFBSSxHQUFHLEVBQStCLENBQUE7UUFDdkQsb0JBQWUsR0FBRyxDQUFDLENBQUE7UUFHekIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ2pELElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRSxxQkFBcUIsQ0FBQyxDQUFBO1FBQzNFLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCLEdBQUcsTUFBTSxDQUFBO1FBQ3pDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxHQUFHLE1BQU0sQ0FBQTtRQUN0QyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxXQUFXLFNBQVMsNkJBQTZCLENBQUE7UUFDckUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQTtRQUNsQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO1FBQ25DLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQzVCLGFBQWEsRUFDYixDQUFD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O0lBQ3RDLFFBQVEsUUFBUSxFQUFFO1FBQ2hCLEtBQUssSUFBSTtZQUNQLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDbkIsS0FBSyxJQUFJO1lBQ1AsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUNuQixLQUFLLElBQUk7WUFDUCxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQ25CLEtBQUssT0FBTztZQUNWLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDbkIsS0FBSyxRQUFRO1lBQ1gsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUNuQixLQUFLLFNBQVM7WUFDWixPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQ25CO1lBQ0UsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsSUFBSSxFQUFFLFFBQVEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUE7S0FDekQ7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnXG5pbXBvcnQgeyBFbWl0dGVyLCBDb21wb3NpdGVEaXNwb3NhYmxlLCBDb25maWdWYWx1ZXMgfSBmcm9tICdhdG9tJ1xuaW1wb3J0IHsgV2Vidmlld1RhZywgc2hlbGwgfSBmcm9tICdlbGVjdHJvbidcbmltcG9ydCBmaWxlVXJpVG9QYXRoID0gcmVxdWlyZSgnZmlsZS11cmktdG8tcGF0aCcpXG5cbmltcG9ydCB7IGhhbmRsZVByb21pc2UsIGF0b21Db25maWcgfSBmcm9tICcuLi91dGlsJ1xuaW1wb3J0IHsgUmVxdWVzdFJlcGx5TWFwLCBDaGFubmVsTWFwIH0gZnJvbSAnLi4vLi4vc3JjLWNsaWVudC9pcGMnXG5pbXBvcnQgeyBnZXRQcmV2aWV3U3R5bGVzIH0gZnJvbSAnLi91dGlsJ1xuXG5leHBvcnQgdHlwZSBSZXBseUNhbGxiYWNrU3RydWN0PFxuICBUIGV4dGVuZHMga2V5b2YgUmVxdWVzdFJlcGx5TWFwID0ga2V5b2YgUmVxdWVzdFJlcGx5TWFwXG4+ID0ge1xuICBbSyBpbiBrZXlvZiBSZXF1ZXN0UmVwbHlNYXBdOiB7XG4gICAgcmVxdWVzdDogS1xuICAgIGNhbGxiYWNrOiAocmVwbHk6IFJlcXVlc3RSZXBseU1hcFtLXSkgPT4gdm9pZFxuICB9XG59W1RdXG5cbmV4cG9ydCBjbGFzcyBXZWJ2aWV3SGFuZGxlciB7XG4gIHB1YmxpYyByZWFkb25seSBlbWl0dGVyID0gbmV3IEVtaXR0ZXI8XG4gICAge30sXG4gICAge1xuICAgICAgJ2RpZC1zY3JvbGwtcHJldmlldyc6IHsgbWluOiBudW1iZXI7IG1heDogbnVtYmVyIH1cbiAgICB9XG4gID4oKVxuICBwcm90ZWN0ZWQgZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpXG4gIHByaXZhdGUgcmVhZG9ubHkgX2VsZW1lbnQ6IFdlYnZpZXdUYWdcbiAgcHJpdmF0ZSBkZXN0cm95ZWQgPSBmYWxzZVxuICBwcml2YXRlIHpvb21MZXZlbCA9IDBcbiAgcHJpdmF0ZSByZXBseUNhbGxiYWNrcyA9IG5ldyBNYXA8bnVtYmVyLCBSZXBseUNhbGxiYWNrU3RydWN0PigpXG4gIHByaXZhdGUgcmVwbHlDYWxsYmFja0lkID0gMFxuXG4gIGNvbnN0cnVjdG9yKGluaXQ6ICgpID0+IHZvaWQpIHtcbiAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnd2VidmlldycpXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdtYXJrZG93bi1wcmV2aWV3LXBsdXMnLCAnbmF0aXZlLWtleS1iaW5kaW5ncycpXG4gICAgdGhpcy5fZWxlbWVudC5kaXNhYmxld2Vic2VjdXJpdHkgPSAndHJ1ZSdcbiAgICB0aGlzLl9lbGVtZW50Lm5vZGVpbnRlZ3JhdGlvbiA9ICd0cnVlJ1xuICAgIHRoaXMuX2VsZW1lbnQuc3JjID0gYGZpbGU6Ly8vJHtfX2Rpcm5hbWV9Ly4uLy4uL2NsaWVudC90ZW1wbGF0ZS5odG1sYFxuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUud2lkdGggPSAnMTAwJSdcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmhlaWdodCA9ICcxMDAlJ1xuICAgIHRoaXMuX2VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdpcGMtbWVzc2FnZScsXG4gICAgICAoZTogRWxlY3Ryb24uSXBjTWVzc2FnZUV2ZW50Q3VzdG9tKSA9PiB7XG4gICAgICAgIHN3aXRjaCAoZS5jaGFubmVsKSB7XG4gICAgICAgICAgY2FzZSAnem9vbS1pbic6XG4gICAgICAgICAgICB0aGlzLnpvb21JbigpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGNhc2UgJ3pvb20tb3V0JzpcbiAgICAgICAgICAgIHRoaXMuem9vbU91dCgpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGNhc2UgJ2RpZC1zY3JvbGwtcHJldmlldyc6XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLXNjcm9sbC1wcmV2aWV3JywgZS5hcmdzWzBdKVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAvLyByZXBsaWVzXG4gICAgICAgICAgY2FzZSAncmVxdWVzdC1yZXBseSc6IHtcbiAgICAgICAgICAgIGNvbnN0IHsgaWQsIHJlcXVlc3QsIHJlc3VsdCB9ID0gZS5hcmdzWzBdXG4gICAgICAgICAgICBjb25zdCBjYiA9IHRoaXMucmVwbHlDYWxsYmFja3MuZ2V0KGlkKVxuICAgICAgICAgICAgaWYgKGNiICYmIHJlcXVlc3QgPT09IGNiLnJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgY29uc3QgY2FsbGJhY2s6IChyOiBhbnkpID0+IHZvaWQgPSBjYi5jYWxsYmFja1xuICAgICAgICAgICAgICBjYWxsYmFjayhyZXN1bHQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICApXG4gICAgdGhpcy5fZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd3aWxsLW5hdmlnYXRlJywgYXN5bmMgKGUpID0+IHtcbiAgICAgIGNvbnN0IGV4dHMgPSBhdG9tQ29uZmlnKCkucHJldmlld0NvbmZpZy5zaGVsbE9wZW5GaWxlRXh0ZW5zaW9uc1xuICAgICAgY29uc3QgZm9yY2VPcGVuRXh0ZXJuYWwgPSBleHRzLnNvbWUoKGV4dCkgPT5cbiAgICAgICAgZS51cmwudG9Mb3dlckNhc2UoKS5lbmRzV2l0aChgLiR7ZXh0LnRvTG93ZXJDYXNlKCl9YCksXG4gICAgICApXG4gICAgICBpZiAoZS51cmwuc3RhcnRzV2l0aCgnZmlsZTovLycpICYmICFmb3JjZU9wZW5FeHRlcm5hbCkge1xuICAgICAgICBoYW5kbGVQcm9taXNlKGF0b20ud29ya3NwYWNlLm9wZW4oZmlsZVVyaVRvUGF0aChlLnVybCkpKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2hlbGwub3BlbkV4dGVybmFsKGUudXJsKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLmRpc3Bvc2FibGVzLmFkZChcbiAgICAgIGF0b20uc3R5bGVzLm9uRGlkQWRkU3R5bGVFbGVtZW50KCgpID0+IHtcbiAgICAgICAgdGhpcy51cGRhdGVTdHlsZXMoKVxuICAgICAgfSksXG4gICAgICBhdG9tLnN0eWxlcy5vbkRpZFJlbW92ZVN0eWxlRWxlbWVudCgoKSA9PiB7XG4gICAgICAgIHRoaXMudXBkYXRlU3R5bGVzKClcbiAgICAgIH0pLFxuICAgICAgYXRvbS5zdHlsZXMub25EaWRVcGRhdGVTdHlsZUVsZW1lbnQoKCkgPT4ge1xuICAgICAgICB0aGlzLnVwZGF0ZVN0eWxlcygpXG4gICAgICB9KSxcbiAgICApXG5cbiAgICBjb25zdCBvbmxvYWQgPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHJldHVyblxuICAgICAgdGhpcy5fZWxlbWVudC5zZXRab29tTGV2ZWwodGhpcy56b29tTGV2ZWwpXG4gICAgICB0aGlzLnVwZGF0ZVN0eWxlcygpXG4gICAgICBpbml0KClcbiAgICB9XG4gICAgdGhpcy5fZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdkb20tcmVhZHknLCBvbmxvYWQpXG4gIH1cblxuICBwdWJsaWMgZ2V0IGVsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLl9lbGVtZW50XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcnVuSlM8VD4oanM6IHN0cmluZykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxUPigocmVzb2x2ZSkgPT5cbiAgICAgIHRoaXMuX2VsZW1lbnQuZXhlY3V0ZUphdmFTY3JpcHQoanMsIGZhbHNlLCByZXNvbHZlKSxcbiAgICApXG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHJldHVyblxuICAgIHRoaXMuZGVzdHJveWVkID0gdHJ1ZVxuICAgIHRoaXMuZGlzcG9zYWJsZXMuZGlzcG9zZSgpXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmUoKVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHVwZGF0ZShodG1sOiBzdHJpbmcsIHJlbmRlckxhVGVYOiBib29sZWFuKSB7XG4gICAgaWYgKHRoaXMuZGVzdHJveWVkKSByZXR1cm4gdW5kZWZpbmVkXG4gICAgcmV0dXJuIHRoaXMucnVuUmVxdWVzdCgndXBkYXRlLXByZXZpZXcnLCB7XG4gICAgICBodG1sLFxuICAgICAgcmVuZGVyTGFUZVgsXG4gICAgfSlcbiAgfVxuXG4gIHB1YmxpYyBzZXRTb3VyY2VNYXAobWFwOiB7XG4gICAgW2xpbmU6IG51bWJlcl06IHsgdGFnOiBzdHJpbmc7IGluZGV4OiBudW1iZXIgfVtdXG4gIH0pIHtcbiAgICB0aGlzLl9lbGVtZW50LnNlbmQ8J3NldC1zb3VyY2UtbWFwJz4oJ3NldC1zb3VyY2UtbWFwJywgeyBtYXAgfSlcbiAgfVxuXG4gIHB1YmxpYyBzZXRCYXNlUGF0aChwYXRoPzogc3RyaW5nKSB7XG4gICAgdGhpcy5fZWxlbWVudC5zZW5kPCdzZXQtYmFzZS1wYXRoJz4oJ3NldC1iYXNlLXBhdGgnLCB7IHBhdGggfSlcbiAgfVxuXG4gIHB1YmxpYyBpbml0KFxuICAgIGF0b21Ib21lOiBzdHJpbmcsXG4gICAgbWF0aEpheENvbmZpZzogTWF0aEpheENvbmZpZyxcbiAgICBtYXRoSmF4UmVuZGVyZXIgPSBhdG9tQ29uZmlnKCkubWF0aENvbmZpZy5sYXRleFJlbmRlcmVyLFxuICApIHtcbiAgICB0aGlzLl9lbGVtZW50LnNlbmQ8J2luaXQnPignaW5pdCcsIHtcbiAgICAgIGF0b21Ib21lLFxuICAgICAgbWF0aEpheENvbmZpZyxcbiAgICAgIG1hdGhKYXhSZW5kZXJlcixcbiAgICB9KVxuICB9XG5cbiAgcHVibGljIHVwZGF0ZUltYWdlcyhvbGRTb3VyY2U6IHN0cmluZywgdmVyc2lvbjogbnVtYmVyIHwgdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5fZWxlbWVudC5zZW5kPCd1cGRhdGUtaW1hZ2VzJz4oJ3VwZGF0ZS1pbWFnZXMnLCB7XG4gICAgICBvbGRzcmM6IG9sZFNvdXJjZSxcbiAgICAgIHY6IHZlcnNpb24sXG4gICAgfSlcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzYXZlVG9QREYoZmlsZVBhdGg6IHN0cmluZykge1xuICAgIGNvbnN0IG9wdHMgPSBhdG9tQ29uZmlnKCkuc2F2ZUNvbmZpZy5zYXZlVG9QREZPcHRpb25zXG4gICAgY29uc3QgY3VzdG9tUGFnZVNpemUgPSBwYXJzZVBhZ2VTaXplKG9wdHMuY3VzdG9tUGFnZVNpemUpXG4gICAgY29uc3QgcGFnZVNpemUgPSBvcHRzLnBhZ2VTaXplID09PSAnQ3VzdG9tJyA/IGN1c3RvbVBhZ2VTaXplIDogb3B0cy5wYWdlU2l6ZVxuICAgIGlmIChwYWdlU2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBGYWlsZWQgdG8gcGFyc2UgY3VzdG9tIHBhZ2Ugc2l6ZTogJHtvcHRzLmN1c3RvbVBhZ2VTaXplfWAsXG4gICAgICApXG4gICAgfVxuICAgIGNvbnN0IHNlbGVjdGlvbiA9IGF3YWl0IHRoaXMuZ2V0U2VsZWN0aW9uKClcbiAgICBjb25zdCBwcmludFNlbGVjdGlvbk9ubHkgPSBzZWxlY3Rpb24gPyBvcHRzLnByaW50U2VsZWN0aW9uT25seSA6IGZhbHNlXG4gICAgY29uc3QgbmV3T3B0cyA9IHtcbiAgICAgIC4uLm9wdHMsXG4gICAgICBwYWdlU2l6ZSxcbiAgICAgIHByaW50U2VsZWN0aW9uT25seSxcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5wcmVwYXJlU2F2ZVRvUERGKG5ld09wdHMpXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBuZXcgUHJvbWlzZTxCdWZmZXI+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgLy8gVE9ETzogQ29tcGxhaW4gb24gRWxlY3Ryb25cbiAgICAgICAgdGhpcy5fZWxlbWVudC5wcmludFRvUERGKG5ld09wdHMgYXMgYW55LCAoZXJyb3IsIGRhdGEpID0+IHtcbiAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnJvcilcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICByZXNvbHZlKGRhdGEpXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgICAgYXdhaXQgbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBmcy53cml0ZUZpbGUoZmlsZVBhdGgsIGRhdGEsIChlcnJvcikgPT4ge1xuICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc29sdmUoKVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaGFuZGxlUHJvbWlzZSh0aGlzLmZpbmlzaFNhdmVUb1BERigpKVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzeW5jKGxpbmU6IG51bWJlciwgZmxhc2g6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9lbGVtZW50LnNlbmQ8J3N5bmMnPignc3luYycsIHsgbGluZSwgZmxhc2ggfSlcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzeW5jU291cmNlKCkge1xuICAgIHJldHVybiB0aGlzLnJ1blJlcXVlc3QoJ3N5bmMtc291cmNlJywge30pXG4gIH1cblxuICBwdWJsaWMgc2Nyb2xsU3luYyhmaXJzdExpbmU6IG51bWJlciwgbGFzdExpbmU6IG51bWJlcikge1xuICAgIHRoaXMuX2VsZW1lbnQuc2VuZDwnc2Nyb2xsLXN5bmMnPignc2Nyb2xsLXN5bmMnLCB7IGZpcnN0TGluZSwgbGFzdExpbmUgfSlcbiAgfVxuXG4gIHB1YmxpYyB6b29tSW4oKSB7XG4gICAgdGhpcy56b29tTGV2ZWwgKz0gMC4xXG4gICAgdGhpcy5fZWxlbWVudC5zZXRab29tTGV2ZWwodGhpcy56b29tTGV2ZWwpXG4gIH1cblxuICBwdWJsaWMgem9vbU91dCgpIHtcbiAgICB0aGlzLnpvb21MZXZlbCAtPSAwLjFcbiAgICB0aGlzLl9lbGVtZW50LnNldFpvb21MZXZlbCh0aGlzLnpvb21MZXZlbClcbiAgfVxuXG4gIHB1YmxpYyByZXNldFpvb20oKSB7XG4gICAgdGhpcy56b29tTGV2ZWwgPSAwXG4gICAgdGhpcy5fZWxlbWVudC5zZXRab29tTGV2ZWwodGhpcy56b29tTGV2ZWwpXG4gIH1cblxuICBwdWJsaWMgcHJpbnQoKSB7XG4gICAgdGhpcy5fZWxlbWVudC5wcmludCgpXG4gIH1cblxuICBwdWJsaWMgb3BlbkRldlRvb2xzKCkge1xuICAgIHRoaXMuX2VsZW1lbnQub3BlbkRldlRvb2xzKClcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyByZWxvYWQoKSB7XG4gICAgYXdhaXQgdGhpcy5ydW5SZXF1ZXN0KCdyZWxvYWQnLCB7fSlcbiAgICB0aGlzLl9lbGVtZW50LnJlbG9hZCgpXG4gIH1cblxuICBwdWJsaWMgZXJyb3IobXNnOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9lbGVtZW50LnNlbmQ8J2Vycm9yJz4oJ2Vycm9yJywgeyBtc2cgfSlcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRUZVhDb25maWcoKSB7XG4gICAgcmV0dXJuIHRoaXMucnVuUmVxdWVzdCgnZ2V0LXRleC1jb25maWcnLCB7fSlcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRTZWxlY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucnVuUmVxdWVzdCgnZ2V0LXNlbGVjdGlvbicsIHt9KVxuICB9XG5cbiAgcHVibGljIHVwZGF0ZVN0eWxlcygpIHtcbiAgICB0aGlzLl9lbGVtZW50LnNlbmQ8J3N0eWxlJz4oJ3N0eWxlJywgeyBzdHlsZXM6IGdldFByZXZpZXdTdHlsZXModHJ1ZSkgfSlcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBydW5SZXF1ZXN0PFQgZXh0ZW5kcyBrZXlvZiBSZXF1ZXN0UmVwbHlNYXA+KFxuICAgIHJlcXVlc3Q6IFQsXG4gICAgYXJnczogeyBbSyBpbiBFeGNsdWRlPGtleW9mIENoYW5uZWxNYXBbVF0sICdpZCc+XTogQ2hhbm5lbE1hcFtUXVtLXSB9LFxuICApIHtcbiAgICBjb25zdCBpZCA9IHRoaXMucmVwbHlDYWxsYmFja0lkKytcbiAgICByZXR1cm4gbmV3IFByb21pc2U8UmVxdWVzdFJlcGx5TWFwW1RdPigocmVzb2x2ZSkgPT4ge1xuICAgICAgdGhpcy5yZXBseUNhbGxiYWNrcy5zZXQoaWQsIHtcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdCxcbiAgICAgICAgY2FsbGJhY2s6IChyZXN1bHQ6IFJlcXVlc3RSZXBseU1hcFtUXSkgPT4ge1xuICAgICAgICAgIHRoaXMucmVwbHlDYWxsYmFja3MuZGVsZXRlKGlkKVxuICAgICAgICAgIHJlc29sdmUocmVzdWx0KVxuICAgICAgICB9LFxuICAgICAgfSBhcyBSZXBseUNhbGxiYWNrU3RydWN0PFQ+KVxuICAgICAgY29uc3QgbmV3YXJncyA9IE9iamVjdC5hc3NpZ24oeyBpZCB9LCBhcmdzKVxuICAgICAgdGhpcy5fZWxlbWVudC5zZW5kPFQ+KHJlcXVlc3QsIG5ld2FyZ3MpXG4gICAgfSlcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcHJlcGFyZVNhdmVUb1BERihvcHRzOiB7XG4gICAgcGFnZVNpemU6IFBhZ2VTaXplXG4gICAgbGFuZHNjYXBlOiBib29sZWFuXG4gIH0pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBbd2lkdGgsIGhlaWdodF0gPSBnZXRQYWdlV2lkdGgob3B0cy5wYWdlU2l6ZSlcbiAgICByZXR1cm4gdGhpcy5ydW5SZXF1ZXN0KCdzZXQtd2lkdGgnLCB7XG4gICAgICB3aWR0aDogb3B0cy5sYW5kc2NhcGUgPyBoZWlnaHQgOiB3aWR0aCxcbiAgICB9KVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBmaW5pc2hTYXZlVG9QREYoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMucnVuUmVxdWVzdCgnc2V0LXdpZHRoJywgeyB3aWR0aDogdW5kZWZpbmVkIH0pXG4gIH1cbn1cblxudHlwZSBVbml0ID0gJ21tJyB8ICdjbScgfCAnaW4nXG5cbmZ1bmN0aW9uIHBhcnNlUGFnZVNpemUoc2l6ZTogc3RyaW5nKSB7XG4gIGlmICghc2l6ZSkgcmV0dXJuIHVuZGVmaW5lZFxuICBjb25zdCByeCA9IC9eKFtcXGQuLF0rKShjbXxtbXxpbik/eChbXFxkLixdKykoY218bW18aW4pPyQvaVxuICBjb25zdCByZXMgPSBzaXplLnJlcGxhY2UoL1xccyovZywgJycpLm1hdGNoKHJ4KVxuICBpZiAocmVzKSB7XG4gICAgY29uc3Qgd2lkdGggPSBwYXJzZUZsb2F0KHJlc1sxXSlcbiAgICBjb25zdCB3dW5pdCA9IHJlc1syXSBhcyBVbml0IHwgdW5kZWZpbmVkXG4gICAgY29uc3QgaGVpZ2h0ID0gcGFyc2VGbG9hdChyZXNbM10pXG4gICAgY29uc3QgaHVuaXQgPSByZXNbNF0gYXMgVW5pdCB8IHVuZGVmaW5lZFxuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogY29udmVydCh3aWR0aCwgd3VuaXQpLFxuICAgICAgaGVpZ2h0OiBjb252ZXJ0KGhlaWdodCwgaHVuaXQpLFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbn1cblxudHlwZSBQYWdlU2l6ZSA9XG4gIHwgRXhjbHVkZTxcbiAgICAgIENvbmZpZ1ZhbHVlc1snbWFya2Rvd24tcHJldmlldy1wbHVzLnNhdmVDb25maWcuc2F2ZVRvUERGT3B0aW9ucy5wYWdlU2l6ZSddLFxuICAgICAgJ0N1c3RvbSdcbiAgICA+XG4gIHwgeyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlciB9XG5cbmZ1bmN0aW9uIGNvbnZlcnQodmFsOiBudW1iZXIsIHVuaXQ/OiBVbml0KSB7XG4gIHJldHVybiB2YWwgKiB1bml0SW5NaWNyb25zKHVuaXQpXG59XG5cbmZ1bmN0aW9uIHVuaXRJbk1pY3JvbnModW5pdDogVW5pdCA9ICdtbScpIHtcbiAgc3dpdGNoICh1bml0KSB7XG4gICAgY2FzZSAnbW0nOlxuICAgICAgcmV0dXJuIDEwMDBcbiAgICBjYXNlICdjbSc6XG4gICAgICByZXR1cm4gMTAwMDBcbiAgICBjYXNlICdpbic6XG4gICAgICByZXR1cm4gMjU0MDBcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRQYWdlV2lkdGgocGFnZVNpemU6IFBhZ2VTaXplKSB7XG4gIHN3aXRjaCAocGFnZVNpemUpIHtcbiAgICBjYXNlICdBMyc6XG4gICAgICByZXR1cm4gWzI5NywgNDIwXVxuICAgIGNhc2UgJ0E0JzpcbiAgICAgIHJldHVybiBbMjEwLCAyOTddXG4gICAgY2FzZSAnQTUnOlxuICAgICAgcmV0dXJuIFsxNDgsIDIxMF1cbiAgICBjYXNlICdMZWdhbCc6XG4gICAgICByZXR1cm4gWzIxNiwgMzU2XVxuICAgIGNhc2UgJ0xldHRlcic6XG4gICAgICByZXR1cm4gWzIxNiwgMjc5XVxuICAgIGNhc2UgJ1RhYmxvaWQnOlxuICAgICAgcmV0dXJuIFsyNzksIDQzMl1cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFtwYWdlU2l6ZS53aWR0aCAvIDEwMDAsIHBhZ2VTaXplLmhlaWdodCAvIDEwMDBdXG4gIH1cbn1cbiJdfQ==