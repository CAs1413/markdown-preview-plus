"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
const util_1 = require("../util");
function editorForId(editorId) {
    for (const editor of atom.workspace.getTextEditors()) {
        if (editor.id === editorId) {
            return editor;
        }
    }
    return undefined;
}
exports.editorForId = editorForId;
let getStylesOverride = undefined;
function __setGetStylesOverride(f) {
    getStylesOverride = f;
}
exports.__setGetStylesOverride = __setGetStylesOverride;
function getStyles(context) {
    const textEditorStyles = document.createElement('atom-styles');
    textEditorStyles.initialize(atom.styles);
    textEditorStyles.setAttribute('context', context);
    return Array.from(textEditorStyles.childNodes).map((styleElement) => styleElement.innerText);
}
function getClientStyle(file) {
    return atom.themes.loadStylesheet(path.join(__dirname, '..', '..', 'styles-client', `${file}.less`));
}
function getUserStyles() {
    const el = atom.styles.styleElementsBySourcePath[atom.styles.getUserStyleSheetPath()];
    if (!el)
        return [];
    return [el.innerText];
}
exports.getUserStyles = getUserStyles;
function getSyntaxTheme(themeName) {
    if (themeName !== '') {
        const themes = atom.themes.getLoadedThemes();
        if (themes) {
            const [theme] = themes.filter((x) => x.name === themeName);
            if (theme) {
                const stshts = theme
                    .getStylesheetPaths()
                    .map((p) => atom.themes.loadStylesheet(p));
                return processEditorStyles(stshts);
            }
        }
        atom.notifications.addWarning('Failed to load syntax theme', {
            detail: `Markdown-preview-plus couldn't find '${themeName}'`,
        });
    }
    return processEditorStyles(getStyles('atom-text-editor'));
}
function getPreviewStyles(display) {
    if (getStylesOverride)
        return getStylesOverride(display);
    const styles = [];
    styles.push(...processEditorStyles(getUserStyles()));
    styles.push(...getSyntaxTheme(util_1.atomConfig().syntaxThemeName));
    styles.push(getClientStyle('generic'));
    if (display)
        styles.push(getClientStyle('display'));
    if (util_1.atomConfig().useGitHubStyle) {
        styles.push(getClientStyle('github'));
    }
    else {
        styles.push(getClientStyle('default'));
    }
    return styles;
}
exports.getPreviewStyles = getPreviewStyles;
function processEditorStyles(styles) {
    return styles.map((x) => x.replace(/\batom-text-editor\b/g, 'pre.editor-colors'));
}
function getMarkdownPreviewCSS() {
    const cssUrlRefExp = /url\(atom:\/\/markdown-preview-plus\/assets\/(.*)\)/;
    return getPreviewStyles(false)
        .join('\n')
        .replace(cssUrlRefExp, function (_match, assetsName, _offset, _string) {
        const assetPath = path.join(__dirname, '../../assets', assetsName);
        const originalData = fs.readFileSync(assetPath, 'binary');
        const base64Data = new Buffer(originalData, 'binary').toString('base64');
        return `url('data:image/jpeg;base64,${base64Data}')`;
    });
}
function decodeTag(token) {
    if (token.tag === 'math') {
        return 'span';
    }
    if (token.tag === 'code') {
        return 'atom-text-editor';
    }
    if (token.tag === '') {
        return null;
    }
    return token.tag;
}
function buildLineMap(tokens) {
    const lineMap = {};
    const tokenTagCount = {};
    tokenTagCount[0] = {};
    for (const token of tokens) {
        if (token.hidden)
            continue;
        if (token.map == null)
            continue;
        const tag = decodeTag(token);
        if (tag === null)
            continue;
        if (token.nesting === 1) {
            for (let line = token.map[0]; line < token.map[1]; line += 1) {
                if (lineMap[line] == null)
                    lineMap[line] = [];
                lineMap[line].push({
                    tag: tag,
                    index: tokenTagCount[token.level][tag] || 0,
                });
            }
            tokenTagCount[token.level + 1] = {};
        }
        else if (token.nesting === 0) {
            for (let line = token.map[0]; line < token.map[1]; line += 1) {
                if (lineMap[line] == null)
                    lineMap[line] = [];
                lineMap[line].push({
                    tag: tag,
                    index: tokenTagCount[token.level][tag] || 0,
                });
            }
        }
        const ttc = tokenTagCount[token.level][tag];
        tokenTagCount[token.level][tag] = ttc ? ttc + 1 : 1;
    }
    return lineMap;
}
exports.buildLineMap = buildLineMap;
function mathJaxScript(texConfig) {
    return `\
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    jax: ["input/TeX","output/HTML-CSS"],
    extensions: ["[a11y]/accessibility-menu.js"],
    'HTML-CSS': {
      availableFonts: [],
      webFont: 'TeX',
      undefinedFamily: ${JSON.stringify(util_1.atomConfig().mathConfig.undefinedFamily)},
      mtextFontInherit: true,
    },
    TeX: ${JSON.stringify(texConfig, undefined, 2)},
    showMathMenu: true
  });
</script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js"></script>`;
}
function mkHtml(title, html, renderLaTeX, texConfig) {
    let maybeMathJaxScript;
    if (renderLaTeX) {
        maybeMathJaxScript = mathJaxScript(texConfig);
    }
    else {
        maybeMathJaxScript = '';
    }
    return `\
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>${title}</title>${maybeMathJaxScript}
    <style>${getMarkdownPreviewCSS()}</style>
${html.head.innerHTML}
  </head>
  <body>
    ${html.body.innerHTML}
  </body>
</html>
`;
}
exports.mkHtml = mkHtml;
function destroy(item) {
    const pane = atom.workspace.paneForItem(item);
    if (pane)
        util_1.handlePromise(pane.destroyItem(item));
}
exports.destroy = destroy;
//# sourceMappingURL=data:application/json;base64,