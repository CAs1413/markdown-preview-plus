"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
const util_1 = require("../util");
function editorForId(editorId) {
    for (const editor of atom.workspace.getTextEditors()) {
        if (editor.id === editorId) {
            return editor;
        }
    }
    return undefined;
}
exports.editorForId = editorForId;
let getStylesOverride = undefined;
function __setGetStylesOverride(f) {
    getStylesOverride = f;
}
exports.__setGetStylesOverride = __setGetStylesOverride;
function getStyles(context) {
    const textEditorStyles = document.createElement('atom-styles');
    textEditorStyles.initialize(atom.styles);
    textEditorStyles.setAttribute('context', context);
    return Array.from(textEditorStyles.childNodes).map((styleElement) => styleElement.innerText);
}
function getClientStyle(file) {
    return atom.themes.loadStylesheet(path.join(__dirname, '..', '..', 'styles-client', `${file}.less`));
}
function getUserStyles() {
    const el = atom.styles.styleElementsBySourcePath[atom.styles.getUserStyleSheetPath()];
    if (!el)
        return [];
    return [el.innerText];
}
exports.getUserStyles = getUserStyles;
function getPreviewStyles(display) {
    if (getStylesOverride)
        return getStylesOverride(display);
    const styles = [];
    styles.push(...processEditorStyles(getUserStyles()));
    styles.push(...processEditorStyles(getStyles('atom-text-editor')));
    styles.push(getClientStyle('generic'));
    if (display)
        styles.push(getClientStyle('display'));
    if (util_1.atomConfig().useGitHubStyle) {
        styles.push(getClientStyle('github'));
        if (util_1.atomConfig().useGitHubStyleCodeBlocks) {
            styles.push(getClientStyle('github-code'));
        }
        if (util_1.atomConfig().darkenGitHubStyleCodeBlocks) {
            styles.push(getClientStyle('github-code-darken'));
        }
    }
    else {
        styles.push(getClientStyle('default'));
    }
    return styles;
}
exports.getPreviewStyles = getPreviewStyles;
function processEditorStyles(styles) {
    return styles.map((x) => x.replace(/\batom-text-editor\b/g, 'pre.editor-colors'));
}
function getMarkdownPreviewCSS() {
    const cssUrlRefExp = /url\(atom:\/\/markdown-preview-plus\/assets\/(.*)\)/;
    return getPreviewStyles(false)
        .join('\n')
        .replace(cssUrlRefExp, function (_match, assetsName, _offset, _string) {
        const assetPath = path.join(__dirname, '../../assets', assetsName);
        const originalData = fs.readFileSync(assetPath, 'binary');
        const base64Data = new Buffer(originalData, 'binary').toString('base64');
        return `url('data:image/jpeg;base64,${base64Data}')`;
    });
}
function decodeTag(token) {
    if (token.tag === 'math') {
        return 'span';
    }
    if (token.tag === 'code') {
        return 'atom-text-editor';
    }
    if (token.tag === '') {
        return null;
    }
    return token.tag;
}
function buildLineMap(tokens) {
    const lineMap = {};
    const tokenTagCount = {};
    tokenTagCount[0] = {};
    for (const token of tokens) {
        if (token.hidden)
            continue;
        if (token.map == null)
            continue;
        const tag = decodeTag(token);
        if (tag === null)
            continue;
        if (token.nesting === 1) {
            for (let line = token.map[0]; line < token.map[1]; line += 1) {
                if (lineMap[line] == null)
                    lineMap[line] = [];
                lineMap[line].push({
                    tag: tag,
                    index: tokenTagCount[token.level][tag] || 0,
                });
            }
            tokenTagCount[token.level + 1] = {};
        }
        else if (token.nesting === 0) {
            for (let line = token.map[0]; line < token.map[1]; line += 1) {
                if (lineMap[line] == null)
                    lineMap[line] = [];
                lineMap[line].push({
                    tag: tag,
                    index: tokenTagCount[token.level][tag] || 0,
                });
            }
        }
        const ttc = tokenTagCount[token.level][tag];
        tokenTagCount[token.level][tag] = ttc ? ttc + 1 : 1;
    }
    return lineMap;
}
exports.buildLineMap = buildLineMap;
function mathJaxScript(texConfig) {
    return `\
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    jax: ["input/TeX","output/HTML-CSS"],
    extensions: ["[a11y]/accessibility-menu.js"],
    'HTML-CSS': {
      availableFonts: [],
      webFont: 'TeX',
      undefinedFamily: ${JSON.stringify(util_1.atomConfig().mathConfig.undefinedFamily)},
      mtextFontInherit: true,
    },
    TeX: ${JSON.stringify(texConfig, undefined, 2)},
    showMathMenu: true
  });
</script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js"></script>`;
}
function mkHtml(title, html, renderLaTeX, texConfig) {
    let maybeMathJaxScript;
    if (renderLaTeX) {
        maybeMathJaxScript = mathJaxScript(texConfig);
    }
    else {
        maybeMathJaxScript = '';
    }
    return `\
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>${title}</title>${maybeMathJaxScript}
    <style>${getMarkdownPreviewCSS()}</style>
${html.head.innerHTML}
  </head>
  <body>
    ${html.body.innerHTML}
  </body>
</html>
`;
}
exports.mkHtml = mkHtml;
function destroy(item) {
    const pane = atom.workspace.paneForItem(item);
    if (pane)
        util_1.handlePromise(pane.destroyItem(item));
}
exports.destroy = destroy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXJrZG93bi1wcmV2aWV3LXZpZXcvdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDZCQUE0QjtBQUM1Qix5QkFBd0I7QUFFeEIsa0NBQW1EO0FBRW5ELFNBQWdCLFdBQVcsQ0FBQyxRQUFnQjtJQUMxQyxLQUFLLE1BQU0sTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLEVBQUU7UUFDcEQsSUFBSSxNQUFNLENBQUMsRUFBRSxLQUFLLFFBQVEsRUFBRTtZQUMxQixPQUFPLE1BQU0sQ0FBQTtTQUNkO0tBQ0Y7SUFDRCxPQUFPLFNBQVMsQ0FBQTtBQUNsQixDQUFDO0FBUEQsa0NBT0M7QUFHRCxJQUFJLGlCQUFpQixHQUF3QyxTQUFTLENBQUE7QUFFdEUsU0FBZ0Isc0JBQXNCLENBQUMsQ0FBMkI7SUFDaEUsaUJBQWlCLEdBQUcsQ0FBQyxDQUFBO0FBQ3ZCLENBQUM7QUFGRCx3REFFQztBQUVELFNBQVMsU0FBUyxDQUFDLE9BQWU7SUFDaEMsTUFBTSxnQkFBZ0IsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUM3QyxhQUFhLENBQzhDLENBQUE7SUFDN0QsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN4QyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBR2pELE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQ2hELENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBRSxZQUFpQyxDQUFDLFNBQVMsQ0FDL0QsQ0FBQTtBQUNILENBQUM7QUFFRCxTQUFTLGNBQWMsQ0FBQyxJQUFZO0lBQ2xDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLEdBQUcsSUFBSSxPQUFPLENBQUMsQ0FDbEUsQ0FBQTtBQUNILENBQUM7QUFFRCxTQUFnQixhQUFhO0lBQzNCLE1BQU0sRUFBRSxHQUNOLElBQUksQ0FBQyxNQUFNLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUE7SUFDNUUsSUFBSSxDQUFDLEVBQUU7UUFBRSxPQUFPLEVBQUUsQ0FBQTtJQUNsQixPQUFPLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBQ3ZCLENBQUM7QUFMRCxzQ0FLQztBQUVELFNBQWdCLGdCQUFnQixDQUFDLE9BQWdCO0lBQy9DLElBQUksaUJBQWlCO1FBQUUsT0FBTyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUN4RCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUE7SUFDakIsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLG1CQUFtQixDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUNwRCxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsbUJBQW1CLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRWxFLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUE7SUFDdEMsSUFBSSxPQUFPO1FBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQTtJQUNuRCxJQUFJLGlCQUFVLEVBQUUsQ0FBQyxjQUFjLEVBQUU7UUFDL0IsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtRQUNyQyxJQUFJLGlCQUFVLEVBQUUsQ0FBQyx3QkFBd0IsRUFBRTtZQUN6QyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFBO1NBQzNDO1FBQ0QsSUFBSSxpQkFBVSxFQUFFLENBQUMsMkJBQTJCLEVBQUU7WUFDNUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFBO1NBQ2xEO0tBQ0Y7U0FBTTtRQUNMLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUE7S0FDdkM7SUFDRCxPQUFPLE1BQU0sQ0FBQTtBQUNmLENBQUM7QUFwQkQsNENBb0JDO0FBRUQsU0FBUyxtQkFBbUIsQ0FBQyxNQUFnQjtJQUMzQyxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUN0QixDQUFDLENBQUMsT0FBTyxDQUFDLHVCQUF1QixFQUFFLG1CQUFtQixDQUFDLENBQ3hELENBQUE7QUFDSCxDQUFDO0FBRUQsU0FBUyxxQkFBcUI7SUFDNUIsTUFBTSxZQUFZLEdBQUcscURBQXFELENBQUE7SUFFMUUsT0FBTyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUM7U0FDM0IsSUFBSSxDQUFDLElBQUksQ0FBQztTQUNWLE9BQU8sQ0FBQyxZQUFZLEVBQUUsVUFDckIsTUFBTSxFQUNOLFVBQWtCLEVBQ2xCLE9BQU8sRUFDUCxPQUFPO1FBR1AsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsY0FBYyxFQUFFLFVBQVUsQ0FBQyxDQUFBO1FBQ2xFLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQ3pELE1BQU0sVUFBVSxHQUFHLElBQUksTUFBTSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDeEUsT0FBTywrQkFBK0IsVUFBVSxJQUFJLENBQUE7SUFDdEQsQ0FBQyxDQUFDLENBQUE7QUFDTixDQUFDO0FBUUQsU0FBUyxTQUFTLENBQUMsS0FBWTtJQUM3QixJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssTUFBTSxFQUFFO1FBQ3hCLE9BQU8sTUFBTSxDQUFBO0tBQ2Q7SUFDRCxJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssTUFBTSxFQUFFO1FBQ3hCLE9BQU8sa0JBQWtCLENBQUE7S0FDMUI7SUFDRCxJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssRUFBRSxFQUFFO1FBQ3BCLE9BQU8sSUFBSSxDQUFBO0tBQ1o7SUFDRCxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUE7QUFDbEIsQ0FBQztBQWVELFNBQWdCLFlBQVksQ0FBQyxNQUFzQztJQUNqRSxNQUFNLE9BQU8sR0FBOEQsRUFBRSxDQUFBO0lBQzdFLE1BQU0sYUFBYSxHQUFrRCxFQUFFLENBQUE7SUFDdkUsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtJQUVyQixLQUFLLE1BQU0sS0FBSyxJQUFJLE1BQU0sRUFBRTtRQUMxQixJQUFJLEtBQUssQ0FBQyxNQUFNO1lBQUUsU0FBUTtRQUUxQixJQUFJLEtBQUssQ0FBQyxHQUFHLElBQUksSUFBSTtZQUFFLFNBQVE7UUFFL0IsTUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQzVCLElBQUksR0FBRyxLQUFLLElBQUk7WUFBRSxTQUFRO1FBRTFCLElBQUksS0FBSyxDQUFDLE9BQU8sS0FBSyxDQUFDLEVBQUU7WUFFdkIsS0FBSyxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLEVBQUU7Z0JBRTVELElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUk7b0JBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQTtnQkFDN0MsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQztvQkFDakIsR0FBRyxFQUFFLEdBQUc7b0JBQ1IsS0FBSyxFQUFFLGFBQWEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztpQkFDNUMsQ0FBQyxDQUFBO2FBQ0g7WUFDRCxhQUFhLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7U0FDcEM7YUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLEtBQUssQ0FBQyxFQUFFO1lBRTlCLEtBQUssSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxFQUFFO2dCQUU1RCxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJO29CQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUE7Z0JBQzdDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUM7b0JBQ2pCLEdBQUcsRUFBRSxHQUFHO29CQUNSLEtBQUssRUFBRSxhQUFhLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7aUJBQzVDLENBQUMsQ0FBQTthQUNIO1NBQ0Y7UUFDRCxNQUFNLEdBQUcsR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQzNDLGFBQWEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDcEQ7SUFFRCxPQUFPLE9BQU8sQ0FBQTtBQUNoQixDQUFDO0FBeENELG9DQXdDQztBQUVELFNBQVMsYUFBYSxDQUFDLFNBQW9DO0lBQ3pELE9BQU87Ozs7Ozs7O3lCQVFnQixJQUFJLENBQUMsU0FBUyxDQUMvQixpQkFBVSxFQUFFLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FDeEM7OztXQUdJLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7Ozs7K0dBSTZELENBQUE7QUFDL0csQ0FBQztBQUVELFNBQWdCLE1BQU0sQ0FDcEIsS0FBYSxFQUNiLElBQWtCLEVBQ2xCLFdBQW9CLEVBQ3BCLFNBQW9DO0lBRXBDLElBQUksa0JBQTBCLENBQUE7SUFDOUIsSUFBSSxXQUFXLEVBQUU7UUFDZixrQkFBa0IsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUE7S0FDOUM7U0FBTTtRQUNMLGtCQUFrQixHQUFHLEVBQUUsQ0FBQTtLQUN4QjtJQUNELE9BQU87Ozs7O2FBS0ksS0FBSyxXQUFXLGtCQUFrQjthQUNsQyxxQkFBcUIsRUFBRTtFQUNsQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVM7OztNQUdmLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUzs7O0NBR3hCLENBQUE7QUFDRCxDQUFDO0FBMUJELHdCQTBCQztBQUVELFNBQWdCLE9BQU8sQ0FBQyxJQUFZO0lBQ2xDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzdDLElBQUksSUFBSTtRQUFFLG9CQUFhLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0FBQ2pELENBQUM7QUFIRCwwQkFHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRleHRFZGl0b3IsIFN0eWxlTWFuYWdlciB9IGZyb20gJ2F0b20nXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcydcbmltcG9ydCB7IFRva2VuIH0gZnJvbSAnbWFya2Rvd24taXQnXG5pbXBvcnQgeyBoYW5kbGVQcm9taXNlLCBhdG9tQ29uZmlnIH0gZnJvbSAnLi4vdXRpbCdcblxuZXhwb3J0IGZ1bmN0aW9uIGVkaXRvckZvcklkKGVkaXRvcklkOiBudW1iZXIpOiBUZXh0RWRpdG9yIHwgdW5kZWZpbmVkIHtcbiAgZm9yIChjb25zdCBlZGl0b3Igb2YgYXRvbS53b3Jrc3BhY2UuZ2V0VGV4dEVkaXRvcnMoKSkge1xuICAgIGlmIChlZGl0b3IuaWQgPT09IGVkaXRvcklkKSB7XG4gICAgICByZXR1cm4gZWRpdG9yXG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWRcbn1cblxuLy8gdGhpcyB3ZWlyZG5lc3MgYWxsb3dzIG92ZXJyaWRpbmcgaW4gdGVzdHNcbmxldCBnZXRTdHlsZXNPdmVycmlkZTogdHlwZW9mIGdldFByZXZpZXdTdHlsZXMgfCB1bmRlZmluZWQgPSB1bmRlZmluZWRcblxuZXhwb3J0IGZ1bmN0aW9uIF9fc2V0R2V0U3R5bGVzT3ZlcnJpZGUoZj86IHR5cGVvZiBnZXRQcmV2aWV3U3R5bGVzKSB7XG4gIGdldFN0eWxlc092ZXJyaWRlID0gZlxufVxuXG5mdW5jdGlvbiBnZXRTdHlsZXMoY29udGV4dDogc3RyaW5nKTogc3RyaW5nW10ge1xuICBjb25zdCB0ZXh0RWRpdG9yU3R5bGVzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcbiAgICAnYXRvbS1zdHlsZXMnLFxuICApIGFzIEhUTUxFbGVtZW50ICYgeyBpbml0aWFsaXplKHN0eWxlczogU3R5bGVNYW5hZ2VyKTogdm9pZCB9XG4gIHRleHRFZGl0b3JTdHlsZXMuaW5pdGlhbGl6ZShhdG9tLnN0eWxlcylcbiAgdGV4dEVkaXRvclN0eWxlcy5zZXRBdHRyaWJ1dGUoJ2NvbnRleHQnLCBjb250ZXh0KVxuXG4gIC8vIEV4dHJhY3Qgc3R5bGUgZWxlbWVudHMgY29udGVudFxuICByZXR1cm4gQXJyYXkuZnJvbSh0ZXh0RWRpdG9yU3R5bGVzLmNoaWxkTm9kZXMpLm1hcChcbiAgICAoc3R5bGVFbGVtZW50KSA9PiAoc3R5bGVFbGVtZW50IGFzIEhUTUxTdHlsZUVsZW1lbnQpLmlubmVyVGV4dCxcbiAgKVxufVxuXG5mdW5jdGlvbiBnZXRDbGllbnRTdHlsZShmaWxlOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gYXRvbS50aGVtZXMubG9hZFN0eWxlc2hlZXQoXG4gICAgcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uJywgJy4uJywgJ3N0eWxlcy1jbGllbnQnLCBgJHtmaWxlfS5sZXNzYCksXG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFVzZXJTdHlsZXMoKSB7XG4gIGNvbnN0IGVsID1cbiAgICBhdG9tLnN0eWxlcy5zdHlsZUVsZW1lbnRzQnlTb3VyY2VQYXRoW2F0b20uc3R5bGVzLmdldFVzZXJTdHlsZVNoZWV0UGF0aCgpXVxuICBpZiAoIWVsKSByZXR1cm4gW11cbiAgcmV0dXJuIFtlbC5pbm5lclRleHRdXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQcmV2aWV3U3R5bGVzKGRpc3BsYXk6IGJvb2xlYW4pOiBzdHJpbmdbXSB7XG4gIGlmIChnZXRTdHlsZXNPdmVycmlkZSkgcmV0dXJuIGdldFN0eWxlc092ZXJyaWRlKGRpc3BsYXkpXG4gIGNvbnN0IHN0eWxlcyA9IFtdXG4gIHN0eWxlcy5wdXNoKC4uLnByb2Nlc3NFZGl0b3JTdHlsZXMoZ2V0VXNlclN0eWxlcygpKSlcbiAgc3R5bGVzLnB1c2goLi4ucHJvY2Vzc0VkaXRvclN0eWxlcyhnZXRTdHlsZXMoJ2F0b20tdGV4dC1lZGl0b3InKSkpXG5cbiAgc3R5bGVzLnB1c2goZ2V0Q2xpZW50U3R5bGUoJ2dlbmVyaWMnKSlcbiAgaWYgKGRpc3BsYXkpIHN0eWxlcy5wdXNoKGdldENsaWVudFN0eWxlKCdkaXNwbGF5JykpXG4gIGlmIChhdG9tQ29uZmlnKCkudXNlR2l0SHViU3R5bGUpIHtcbiAgICBzdHlsZXMucHVzaChnZXRDbGllbnRTdHlsZSgnZ2l0aHViJykpXG4gICAgaWYgKGF0b21Db25maWcoKS51c2VHaXRIdWJTdHlsZUNvZGVCbG9ja3MpIHtcbiAgICAgIHN0eWxlcy5wdXNoKGdldENsaWVudFN0eWxlKCdnaXRodWItY29kZScpKVxuICAgIH1cbiAgICBpZiAoYXRvbUNvbmZpZygpLmRhcmtlbkdpdEh1YlN0eWxlQ29kZUJsb2Nrcykge1xuICAgICAgc3R5bGVzLnB1c2goZ2V0Q2xpZW50U3R5bGUoJ2dpdGh1Yi1jb2RlLWRhcmtlbicpKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzdHlsZXMucHVzaChnZXRDbGllbnRTdHlsZSgnZGVmYXVsdCcpKVxuICB9XG4gIHJldHVybiBzdHlsZXNcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0VkaXRvclN0eWxlcyhzdHlsZXM6IHN0cmluZ1tdKSB7XG4gIHJldHVybiBzdHlsZXMubWFwKCh4KSA9PlxuICAgIHgucmVwbGFjZSgvXFxiYXRvbS10ZXh0LWVkaXRvclxcYi9nLCAncHJlLmVkaXRvci1jb2xvcnMnKSxcbiAgKVxufVxuXG5mdW5jdGlvbiBnZXRNYXJrZG93blByZXZpZXdDU1MoKSB7XG4gIGNvbnN0IGNzc1VybFJlZkV4cCA9IC91cmxcXChhdG9tOlxcL1xcL21hcmtkb3duLXByZXZpZXctcGx1c1xcL2Fzc2V0c1xcLyguKilcXCkvXG5cbiAgcmV0dXJuIGdldFByZXZpZXdTdHlsZXMoZmFsc2UpXG4gICAgLmpvaW4oJ1xcbicpXG4gICAgLnJlcGxhY2UoY3NzVXJsUmVmRXhwLCBmdW5jdGlvbihcbiAgICAgIF9tYXRjaCxcbiAgICAgIGFzc2V0c05hbWU6IHN0cmluZyxcbiAgICAgIF9vZmZzZXQsXG4gICAgICBfc3RyaW5nLFxuICAgICkge1xuICAgICAgLy8gYmFzZTY0IGVuY29kZSBhc3NldHNcbiAgICAgIGNvbnN0IGFzc2V0UGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi8uLi9hc3NldHMnLCBhc3NldHNOYW1lKVxuICAgICAgY29uc3Qgb3JpZ2luYWxEYXRhID0gZnMucmVhZEZpbGVTeW5jKGFzc2V0UGF0aCwgJ2JpbmFyeScpXG4gICAgICBjb25zdCBiYXNlNjREYXRhID0gbmV3IEJ1ZmZlcihvcmlnaW5hbERhdGEsICdiaW5hcnknKS50b1N0cmluZygnYmFzZTY0JylcbiAgICAgIHJldHVybiBgdXJsKCdkYXRhOmltYWdlL2pwZWc7YmFzZTY0LCR7YmFzZTY0RGF0YX0nKWBcbiAgICB9KVxufVxuXG4vL1xuLy8gRGVjb2RlIHRhZ3MgdXNlZCBieSBtYXJrZG93bi1pdFxuLy9cbi8vIEBwYXJhbSB7bWFya2Rvd24taXQuVG9rZW59IHRva2VuIERlY29kZSB0aGUgdGFnIG9mIHRva2VuLlxuLy8gQHJldHVybiB7c3RyaW5nfG51bGx9IERlY29kZWQgdGFnIG9yIGBudWxsYCBpZiB0aGUgdG9rZW4gaGFzIG5vIHRhZy5cbi8vXG5mdW5jdGlvbiBkZWNvZGVUYWcodG9rZW46IFRva2VuKTogc3RyaW5nIHwgbnVsbCB7XG4gIGlmICh0b2tlbi50YWcgPT09ICdtYXRoJykge1xuICAgIHJldHVybiAnc3BhbidcbiAgfVxuICBpZiAodG9rZW4udGFnID09PSAnY29kZScpIHtcbiAgICByZXR1cm4gJ2F0b20tdGV4dC1lZGl0b3InXG4gIH1cbiAgaWYgKHRva2VuLnRhZyA9PT0gJycpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG4gIHJldHVybiB0b2tlbi50YWdcbn1cblxuLy9cbi8vIERldGVybWluZSBwYXRoIHRvIGEgdGFyZ2V0IHRva2VuLlxuLy9cbi8vIEBwYXJhbSB7KG1hcmtkb3duLWl0LlRva2VuKVtdfSB0b2tlbnMgQXJyYXkgb2YgdG9rZW5zIGFzIHJldHVybmVkIGJ5XG4vLyAgIGBtYXJrZG93bi1pdC5wYXJzZSgpYC5cbi8vIEBwYXJhbSB7bnVtYmVyfSBsaW5lIExpbmUgcmVwcmVzZW50aW5nIHRoZSB0YXJnZXQgdG9rZW4uXG4vLyBAcmV0dXJuIHsodGFnOiA8dGFnPiwgaW5kZXg6IDxpbmRleD4pW119IEFycmF5IHJlcHJlc2VudGluZyBhIHBhdGggdG8gdGhlXG4vLyAgIHRhcmdldCB0b2tlbi4gVGhlIHJvb3QgdG9rZW4gaXMgcmVwcmVzZW50ZWQgYnkgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlXG4vLyAgIGFycmF5IGFuZCB0aGUgdGFyZ2V0IHRva2VuIGJ5IHRoZSBsYXN0IGVsbWVudC4gRWFjaCBlbGVtZW50IGNvbnNpc3RzIG9mIGFcbi8vICAgYHRhZ2AgYW5kIGBpbmRleGAgcmVwcmVzZW50aW5nIGl0cyBpbmRleCBhbW9uZ3N0IGl0cyBzaWJsaW5nIHRva2VucyBpblxuLy8gICBgdG9rZW5zYCBvZiB0aGUgc2FtZSBgdGFnYC4gYGxpbmVgIHdpbGwgbGllIGJldHdlZW4gdGhlIHByb3BlcnRpZXNcbi8vICAgYG1hcFswXWAgYW5kIGBtYXBbMV1gIG9mIHRoZSB0YXJnZXQgdG9rZW4uXG4vL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkTGluZU1hcCh0b2tlbnM6IFJlYWRvbmx5QXJyYXk8UmVhZG9ubHk8VG9rZW4+Pikge1xuICBjb25zdCBsaW5lTWFwOiB7IFtsaW5lOiBudW1iZXJdOiBBcnJheTx7IHRhZzogc3RyaW5nOyBpbmRleDogbnVtYmVyIH0+IH0gPSB7fVxuICBjb25zdCB0b2tlblRhZ0NvdW50OiB7IFtsaW5lOiBudW1iZXJdOiB7IFt0YWc6IHN0cmluZ106IG51bWJlciB9IH0gPSB7fVxuICB0b2tlblRhZ0NvdW50WzBdID0ge31cblxuICBmb3IgKGNvbnN0IHRva2VuIG9mIHRva2Vucykge1xuICAgIGlmICh0b2tlbi5oaWRkZW4pIGNvbnRpbnVlXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnN0cmljdC10eXBlLXByZWRpY2F0ZXMgLy8gVE9ETzogY29tcGxhaW4gb24gRFRcbiAgICBpZiAodG9rZW4ubWFwID09IG51bGwpIGNvbnRpbnVlXG5cbiAgICBjb25zdCB0YWcgPSBkZWNvZGVUYWcodG9rZW4pXG4gICAgaWYgKHRhZyA9PT0gbnVsbCkgY29udGludWVcblxuICAgIGlmICh0b2tlbi5uZXN0aW5nID09PSAxKSB7XG4gICAgICAvLyBvcGVuaW5nIHRhZ1xuICAgICAgZm9yIChsZXQgbGluZSA9IHRva2VuLm1hcFswXTsgbGluZSA8IHRva2VuLm1hcFsxXTsgbGluZSArPSAxKSB7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzdHJpY3QtdHlwZS1wcmVkaWNhdGVzXG4gICAgICAgIGlmIChsaW5lTWFwW2xpbmVdID09IG51bGwpIGxpbmVNYXBbbGluZV0gPSBbXVxuICAgICAgICBsaW5lTWFwW2xpbmVdLnB1c2goe1xuICAgICAgICAgIHRhZzogdGFnLFxuICAgICAgICAgIGluZGV4OiB0b2tlblRhZ0NvdW50W3Rva2VuLmxldmVsXVt0YWddIHx8IDAsXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICB0b2tlblRhZ0NvdW50W3Rva2VuLmxldmVsICsgMV0gPSB7fVxuICAgIH0gZWxzZSBpZiAodG9rZW4ubmVzdGluZyA9PT0gMCkge1xuICAgICAgLy8gc2VsZi1jbG9zaW5nIHRhZ1xuICAgICAgZm9yIChsZXQgbGluZSA9IHRva2VuLm1hcFswXTsgbGluZSA8IHRva2VuLm1hcFsxXTsgbGluZSArPSAxKSB7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzdHJpY3QtdHlwZS1wcmVkaWNhdGVzXG4gICAgICAgIGlmIChsaW5lTWFwW2xpbmVdID09IG51bGwpIGxpbmVNYXBbbGluZV0gPSBbXVxuICAgICAgICBsaW5lTWFwW2xpbmVdLnB1c2goe1xuICAgICAgICAgIHRhZzogdGFnLFxuICAgICAgICAgIGluZGV4OiB0b2tlblRhZ0NvdW50W3Rva2VuLmxldmVsXVt0YWddIHx8IDAsXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHR0YyA9IHRva2VuVGFnQ291bnRbdG9rZW4ubGV2ZWxdW3RhZ11cbiAgICB0b2tlblRhZ0NvdW50W3Rva2VuLmxldmVsXVt0YWddID0gdHRjID8gdHRjICsgMSA6IDFcbiAgfVxuXG4gIHJldHVybiBsaW5lTWFwXG59XG5cbmZ1bmN0aW9uIG1hdGhKYXhTY3JpcHQodGV4Q29uZmlnOiBNYXRoSmF4LlRlWElucHV0UHJvY2Vzc29yKSB7XG4gIHJldHVybiBgXFxcbjxzY3JpcHQgdHlwZT1cInRleHQveC1tYXRoamF4LWNvbmZpZ1wiPlxuICBNYXRoSmF4Lkh1Yi5Db25maWcoe1xuICAgIGpheDogW1wiaW5wdXQvVGVYXCIsXCJvdXRwdXQvSFRNTC1DU1NcIl0sXG4gICAgZXh0ZW5zaW9uczogW1wiW2ExMXldL2FjY2Vzc2liaWxpdHktbWVudS5qc1wiXSxcbiAgICAnSFRNTC1DU1MnOiB7XG4gICAgICBhdmFpbGFibGVGb250czogW10sXG4gICAgICB3ZWJGb250OiAnVGVYJyxcbiAgICAgIHVuZGVmaW5lZEZhbWlseTogJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgYXRvbUNvbmZpZygpLm1hdGhDb25maWcudW5kZWZpbmVkRmFtaWx5LFxuICAgICAgKX0sXG4gICAgICBtdGV4dEZvbnRJbmhlcml0OiB0cnVlLFxuICAgIH0sXG4gICAgVGVYOiAke0pTT04uc3RyaW5naWZ5KHRleENvbmZpZywgdW5kZWZpbmVkLCAyKX0sXG4gICAgc2hvd01hdGhNZW51OiB0cnVlXG4gIH0pO1xuPC9zY3JpcHQ+XG48c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIiBzcmM9XCJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9tYXRoamF4LzIuNy40L01hdGhKYXguanNcIj48L3NjcmlwdD5gXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBta0h0bWwoXG4gIHRpdGxlOiBzdHJpbmcsXG4gIGh0bWw6IEhUTUxEb2N1bWVudCxcbiAgcmVuZGVyTGFUZVg6IGJvb2xlYW4sXG4gIHRleENvbmZpZzogTWF0aEpheC5UZVhJbnB1dFByb2Nlc3Nvcixcbikge1xuICBsZXQgbWF5YmVNYXRoSmF4U2NyaXB0OiBzdHJpbmdcbiAgaWYgKHJlbmRlckxhVGVYKSB7XG4gICAgbWF5YmVNYXRoSmF4U2NyaXB0ID0gbWF0aEpheFNjcmlwdCh0ZXhDb25maWcpXG4gIH0gZWxzZSB7XG4gICAgbWF5YmVNYXRoSmF4U2NyaXB0ID0gJydcbiAgfVxuICByZXR1cm4gYFxcXG48IURPQ1RZUEUgaHRtbD5cbjxodG1sPlxuICA8aGVhZD5cbiAgICA8bWV0YSBjaGFyc2V0PVwidXRmLThcIiAvPlxuICAgIDx0aXRsZT4ke3RpdGxlfTwvdGl0bGU+JHttYXliZU1hdGhKYXhTY3JpcHR9XG4gICAgPHN0eWxlPiR7Z2V0TWFya2Rvd25QcmV2aWV3Q1NTKCl9PC9zdHlsZT5cbiR7aHRtbC5oZWFkLmlubmVySFRNTH1cbiAgPC9oZWFkPlxuICA8Ym9keT5cbiAgICAke2h0bWwuYm9keS5pbm5lckhUTUx9XG4gIDwvYm9keT5cbjwvaHRtbD5cbmAgLy8gRW5zdXJlIHRyYWlsaW5nIG5ld2xpbmVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3koaXRlbTogb2JqZWN0KSB7XG4gIGNvbnN0IHBhbmUgPSBhdG9tLndvcmtzcGFjZS5wYW5lRm9ySXRlbShpdGVtKVxuICBpZiAocGFuZSkgaGFuZGxlUHJvbWlzZShwYW5lLmRlc3Ryb3lJdGVtKGl0ZW0pKVxufVxuIl19