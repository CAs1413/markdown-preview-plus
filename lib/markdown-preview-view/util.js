"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
const util_1 = require("../util");
function editorForId(editorId) {
    for (const editor of atom.workspace.getTextEditors()) {
        if (editor.id === editorId) {
            return editor;
        }
    }
    return undefined;
}
exports.editorForId = editorForId;
let getStylesOverride = undefined;
function __setGetStylesOverride(f) {
    getStylesOverride = f;
}
exports.__setGetStylesOverride = __setGetStylesOverride;
function getStyles(context) {
    if (getStylesOverride)
        return getStylesOverride(context);
    const textEditorStyles = document.createElement('atom-styles');
    textEditorStyles.initialize(atom.styles);
    textEditorStyles.setAttribute('context', context);
    return Array.from(textEditorStyles.childNodes).map((styleElement) => styleElement.innerText);
}
exports.getStyles = getStyles;
function getMarkdownPreviewCSS() {
    const markdowPreviewRules = ['body { padding: 0; margin: 0; }'];
    const cssUrlRefExp = /url\(atom:\/\/markdown-preview-plus\/assets\/(.*)\)/;
    return markdowPreviewRules
        .concat(getStyles('markdown-preview-plus'))
        .concat(getStyles('atom-text-editor'))
        .join('\n')
        .replace(/atom-text-editor/g, 'pre.editor-colors')
        .replace(cssUrlRefExp, function (_match, assetsName, _offset, _string) {
        const assetPath = path.join(__dirname, '../../assets', assetsName);
        const originalData = fs.readFileSync(assetPath, 'binary');
        const base64Data = new Buffer(originalData, 'binary').toString('base64');
        return `url('data:image/jpeg;base64,${base64Data}')`;
    });
}
exports.getMarkdownPreviewCSS = getMarkdownPreviewCSS;
function bubbleToContainerElement(element) {
    let testElement = element;
    for (;;) {
        const parent = testElement.parentElement;
        if (!parent)
            break;
        if (parent.classList.contains('MathJax_Display')) {
            return parent.parentElement;
        }
        if (parent.classList.contains('atom-text-editor')) {
            return parent;
        }
        testElement = parent;
    }
    return element;
}
exports.bubbleToContainerElement = bubbleToContainerElement;
function bubbleToContainerToken(pathToToken) {
    const end = pathToToken.length - 1;
    for (let i = 0; i <= end; i++) {
        if (pathToToken[i].tag === 'table') {
            return pathToToken.slice(0, i + 1);
        }
    }
    return pathToToken;
}
exports.bubbleToContainerToken = bubbleToContainerToken;
function encodeTag(element) {
    if (element.classList.contains('math')) {
        return 'math';
    }
    if (element.classList.contains('atom-text-editor')) {
        return 'code';
    }
    return element.tagName.toLowerCase();
}
exports.encodeTag = encodeTag;
function decodeTag(token) {
    if (token.tag === 'math') {
        return 'span';
    }
    if (token.tag === 'code') {
        return 'span';
    }
    if (token.tag === '') {
        return null;
    }
    return token.tag;
}
exports.decodeTag = decodeTag;
function getPathToElement(element) {
    if (element.tagName.toLowerCase() === 'markdown-preview-plus-view') {
        return [
            {
                tag: 'div',
                index: 0,
            },
        ];
    }
    element = bubbleToContainerElement(element);
    const tag = encodeTag(element);
    const siblings = element.parentElement.children;
    let siblingsCount = 0;
    for (const sibling of Array.from(siblings)) {
        const siblingTag = sibling.nodeType === 1 ? encodeTag(sibling) : null;
        if (sibling === element) {
            const pathToElement = getPathToElement(element.parentElement);
            pathToElement.push({
                tag,
                index: siblingsCount,
            });
            return pathToElement;
        }
        else if (siblingTag === tag) {
            siblingsCount++;
        }
    }
    throw new Error('failure in getPathToElement');
}
exports.getPathToElement = getPathToElement;
function getPathToToken(tokens, line) {
    let pathToToken = [];
    let tokenTagCount = {};
    let level = 0;
    for (const token of tokens) {
        if (token.level < level) {
            break;
        }
        if (token.hidden) {
            continue;
        }
        if (token.nesting === -1) {
            continue;
        }
        const tag = decodeTag(token);
        if (tag === null) {
            continue;
        }
        token.tag = tag;
        if (token.map != null &&
            line >= token.map[0] &&
            line <= token.map[1] - 1) {
            if (token.nesting === 1) {
                pathToToken.push({
                    tag: token.tag,
                    index: tokenTagCount[token.tag] || 0,
                });
                tokenTagCount = {};
                level++;
            }
            else if (token.nesting === 0) {
                pathToToken.push({
                    tag: token.tag,
                    index: tokenTagCount[token.tag] || 0,
                });
                break;
            }
        }
        else if (token.level === level) {
            if (tokenTagCount[token.tag] !== undefined) {
                tokenTagCount[token.tag]++;
            }
            else {
                tokenTagCount[token.tag] = 1;
            }
        }
    }
    pathToToken = bubbleToContainerToken(pathToToken);
    return pathToToken;
}
exports.getPathToToken = getPathToToken;
exports.mathJaxScript = `\
<script type="text/x-mathjax-config">
MathJax.Hub.Config({
jax: ["input/TeX","output/HTML-CSS"],
extensions: [],
TeX: {
extensions: ["AMSmath.js","AMSsymbols.js","noErrors.js","noUndefined.js"]
},
showMathMenu: false
});
</script>
<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js">
</script>\
`;
function mkHtml(title, html, renderLaTeX, useGithubStyle) {
    const githubStyle = useGithubStyle ? ' data-use-github-style' : '';
    let maybeMathJaxScript;
    if (renderLaTeX) {
        maybeMathJaxScript = exports.mathJaxScript;
    }
    else {
        maybeMathJaxScript = '';
    }
    return `\
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>${title}</title>${maybeMathJaxScript}
    <style>${getMarkdownPreviewCSS()}</style>
${html.head}
  </head>
  <body>
    <markdown-preview-plus-view${githubStyle}>
      ${html.body}
    </markdown-preview-plus-view>
  </body>
</html>
`;
}
exports.mkHtml = mkHtml;
function destroy(item) {
    const pane = atom.workspace.paneForItem(item);
    if (pane)
        util_1.handlePromise(pane.destroyItem(item));
}
exports.destroy = destroy;
//# sourceMappingURL=data:application/json;base64,