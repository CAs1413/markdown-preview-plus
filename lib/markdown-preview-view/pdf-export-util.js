"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const webview_handler_1 = require("./webview-handler");
const util_1 = require("../util");
const renderer_1 = require("../renderer");
const fs_1 = require("fs");
async function saveAsPDF(text, filePath, grammar, renderLaTeX, saveFilePath) {
    const view = new webview_handler_1.WebviewHandler(async () => {
        const opts = util_1.atomConfig().saveConfig.saveToPDFOptions;
        const pageSize = opts.pageSize === 'Custom'
            ? parsePageSize(opts.customPageSize)
            : opts.pageSize;
        if (pageSize === undefined) {
            throw new Error(`Failed to parse custom page size: ${opts.customPageSize}`);
        }
        const selection = await view.getSelection();
        const printSelectionOnly = selection ? opts.printSelectionOnly : false;
        const newOpts = Object.assign({}, opts, { pageSize,
            printSelectionOnly });
        const [width, height] = getPageWidth(newOpts.pageSize);
        const mathConfig = util_1.atomConfig().mathConfig;
        const pdfRenderer = util_1.atomConfig().saveConfig.saveToPDFOptions.latexRenderer;
        const renderer = pdfRenderer === 'Same as live preview'
            ? mathConfig.latexRenderer
            : pdfRenderer;
        view.init({
            atomHome: atom.getConfigDirPath(),
            mathJaxConfig: Object.assign({}, mathConfig, { latexRenderer: renderer }),
            context: 'pdf-export',
            pdfExportOptions: { width: newOpts.landscape ? height : width },
        });
        view.setBasePath(filePath);
        const domDocument = await renderer_1.render({
            text,
            filePath,
            grammar,
            renderLaTeX,
            mode: 'normal',
        });
        await view.update(domDocument.documentElement.outerHTML, renderLaTeX);
        try {
            const data = await view.printToPDF(newOpts);
            await new Promise((resolve, reject) => {
                fs_1.writeFile(saveFilePath, data, (error) => {
                    if (error) {
                        reject(error);
                        return;
                    }
                    resolve();
                });
            });
        }
        catch (e) {
            const error = e;
            atom.notifications.addError('Failed saving to PDF', {
                description: error.toString(),
                dismissable: true,
                stack: error.stack,
            });
        }
        view.destroy();
    });
    view.element.style.pointerEvents = 'none';
    view.element.style.position = 'absolute';
    view.element.style.width = '0px';
    view.element.style.height = '0px';
    const ws = atom.views.getView(atom.workspace);
    ws.appendChild(view.element);
}
exports.saveAsPDF = saveAsPDF;
function parsePageSize(size) {
    if (!size)
        return undefined;
    const rx = /^([\d.,]+)(cm|mm|in)?x([\d.,]+)(cm|mm|in)?$/i;
    const res = size.replace(/\s*/g, '').match(rx);
    if (res) {
        const width = parseFloat(res[1]);
        const wunit = res[2];
        const height = parseFloat(res[3]);
        const hunit = res[4];
        return {
            width: convert(width, wunit),
            height: convert(height, hunit),
        };
    }
    else {
        return undefined;
    }
}
function convert(val, unit) {
    return val * unitInMicrons(unit);
}
function unitInMicrons(unit = 'mm') {
    switch (unit) {
        case 'mm':
            return 1000;
        case 'cm':
            return 10000;
        case 'in':
            return 25400;
    }
}
function getPageWidth(pageSize) {
    switch (pageSize) {
        case 'A3':
            return [297, 420];
        case 'A4':
            return [210, 297];
        case 'A5':
            return [148, 210];
        case 'Legal':
            return [216, 356];
        case 'Letter':
            return [216, 279];
        case 'Tabloid':
            return [279, 432];
        default:
            return [pageSize.width / 1000, pageSize.height / 1000];
    }
}
//# sourceMappingURL=data:application/json;base64,