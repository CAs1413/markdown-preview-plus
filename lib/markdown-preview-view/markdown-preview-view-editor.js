"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("./util");
const markdown_preview_view_1 = require("./markdown-preview-view");
class MarkdownPreviewViewEditor extends markdown_preview_view_1.MarkdownPreviewView {
    constructor(editor) {
        super();
        this.editor = editor;
        this.handleEditorEvents();
    }
    static create(editor) {
        let mppv = MarkdownPreviewViewEditor.editorMap.get(editor);
        if (!mppv) {
            mppv = new MarkdownPreviewViewEditor(editor);
            MarkdownPreviewViewEditor.editorMap.set(editor, mppv);
        }
        return mppv;
    }
    static viewForEditor(editor) {
        return MarkdownPreviewViewEditor.editorMap.get(editor);
    }
    destroy() {
        super.destroy();
        MarkdownPreviewViewEditor.editorMap.delete(this.editor);
    }
    serialize() {
        return {
            deserializer: 'markdown-preview-plus/MarkdownPreviewView',
            editorId: this.editor && this.editor.id,
        };
    }
    handleEditorEvents() {
        this.disposables.add(this.editor.getBuffer().onDidStopChanging(() => {
            if (atom.config.get('markdown-preview-plus.liveUpdate')) {
                this.changeHandler();
            }
        }), this.editor.onDidChangePath(() => {
            this.emitter.emit('did-change-title');
        }), this.editor.onDidDestroy(() => {
            util.destroy(this);
        }), this.editor.getBuffer().onDidSave(() => {
            if (!atom.config.get('markdown-preview-plus.liveUpdate')) {
                this.changeHandler();
            }
        }), this.editor.getBuffer().onDidReload(() => {
            if (!atom.config.get('markdown-preview-plus.liveUpdate')) {
                this.changeHandler();
            }
        }), atom.commands.add(atom.views.getView(this.editor), {
            'markdown-preview-plus:sync-preview': async (_event) => {
                const source = await this.getMarkdownSource();
                if (!this.editor)
                    return;
                this.syncPreview(source, this.editor.getCursorBufferPosition().row);
            },
        }));
    }
    async getMarkdownSource() {
        return this.editor.getText();
    }
    getTitle() {
        return `${this.editor.getTitle()} Preview`;
    }
    getURI() {
        return `markdown-preview-plus://editor/${this.editor.id}`;
    }
    getPath() {
        return this.editor.getPath();
    }
    getGrammar() {
        return this.editor.getGrammar();
    }
}
MarkdownPreviewViewEditor.editorMap = new WeakMap();
exports.MarkdownPreviewViewEditor = MarkdownPreviewViewEditor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Rvd24tcHJldmlldy12aWV3LWVkaXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tYXJrZG93bi1wcmV2aWV3LXZpZXcvbWFya2Rvd24tcHJldmlldy12aWV3LWVkaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLCtCQUE4QjtBQUM5QixtRUFBNEU7QUFFNUUsK0JBQXVDLFNBQVEsMkNBQW1CO0lBaUJoRSxZQUE0QixNQUFrQjtRQUM1QyxLQUFLLEVBQUUsQ0FBQTtRQURtQixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBRTVDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFBO0lBQzNCLENBQUM7SUFmTSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQWtCO1FBQ3JDLElBQUksSUFBSSxHQUFHLHlCQUF5QixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDMUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ1YsSUFBSSxHQUFHLElBQUkseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDNUMseUJBQXlCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDdkQsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUE7SUFDYixDQUFDO0lBQ00sTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFrQjtRQUM1QyxNQUFNLENBQUMseUJBQXlCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUN4RCxDQUFDO0lBT0QsT0FBTztRQUNMLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUNmLHlCQUF5QixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3pELENBQUM7SUFFRCxTQUFTO1FBQ1AsTUFBTSxDQUFDO1lBQ0wsWUFBWSxFQUFFLDJDQUEyQztZ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YW1tYXIgfSBmcm9tICdhdG9tJ1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuL3V0aWwnXG5pbXBvcnQgeyBNYXJrZG93blByZXZpZXdWaWV3LCBTZXJpYWxpemVkTVBWIH0gZnJvbSAnLi9tYXJrZG93bi1wcmV2aWV3LXZpZXcnXG5cbmV4cG9ydCBjbGFzcyBNYXJrZG93blByZXZpZXdWaWV3RWRpdG9yIGV4dGVuZHMgTWFya2Rvd25QcmV2aWV3VmlldyB7XG4gIHByaXZhdGUgc3RhdGljIGVkaXRvck1hcCA9IG5ldyBXZWFrTWFwPFxuICAgIFRleHRFZGl0b3IsXG4gICAgTWFya2Rvd25QcmV2aWV3Vmlld0VkaXRvclxuICA+KClcbiAgcHVibGljIHN0YXRpYyBjcmVhdGUoZWRpdG9yOiBUZXh0RWRpdG9yKSB7XG4gICAgbGV0IG1wcHYgPSBNYXJrZG93blByZXZpZXdWaWV3RWRpdG9yLmVkaXRvck1hcC5nZXQoZWRpdG9yKVxuICAgIGlmICghbXBwdikge1xuICAgICAgbXBwdiA9IG5ldyBNYXJrZG93blByZXZpZXdWaWV3RWRpdG9yKGVkaXRvcilcbiAgICAgIE1hcmtkb3duUHJldmlld1ZpZXdFZGl0b3IuZWRpdG9yTWFwLnNldChlZGl0b3IsIG1wcHYpXG4gICAgfVxuICAgIHJldHVybiBtcHB2XG4gIH1cbiAgcHVibGljIHN0YXRpYyB2aWV3Rm9yRWRpdG9yKGVkaXRvcjogVGV4dEVkaXRvcikge1xuICAgIHJldHVybiBNYXJrZG93blByZXZpZXdWaWV3RWRpdG9yLmVkaXRvck1hcC5nZXQoZWRpdG9yKVxuICB9XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3Rvcihwcml2YXRlIGVkaXRvcjogVGV4dEVkaXRvcikge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLmhhbmRsZUVkaXRvckV2ZW50cygpXG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHN1cGVyLmRlc3Ryb3koKVxuICAgIE1hcmtkb3duUHJldmlld1ZpZXdFZGl0b3IuZWRpdG9yTWFwLmRlbGV0ZSh0aGlzLmVkaXRvcilcbiAgfVxuXG4gIHNlcmlhbGl6ZSgpOiBTZXJpYWxpemVkTVBWIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGVzZXJpYWxpemVyOiAnbWFya2Rvd24tcHJldmlldy1wbHVzL01hcmtkb3duUHJldmlld1ZpZXcnLFxuICAgICAgZWRpdG9ySWQ6IHRoaXMuZWRpdG9yICYmIHRoaXMuZWRpdG9yLmlkLFxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlRWRpdG9yRXZlbnRzKCkge1xuICAgIHRoaXMuZGlzcG9zYWJsZXMuYWRkKFxuICAgICAgdGhpcy5lZGl0b3IuZ2V0QnVmZmVyKCkub25EaWRTdG9wQ2hhbmdpbmcoKCkgPT4ge1xuICAgICAgICBpZiAoYXRvbS5jb25maWcuZ2V0KCdtYXJrZG93bi1wcmV2aWV3LXBsdXMubGl2ZVVwZGF0ZScpKSB7XG4gICAgICAgICAgdGhpcy5jaGFuZ2VIYW5kbGVyKClcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICB0aGlzLmVkaXRvci5vbkRpZENoYW5nZVBhdGgoKCkgPT4ge1xuICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLWNoYW5nZS10aXRsZScpXG4gICAgICB9KSxcbiAgICAgIHRoaXMuZWRpdG9yLm9uRGlkRGVzdHJveSgoKSA9PiB7XG4gICAgICAgIHV0aWwuZGVzdHJveSh0aGlzKVxuICAgICAgfSksXG4gICAgICB0aGlzLmVkaXRvci5nZXRCdWZmZXIoKS5vbkRpZFNhdmUoKCkgPT4ge1xuICAgICAgICBpZiAoIWF0b20uY29uZmlnLmdldCgnbWFya2Rvd24tcHJldmlldy1wbHVzLmxpdmVVcGRhdGUnKSkge1xuICAgICAgICAgIHRoaXMuY2hhbmdlSGFuZGxlcigpXG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgdGhpcy5lZGl0b3IuZ2V0QnVmZmVyKCkub25EaWRSZWxvYWQoKCkgPT4ge1xuICAgICAgICBpZiAoIWF0b20uY29uZmlnLmdldCgnbWFya2Rvd24tcHJldmlldy1wbHVzLmxpdmVVcGRhdGUnKSkge1xuICAgICAgICAgIHRoaXMuY2hhbmdlSGFuZGxlcigpXG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgYXRvbS5jb21tYW5kcy5hZGQoYXRvbS52aWV3cy5nZXRWaWV3KHRoaXMuZWRpdG9yKSwge1xuICAgICAgICAnbWFya2Rvd24tcHJldmlldy1wbHVzOnN5bmMtcHJldmlldyc6IGFzeW5jIChfZXZlbnQpID0+IHtcbiAgICAgICAgICBjb25zdCBzb3VyY2UgPSBhd2FpdCB0aGlzLmdldE1hcmtkb3duU291cmNlKClcbiAgICAgICAgICBpZiAoIXRoaXMuZWRpdG9yKSByZXR1cm5cbiAgICAgICAgICB0aGlzLnN5bmNQcmV2aWV3KHNvdXJjZSwgdGhpcy5lZGl0b3IuZ2V0Q3Vyc29yQnVmZmVyUG9zaXRpb24oKS5yb3cpXG4gICAgICAgIH0sXG4gICAgICB9KSxcbiAgICApXG4gIH1cblxuICBhc3luYyBnZXRNYXJrZG93blNvdXJjZSgpIHtcbiAgICByZXR1cm4gdGhpcy5lZGl0b3IuZ2V0VGV4dCgpXG4gIH1cblxuICBnZXRUaXRsZSgpIHtcbiAgICByZXR1cm4gYCR7dGhpcy5lZGl0b3IuZ2V0VGl0bGUoKX0gUHJldmlld2BcbiAgfVxuXG4gIGdldFVSSSgpIHtcbiAgICByZXR1cm4gYG1hcmtkb3duLXByZXZpZXctcGx1czovL2VkaXRvci8ke3RoaXMuZWRpdG9yLmlkfWBcbiAgfVxuXG4gIGdldFBhdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWRpdG9yLmdldFBhdGgoKVxuICB9XG5cbiAgZ2V0R3JhbW1hcigpOiBHcmFtbWFyIHtcbiAgICByZXR1cm4gdGhpcy5lZGl0b3IuZ2V0R3JhbW1hcigpXG4gIH1cbn1cbiJdfQ==