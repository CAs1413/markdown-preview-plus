"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("./util");
const markdown_preview_view_1 = require("./markdown-preview-view");
const util_1 = require("../util");
class MarkdownPreviewViewEditor extends markdown_preview_view_1.MarkdownPreviewView {
    constructor(editor) {
        super();
        this.editor = editor;
        this.syncPreviewHelper = async () => {
            const pos = this.editor.getCursorBufferPosition().row;
            this.syncPreview(pos);
        };
        this.handleEditorEvents();
    }
    static create(editor) {
        let mppv = MarkdownPreviewViewEditor.editorMap.get(editor);
        if (!mppv) {
            mppv = new MarkdownPreviewViewEditor(editor);
            MarkdownPreviewViewEditor.editorMap.set(editor, mppv);
        }
        return mppv;
    }
    static viewForEditor(editor) {
        return MarkdownPreviewViewEditor.editorMap.get(editor);
    }
    destroy() {
        super.destroy();
        MarkdownPreviewViewEditor.editorMap.delete(this.editor);
    }
    serialize() {
        return {
            deserializer: 'markdown-preview-plus/MarkdownPreviewView',
            editorId: this.editor && this.editor.id,
        };
    }
    getTitle() {
        return `${this.editor.getTitle()} Preview`;
    }
    getURI() {
        return `markdown-preview-plus://editor/${this.editor.id}`;
    }
    getPath() {
        return this.editor.getPath();
    }
    async getMarkdownSource() {
        return this.editor.getText();
    }
    getGrammar() {
        return this.editor.getGrammar();
    }
    handleEditorEvents() {
        this.disposables.add(atom.workspace.onDidChangeActiveTextEditor((ed) => {
            if (atom.config.get('markdown-preview-plus.activatePreviewWithEditor')) {
                if (ed === this.editor) {
                    const pane = atom.workspace.paneForItem(this);
                    if (!pane)
                        return;
                    pane.activateItem(this);
                }
            }
        }), this.editor.getBuffer().onDidStopChanging(() => {
            if (atom.config.get('markdown-preview-plus.liveUpdate')) {
                this.changeHandler();
            }
            if (atom.config.get('markdown-preview-plus.syncPreviewOnChange')) {
                util_1.handlePromise(this.syncPreviewHelper());
            }
        }), this.editor.onDidChangePath(() => {
            this.emitter.emit('did-change-title');
        }), this.editor.onDidDestroy(() => {
            if (atom.config.get('markdown-preview-plus.closePreviewWithEditor')) {
                util.destroy(this);
            }
        }), this.editor.getBuffer().onDidSave(() => {
            if (!atom.config.get('markdown-preview-plus.liveUpdate')) {
                this.changeHandler();
            }
        }), this.editor.getBuffer().onDidReload(() => {
            if (!atom.config.get('markdown-preview-plus.liveUpdate')) {
                this.changeHandler();
            }
        }), atom.views.getView(this.editor).onDidChangeScrollTop(() => {
            const [first, last] = this.editor.getVisibleRowRange();
            this.element.send('scroll-sync', {
                firstLine: this.editor.bufferRowForScreenRow(first),
                lastLine: this.editor.bufferRowForScreenRow(last),
            });
        }), atom.commands.add(atom.views.getView(this.editor), {
            'markdown-preview-plus:sync-preview': this.syncPreviewHelper,
        }));
    }
}
MarkdownPreviewViewEditor.editorMap = new WeakMap();
exports.MarkdownPreviewViewEditor = MarkdownPreviewViewEditor;
//# sourceMappingURL=data:application/json;base64,