"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function handlePromise(promise) {
    if (!promise)
        return;
    promise.catch((error) => {
        console.error(error);
        atom.notifications.addFatalError(error.toString(), {
            detail: error.message,
            stack: error.stack,
            dismissable: true,
        });
    });
}
exports.handlePromise = handlePromise;
const fs_1 = require("fs");
function isFileSync(filePath) {
    if (!fs_1.existsSync(filePath))
        return false;
    return fs_1.lstatSync(filePath).isFile();
}
exports.isFileSync = isFileSync;
function pairUp(arr, option) {
    if (arr.length % 2 !== 0) {
        atom.notifications.addWarning(`Invalid math delimiter configuration${option ? `in ${option}` : ''}`, {
            detail: `Expected even number of elements, but got "${arr.join(', ')}"`,
            dismissable: true,
        });
    }
    return arr.reduce(function (result, _value, index, array) {
        if (index % 2 === 0)
            result.push([array[index], array[index + 1]]);
        return result;
    }, []);
}
exports.pairUp = pairUp;
function isElement(node) {
    return node.nodeType === Node.ELEMENT_NODE;
}
exports.isElement = isElement;
async function injectScript(doc, scriptSrc) {
    const script = doc.createElement('script');
    script.src = scriptSrc;
    script.type = 'text/javascript';
    doc.head.appendChild(script);
    return new Promise((resolve) => {
        script.addEventListener('load', () => resolve());
    });
}
exports.injectScript = injectScript;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdUJBQThCLE9BQXFCO0lBQ2pELEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQUMsTUFBTSxDQUFBO0lBQ3BCLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFZLEVBQUUsRUFBRTtRQUM3QixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ3BCLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNqRCxNQUFNLEVBQUUsS0FBSyxDQUFDLE9BQU87WUFDckIsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1lBQ2xCLFdBQVcsRUFBRSxJQUFJO1NBQ2xCLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQVZELHNDQVVDO0FBQ0QsMkJBQTBDO0FBQzFDLG9CQUEyQixRQUFnQjtJQUN6QyxFQUFFLENBQUMsQ0FBQyxDQUFDLGVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUE7SUFDdkMsTUFBTSxDQUFDLGNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtBQUNyQyxDQUFDO0FBSEQsZ0NBR0M7QUFFRCxnQkFBMEIsR0FBUSxFQUFFLE1BQWU7SUFDakQsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FDM0IsdUNBQXVDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQ3JFO1lBQ0UsTUFBTSxFQUFFLDhDQUE4QyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHO1lBQ3ZFLFdBQVcsRUFBRSxJQUFJO1NBQ2xCLENBQ0YsQ0FBQTtJQUNILENBQUM7SUFDRCxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBZ0IsVUFBUyxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLO1FBQ3BFLEVBQUUsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNsRSxNQUFNLENBQUMsTUFBTSxDQUFBO0lBQ2YsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBQ1IsQ0FBQztBQWRELHdCQWNDO0FBRUQsbUJBQTBCLElBQVU7SUFDbEMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLFlBQVksQ0FBQTtBQUM1QyxDQUFDO0FBRkQsOEJBRUM7QUFFTSxLQUFLLHVCQUF1QixHQUFpQixFQUFFLFNBQWlCO0lBQ3JFLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDMUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUE7SUFDdEIsTUFBTSxDQUFDLElBQUksR0FBRyxpQkFBaUIsQ0FBQTtJQUMvQixHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUM1QixNQUFNLENBQUMsSUFBSSxPQUFPLENBQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUNuQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7SUFDbEQsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDO0FBUkQsb0NBUUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaGFuZGxlUHJvbWlzZShwcm9taXNlOiBQcm9taXNlPGFueT4pOiB2b2lkIHtcbiAgaWYgKCFwcm9taXNlKSByZXR1cm5cbiAgcHJvbWlzZS5jYXRjaCgoZXJyb3I6IEVycm9yKSA9PiB7XG4gICAgY29uc29sZS5lcnJvcihlcnJvcilcbiAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRmF0YWxFcnJvcihlcnJvci50b1N0cmluZygpLCB7XG4gICAgICBkZXRhaWw6IGVycm9yLm1lc3NhZ2UsXG4gICAgICBzdGFjazogZXJyb3Iuc3RhY2ssXG4gICAgICBkaXNtaXNzYWJsZTogdHJ1ZSxcbiAgICB9KVxuICB9KVxufVxuaW1wb3J0IHsgbHN0YXRTeW5jLCBleGlzdHNTeW5jIH0gZnJvbSAnZnMnXG5leHBvcnQgZnVuY3Rpb24gaXNGaWxlU3luYyhmaWxlUGF0aDogc3RyaW5nKSB7XG4gIGlmICghZXhpc3RzU3luYyhmaWxlUGF0aCkpIHJldHVybiBmYWxzZVxuICByZXR1cm4gbHN0YXRTeW5jKGZpbGVQYXRoKS5pc0ZpbGUoKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFpclVwPFQ+KGFycjogVFtdLCBvcHRpb24/OiBzdHJpbmcpOiBBcnJheTxbVCwgVF0+IHtcbiAgaWYgKGFyci5sZW5ndGggJSAyICE9PSAwKSB7XG4gICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZFdhcm5pbmcoXG4gICAgICBgSW52YWxpZCBtYXRoIGRlbGltaXRlciBjb25maWd1cmF0aW9uJHtvcHRpb24gPyBgaW4gJHtvcHRpb259YCA6ICcnfWAsXG4gICAgICB7XG4gICAgICAgIGRldGFpbDogYEV4cGVjdGVkIGV2ZW4gbnVtYmVyIG9mIGVsZW1lbnRzLCBidXQgZ290IFwiJHthcnIuam9pbignLCAnKX1cImAsXG4gICAgICAgIGRpc21pc3NhYmxlOiB0cnVlLFxuICAgICAgfSxcbiAgICApXG4gIH1cbiAgcmV0dXJuIGFyci5yZWR1Y2U8QXJyYXk8W1QsIFRdPj4oZnVuY3Rpb24ocmVzdWx0LCBfdmFsdWUsIGluZGV4LCBhcnJheSkge1xuICAgIGlmIChpbmRleCAlIDIgPT09IDApIHJlc3VsdC5wdXNoKFthcnJheVtpbmRleF0sIGFycmF5W2luZGV4ICsgMV1dKVxuICAgIHJldHVybiByZXN1bHRcbiAgfSwgW10pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VsZW1lbnQobm9kZTogTm9kZSk6IG5vZGUgaXMgRWxlbWVudCB7XG4gIHJldHVybiBub2RlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5qZWN0U2NyaXB0KGRvYzogSFRNTERvY3VtZW50LCBzY3JpcHRTcmM6IHN0cmluZykge1xuICBjb25zdCBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCgnc2NyaXB0JylcbiAgc2NyaXB0LnNyYyA9IHNjcmlwdFNyY1xuICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnXG4gIGRvYy5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdClcbiAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlKSA9PiB7XG4gICAgc2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiByZXNvbHZlKCkpXG4gIH0pXG59XG4iXX0=