"use strict";
const mathJaxStub = {
    jaxConfigure(userMacros) {
        MathJax.Hub.Config({
            jax: ['input/TeX', 'output/HTML-CSS'],
            extensions: [],
            TeX: {
                extensions: [
                    'AMSmath.js',
                    'AMSsymbols.js',
                    'noErrors.js',
                    'noUndefined.js',
                ],
                Macros: userMacros,
            },
            'HTML-CSS': {
                availableFonts: [],
                webFont: 'TeX',
            },
            messageStyle: 'none',
            showMathMenu: false,
            skipStartupTypeset: true,
        });
        MathJax.Hub.Configured();
    },
    queueTypeset(domElements) {
        domElements.forEach((elem) => {
            MathJax.Hub.Queue(['Typeset', MathJax.Hub, elem]);
        });
    },
    queueProcessHTMLString(element, callback) {
        MathJax.Hub.Queue(['setRenderer', MathJax.Hub, 'SVG'], ['Typeset', MathJax.Hub, element], ['setRenderer', MathJax.Hub, 'HTML-CSS'], [callback]);
    },
    async waitForQueue() {
        await new Promise((resolve) => {
            MathJax.Hub.Queue([resolve]);
        });
    },
};
window.mathJaxStub = mathJaxStub;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0aGpheC1zdHViLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL21hdGhqYXgtc3R1Yi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxXQUFXLEdBQUc7SUFDbEIsWUFBWSxDQUFDLFVBQWtCO1FBQzdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO1lBQ2pCLEdBQUcsRUFBRSxDQUFDLFdBQVcsRUFBRSxpQkFBaUIsQ0FBQztZQUNyQyxVQUFVLEVBQUUsRUFBRTtZQUNkLEdBQUcsRUFBRTtnQkFDSCxVQUFVLEVBQUU7b0JBQ1YsWUFBWTtvQkFDWixlQUFlO29CQUNmLGFBQWE7b0JBQ2IsZ0JBQWdCO2lCQUNqQjtnQkFDRCxNQUFNLEVBQUUsVUFBVTthQUNuQjtZQUNELFVBQVUsRUFBRTtnQkFDVixjQUFjLEVBQUUsRUFBRTtnQkFDbEIsT0FBTyxFQUFFLEtBQUs7YUFDZjtZQUNELFlBQVksRUFBRSxNQUFNO1lBQ3BCLFlBQVksRUFBRSxLQUFLO1lBQ25CLGtCQUFrQixFQUFFLElBQUk7U0FDekIsQ0FBQyxDQUFBO1FBQ0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtJQUMxQixDQUFDO0lBRUQsWUFBWSxDQUFDLFdBQW1CO1FBQzlCLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUMzQixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUE7UUFDbkQsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDO0lBRUQsc0JBQXNCLENBQUMsT0FBb0IsRUFBRSxRQUFvQjtRQUMvRCxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FDZixDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUNuQyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxFQUNqQyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxFQUN4QyxDQUFDLFFBQVEsQ0FBQyxDQUNYLENBQUE7SUFDSCxDQUFDO0lBRUQsS0FBSyxDQUFDLFlBQVk7UUFDaEIsTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQzVCLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtRQUM5QixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FDRixDQUFBO0FBUUQsTUFBTSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtYXRoSmF4U3R1YiA9IHtcbiAgamF4Q29uZmlndXJlKHVzZXJNYWNyb3M6IG9iamVjdCkge1xuICAgIE1hdGhKYXguSHViLkNvbmZpZyh7XG4gICAgICBqYXg6IFsnaW5wdXQvVGVYJywgJ291dHB1dC9IVE1MLUNTUyddLFxuICAgICAgZXh0ZW5zaW9uczogW10sXG4gICAgICBUZVg6IHtcbiAgICAgICAgZXh0ZW5zaW9uczogW1xuICAgICAgICAgICdBTVNtYXRoLmpzJyxcbiAgICAgICAgICAnQU1Tc3ltYm9scy5qcycsXG4gICAgICAgICAgJ25vRXJyb3JzLmpzJyxcbiAgICAgICAgICAnbm9VbmRlZmluZWQuanMnLFxuICAgICAgICBdLFxuICAgICAgICBNYWNyb3M6IHVzZXJNYWNyb3MsXG4gICAgICB9LFxuICAgICAgJ0hUTUwtQ1NTJzoge1xuICAgICAgICBhdmFpbGFibGVGb250czogW10sXG4gICAgICAgIHdlYkZvbnQ6ICdUZVgnLFxuICAgICAgfSxcbiAgICAgIG1lc3NhZ2VTdHlsZTogJ25vbmUnLFxuICAgICAgc2hvd01hdGhNZW51OiBmYWxzZSxcbiAgICAgIHNraXBTdGFydHVwVHlwZXNldDogdHJ1ZSxcbiAgICB9KVxuICAgIE1hdGhKYXguSHViLkNvbmZpZ3VyZWQoKVxuICB9LFxuXG4gIHF1ZXVlVHlwZXNldChkb21FbGVtZW50czogTm9kZVtdKSB7XG4gICAgZG9tRWxlbWVudHMuZm9yRWFjaCgoZWxlbSkgPT4ge1xuICAgICAgTWF0aEpheC5IdWIuUXVldWUoWydUeXBlc2V0JywgTWF0aEpheC5IdWIsIGVsZW1dKVxuICAgIH0pXG4gIH0sXG5cbiAgcXVldWVQcm9jZXNzSFRNTFN0cmluZyhlbGVtZW50OiBIVE1MRWxlbWVudCwgY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICBNYXRoSmF4Lkh1Yi5RdWV1ZShcbiAgICAgIFsnc2V0UmVuZGVyZXInLCBNYXRoSmF4Lkh1YiwgJ1NWRyddLFxuICAgICAgWydUeXBlc2V0JywgTWF0aEpheC5IdWIsIGVsZW1lbnRdLFxuICAgICAgWydzZXRSZW5kZXJlcicsIE1hdGhKYXguSHViLCAnSFRNTC1DU1MnXSxcbiAgICAgIFtjYWxsYmFja10sXG4gICAgKVxuICB9LFxuXG4gIGFzeW5jIHdhaXRGb3JRdWV1ZSgpIHtcbiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgTWF0aEpheC5IdWIuUXVldWUoW3Jlc29sdmVdKVxuICAgIH0pXG4gIH0sXG59XG5cbmludGVyZmFjZSBXaW5kb3cge1xuICBtYXRoSmF4U3R1YjogTWF0aEpheFN0dWJcbn1cblxudHlwZSBNYXRoSmF4U3R1YiA9IHR5cGVvZiBtYXRoSmF4U3R1YlxuXG53aW5kb3cubWF0aEpheFN0dWIgPSBtYXRoSmF4U3R1YlxuIl19