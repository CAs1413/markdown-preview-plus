"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs-plus");
const highlight = require("atom-highlight");
const pandocHelper = require("./pandoc-helper");
const markdownIt = require("./markdown-it-helper");
const extension_helper_1 = require("./extension-helper");
const imageWatcher = require("./image-watch-helper");
const { resourcePath } = atom.getLoadSettings();
const packagePath = path.dirname(__dirname);
function toDOMFragment(text, filePath, _grammar, renderLaTeX, callback) {
    render(text, filePath, renderLaTeX, false, function (error, html) {
        if (error !== null) {
            return callback(error);
        }
        const template = document.createElement('template');
        template.innerHTML = html;
        const domFragment = template.content.cloneNode(true);
        return callback(null, domFragment);
    });
}
exports.toDOMFragment = toDOMFragment;
function toHTML(text, filePath, grammar, renderLaTeX, copyHTMLFlag, callback) {
    if (text === null) {
        text = '';
    }
    render(text, filePath, renderLaTeX, copyHTMLFlag, function (error, html) {
        let defaultCodeLanguage;
        if (error !== null) {
            callback(error, '');
        }
        if ((grammar && grammar.scopeName) === 'source.litcoffee') {
            defaultCodeLanguage = 'coffee';
        }
        if (!atom.config.get('markdown-preview-plus.enablePandoc') ||
            !atom.config.get('markdown-preview-plus.useNativePandocCodeStyles')) {
            html = tokenizeCodeBlocks(html, defaultCodeLanguage);
        }
        callback(null, html);
    });
}
exports.toHTML = toHTML;
function render(text, filePath, renderLaTeX, copyHTMLFlag, callback) {
    text = text.replace(/^\s*<!doctype(\s+.*)?>\s*/i, '');
    const callbackFunction = function (error, html) {
        if (error !== null) {
            callback(error, '');
        }
        html = sanitize(html);
        html = resolveImagePaths(html, filePath, copyHTMLFlag);
        callback(null, html.trim());
    };
    if (atom.config.get('markdown-preview-plus.enablePandoc')) {
        pandocHelper.renderPandoc(text, filePath, renderLaTeX, callbackFunction);
    }
    else {
        callbackFunction(null, markdownIt.render(text, renderLaTeX));
    }
}
function sanitize(html) {
    const doc = document.createElement('div');
    doc.innerHTML = html;
    doc.querySelectorAll("script:not([type^='math/tex'])").forEach((elem) => {
        elem.remove();
    });
    const attributesToRemove = [
        'onabort',
        'onblur',
        'onchange',
        'onclick',
        'ondbclick',
        'onerror',
        'onfocus',
        'onkeydown',
        'onkeypress',
        'onkeyup',
        'onload',
        'onmousedown',
        'onmousemove',
        'onmouseover',
        'onmouseout',
        'onmouseup',
        'onreset',
        'onresize',
        'onscroll',
        'onselect',
        'onsubmit',
        'onunload',
    ];
    doc.querySelectorAll('*').forEach((elem) => Array.from(attributesToRemove).map((attribute) => {
        elem.removeAttribute(attribute);
    }));
    return doc.innerHTML;
}
function resolveImagePaths(html, filePath, copyHTMLFlag) {
    const [rootDirectory] = Array.from(atom.project.relativizePath(filePath || ''));
    const doc = document.createElement('div');
    doc.innerHTML = html;
    doc.querySelectorAll('img').forEach(function (img) {
        let src = img.getAttribute('src');
        if (src) {
            if (!atom.config.get('markdown-preview-plus.enablePandoc')) {
                src = markdownIt.decode(src);
            }
            if (src.match(/^(https?|atom|data):/)) {
                return;
            }
            if (src.startsWith(process.resourcesPath)) {
                return;
            }
            if (src.startsWith(resourcePath)) {
                return;
            }
            if (src.startsWith(packagePath)) {
                return;
            }
            if (src[0] === '/') {
                if (!fs.isFileSync(src)) {
                    try {
                        src = path.join(rootDirectory, src.substring(1));
                    }
                    catch (e) {
                    }
                }
            }
            else if (filePath) {
                src = path.resolve(path.dirname(filePath), src);
            }
            if (!copyHTMLFlag) {
                const v = imageWatcher.getVersion(src, filePath);
                if (v) {
                    src = `${src}?v=${v}`;
                }
            }
            return (img.src = src);
        }
        return;
    });
    return doc.innerHTML;
}
function convertCodeBlocksToAtomEditors(domFragment, defaultLanguage = 'text') {
    const fontFamily = atom.config.get('editor.fontFamily');
    if (fontFamily) {
        for (const codeElement of Array.from(domFragment.querySelectorAll('code'))) {
            codeElement.style.fontFamily = fontFamily;
        }
    }
    for (const preElement of Array.from(domFragment.querySelectorAll('pre'))) {
        const codeBlock = preElement.firstElementChild !== null
            ? preElement.firstElementChild
            : preElement;
        const cbClass = codeBlock.className;
        const fenceName = cbClass
            ? cbClass.replace(/^(lang-|sourceCode )/, '')
            : defaultLanguage;
        const editorElement = document.createElement('atom-text-editor');
        editorElement.setAttributeNode(document.createAttribute('gutter-hidden'));
        editorElement.removeAttribute('tabindex');
        preElement.parentElement.replaceChild(editorElement, preElement);
        const editor = editorElement.getModel();
        if (editor.cursorLineDecorations != null) {
            for (const cursorLineDecoration of editor.cursorLineDecorations) {
                cursorLineDecoration.destroy();
            }
        }
        editor.setText(codeBlock.textContent.replace(/\n$/, ''));
        const grammar = atom.grammars.grammarForScopeName(extension_helper_1.scopeForFenceName(fenceName));
        if (grammar)
            editor.setGrammar(grammar);
    }
    return domFragment;
}
exports.convertCodeBlocksToAtomEditors = convertCodeBlocksToAtomEditors;
function tokenizeCodeBlocks(html, defaultLanguage = 'text') {
    const doc = document.createElement('div');
    doc.innerHTML = html;
    const fontFamily = atom.config.get('editor.fontFamily');
    if (fontFamily) {
        doc
            .querySelectorAll('code')
            .forEach((code) => (code.style.fontFamily = fontFamily || null));
    }
    doc.querySelectorAll('pre').forEach(function (preElement) {
        const codeBlock = preElement.firstElementChild;
        const fenceName = codeBlock.className.replace(/^(lang-|sourceCode )/, '') || defaultLanguage;
        const highlightedHtml = highlight({
            fileContents: codeBlock.innerText,
            scopeName: extension_helper_1.scopeForFenceName(fenceName),
            nbsp: false,
            lineDivs: false,
            editorDiv: true,
            editorDivTag: 'pre',
            editorDivClass: fenceName
                ? `editor-colors lang-${fenceName}`
                : 'editor-colors',
        });
        return (preElement.outerHTML = highlightedHtml);
    });
    return doc.innerHTML;
}
//# sourceMappingURL=data:application/json;base64,