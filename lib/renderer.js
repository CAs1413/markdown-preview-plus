"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs-plus");
const highlight = require("atom-highlight");
const pandocHelper = require("./pandoc-helper");
const markdownIt = require("./markdown-it-helper");
const extension_helper_1 = require("./extension-helper");
const imageWatcher = require("./image-watch-helper");
const { resourcePath } = atom.getLoadSettings();
const packagePath = path.dirname(__dirname);
function toDOMFragment(text, filePath, _grammar, renderLaTeX, callback) {
    render(text, filePath, renderLaTeX, false, function (error, html) {
        if (error !== null) {
            return callback(error);
        }
        const template = document.createElement('template');
        template.innerHTML = html;
        const domFragment = template.content.cloneNode(true);
        return callback(null, domFragment);
    });
}
exports.toDOMFragment = toDOMFragment;
function toHTML(text, filePath, grammar, renderLaTeX, copyHTMLFlag, callback) {
    if (text === null) {
        text = '';
    }
    render(text, filePath, renderLaTeX, copyHTMLFlag, function (error, html) {
        let defaultCodeLanguage;
        if (error !== null) {
            callback(error, '');
        }
        if ((grammar && grammar.scopeName) === 'source.litcoffee') {
            defaultCodeLanguage = 'coffee';
        }
        if (!atom.config.get('markdown-preview-plus.enablePandoc') ||
            !atom.config.get('markdown-preview-plus.useNativePandocCodeStyles')) {
            html = tokenizeCodeBlocks(html, defaultCodeLanguage);
        }
        callback(null, html);
    });
}
exports.toHTML = toHTML;
function render(text, filePath, renderLaTeX, copyHTMLFlag, callback) {
    text = text.replace(/^\s*<!doctype(\s+.*)?>\s*/i, '');
    const callbackFunction = function (error, html) {
        if (error !== null) {
            callback(error, '');
        }
        html = sanitize(html);
        html = resolveImagePaths(html, filePath, copyHTMLFlag);
        callback(null, html.trim());
    };
    if (atom.config.get('markdown-preview-plus.enablePandoc')) {
        pandocHelper.renderPandoc(text, filePath, renderLaTeX, callbackFunction);
    }
    else {
        callbackFunction(null, markdownIt.render(text, renderLaTeX));
    }
}
function sanitize(html) {
    const doc = document.createElement('div');
    doc.innerHTML = html;
    doc.querySelectorAll("script:not([type^='math/tex'])").forEach((elem) => {
        elem.remove();
    });
    const attributesToRemove = [
        'onabort',
        'onblur',
        'onchange',
        'onclick',
        'ondbclick',
        'onerror',
        'onfocus',
        'onkeydown',
        'onkeypress',
        'onkeyup',
        'onload',
        'onmousedown',
        'onmousemove',
        'onmouseover',
        'onmouseout',
        'onmouseup',
        'onreset',
        'onresize',
        'onscroll',
        'onselect',
        'onsubmit',
        'onunload',
    ];
    doc.querySelectorAll('*').forEach((elem) => attributesToRemove.map((attribute) => {
        elem.removeAttribute(attribute);
    }));
    return doc.innerHTML;
}
function resolveImagePaths(html, filePath, copyHTMLFlag) {
    const [rootDirectory] = atom.project.relativizePath(filePath || '');
    const doc = document.createElement('div');
    doc.innerHTML = html;
    doc.querySelectorAll('img').forEach(function (img) {
        let src = img.getAttribute('src');
        if (src) {
            if (!atom.config.get('markdown-preview-plus.enablePandoc')) {
                src = markdownIt.decode(src);
            }
            if (src.match(/^(https?|atom|data):/)) {
                return;
            }
            if (src.startsWith(process.resourcesPath)) {
                return;
            }
            if (src.startsWith(resourcePath)) {
                return;
            }
            if (src.startsWith(packagePath)) {
                return;
            }
            if (src[0] === '/') {
                if (!fs.isFileSync(src)) {
                    try {
                        if (rootDirectory !== null)
                            src = path.join(rootDirectory, src.substring(1));
                    }
                    catch (e) {
                    }
                }
            }
            else if (filePath) {
                src = path.resolve(path.dirname(filePath), src);
            }
            if (!copyHTMLFlag) {
                const v = imageWatcher.getVersion(src, filePath);
                if (v) {
                    src = `${src}?v=${v}`;
                }
            }
            return (img.src = src);
        }
        return;
    });
    return doc.innerHTML;
}
function convertCodeBlocksToAtomEditors(domFragment, defaultLanguage = 'text') {
    const fontFamily = atom.config.get('editor.fontFamily');
    if (fontFamily) {
        for (const codeElement of Array.from(domFragment.querySelectorAll('code'))) {
            codeElement.style.fontFamily = fontFamily;
        }
    }
    for (const preElement of Array.from(domFragment.querySelectorAll('pre'))) {
        const codeBlock = preElement.firstElementChild !== null
            ? preElement.firstElementChild
            : preElement;
        const cbClass = codeBlock.className;
        const fenceName = cbClass
            ? cbClass.replace(/^(lang-|sourceCode )/, '')
            : defaultLanguage;
        const editorElement = document.createElement('atom-text-editor');
        editorElement.setAttributeNode(document.createAttribute('gutter-hidden'));
        editorElement.removeAttribute('tabindex');
        preElement.parentElement.replaceChild(editorElement, preElement);
        const editor = editorElement.getModel();
        if (editor.cursorLineDecorations != null) {
            for (const cursorLineDecoration of editor.cursorLineDecorations) {
                cursorLineDecoration.destroy();
            }
        }
        editor.setText(codeBlock.textContent.replace(/\n$/, ''));
        const grammar = atom.grammars.grammarForScopeName(extension_helper_1.scopeForFenceName(fenceName));
        if (grammar)
            editor.setGrammar(grammar);
    }
    return domFragment;
}
exports.convertCodeBlocksToAtomEditors = convertCodeBlocksToAtomEditors;
function tokenizeCodeBlocks(html, defaultLanguage = 'text') {
    const doc = document.createElement('div');
    doc.innerHTML = html;
    const fontFamily = atom.config.get('editor.fontFamily');
    if (fontFamily) {
        doc
            .querySelectorAll('code')
            .forEach((code) => (code.style.fontFamily = fontFamily || null));
    }
    doc.querySelectorAll('pre').forEach(function (preElement) {
        const codeBlock = preElement.firstElementChild;
        const fenceName = codeBlock.className.replace(/^(lang-|sourceCode )/, '') || defaultLanguage;
        const highlightedHtml = highlight({
            fileContents: codeBlock.innerText,
            scopeName: extension_helper_1.scopeForFenceName(fenceName),
            nbsp: false,
            lineDivs: false,
            editorDiv: true,
            editorDivTag: 'pre',
            editorDivClass: fenceName
                ? `editor-colors lang-${fenceName}`
                : 'editor-colors',
        });
        preElement.outerHTML = highlightedHtml;
    });
    return doc.innerHTML;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcmVuZGVyZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFPQSw2QkFBNkI7QUFDN0IsOEJBQThCO0FBQzlCLDRDQUE0QztBQUM1QyxnREFBZ0Q7QUFDaEQsbURBQW1EO0FBQ25ELHlEQUFzRDtBQUN0RCxxREFBcUQ7QUFHckQsTUFBTSxFQUFFLFlBQVksRUFBRSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQTtBQUMvQyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBRTNDLHVCQUNFLElBQVksRUFDWixRQUE0QixFQUM1QixRQUFhLEVBQ2IsV0FBb0IsRUFDcEIsUUFBNkQ7SUFFN0QsTUFBTSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxVQUN6QyxLQUFtQixFQUNuQixJQUFhO1FBRWIsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDbkIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUN4QixDQUFDO1FBRUQsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUNuRCxRQUFRLENBQUMsU0FBUyxHQUFHLElBQUssQ0FBQTtRQUMxQixNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUVwRCxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQTtJQUNwQyxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFyQkQsc0NBcUJDO0FBRUQsZ0JBQ0UsSUFBbUIsRUFDbkIsUUFBNEIsRUFDNUIsT0FBNEIsRUFDNUIsV0FBb0IsRUFDcEIsWUFBcUIsRUFDckIsUUFBcUQ7SUFFckQsRUFBRSxDQUFDLENB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LENBQUE7QUFDdEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBkZWNhZmZlaW5hdGUgc3VnZ2VzdGlvbnM6XG4gKiBEUzEwMjogUmVtb3ZlIHVubmVjZXNzYXJ5IGNvZGUgY3JlYXRlZCBiZWNhdXNlIG9mIGltcGxpY2l0IHJldHVybnNcbiAqIERTMTA0OiBBdm9pZCBpbmxpbmUgYXNzaWdubWVudHNcbiAqIERTMjA3OiBDb25zaWRlciBzaG9ydGVyIHZhcmlhdGlvbnMgb2YgbnVsbCBjaGVja3NcbiAqIEZ1bGwgZG9jczogaHR0cHM6Ly9naXRodWIuY29tL2RlY2FmZmVpbmF0ZS9kZWNhZmZlaW5hdGUvYmxvYi9tYXN0ZXIvZG9jcy9zdWdnZXN0aW9ucy5tZFxuICovXG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxuaW1wb3J0IGZzID0gcmVxdWlyZSgnZnMtcGx1cycpXG5pbXBvcnQgaGlnaGxpZ2h0ID0gcmVxdWlyZSgnYXRvbS1oaWdobGlnaHQnKVxuaW1wb3J0IHBhbmRvY0hlbHBlciA9IHJlcXVpcmUoJy4vcGFuZG9jLWhlbHBlcicpXG5pbXBvcnQgbWFya2Rvd25JdCA9IHJlcXVpcmUoJy4vbWFya2Rvd24taXQtaGVscGVyJykgLy8gRGVmZXIgdW50aWwgdXNlZFxuaW1wb3J0IHsgc2NvcGVGb3JGZW5jZU5hbWUgfSBmcm9tICcuL2V4dGVuc2lvbi1oZWxwZXInXG5pbXBvcnQgaW1hZ2VXYXRjaGVyID0gcmVxdWlyZSgnLi9pbWFnZS13YXRjaC1oZWxwZXInKVxuaW1wb3J0IHsgR3JhbW1hciwgVGV4dEVkaXRvckVsZW1lbnQgfSBmcm9tICdhdG9tJ1xuXG5jb25zdCB7IHJlc291cmNlUGF0aCB9ID0gYXRvbS5nZXRMb2FkU2V0dGluZ3MoKVxuY29uc3QgcGFja2FnZVBhdGggPSBwYXRoLmRpcm5hbWUoX19kaXJuYW1lKVxuXG5leHBvcnQgZnVuY3Rpb24gdG9ET01GcmFnbWVudChcbiAgdGV4dDogc3RyaW5nLFxuICBmaWxlUGF0aDogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICBfZ3JhbW1hcjogYW55LFxuICByZW5kZXJMYVRlWDogYm9vbGVhbixcbiAgY2FsbGJhY2s6IChlcnJvcjogRXJyb3IgfCBudWxsLCBkb21GcmFnbWVudD86IE5vZGUpID0+IHN0cmluZyxcbik6IHZvaWQge1xuICByZW5kZXIodGV4dCwgZmlsZVBhdGgsIHJlbmRlckxhVGVYLCBmYWxzZSwgZnVuY3Rpb24oXG4gICAgZXJyb3I6IEVycm9yIHwgbnVsbCxcbiAgICBodG1sPzogc3RyaW5nLFxuICApIHtcbiAgICBpZiAoZXJyb3IgIT09IG51bGwpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnJvcilcbiAgICB9XG5cbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJylcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBodG1sIVxuICAgIGNvbnN0IGRvbUZyYWdtZW50ID0gdGVtcGxhdGUuY29udGVudC5jbG9uZU5vZGUodHJ1ZSlcblxuICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBkb21GcmFnbWVudClcbiAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvSFRNTChcbiAgdGV4dDogc3RyaW5nIHwgbnVsbCxcbiAgZmlsZVBhdGg6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgZ3JhbW1hcjogR3JhbW1hciB8IHVuZGVmaW5lZCxcbiAgcmVuZGVyTGFUZVg6IGJvb2xlYW4sXG4gIGNvcHlIVE1MRmxhZzogYm9vbGVhbixcbiAgY2FsbGJhY2s6IChlcnJvcjogRXJyb3IgfCBudWxsLCBodG1sOiBzdHJpbmcpID0+IHZvaWQsXG4pOiB2b2lkIHtcbiAgaWYgKHRleHQgPT09IG51bGwpIHtcbiAgICB0ZXh0ID0gJydcbiAgfVxuICByZW5kZXIodGV4dCwgZmlsZVBhdGgsIHJlbmRlckxhVGVYLCBjb3B5SFRNTEZsYWcsIGZ1bmN0aW9uKGVycm9yLCBodG1sKSB7XG4gICAgbGV0IGRlZmF1bHRDb2RlTGFuZ3VhZ2U6IHN0cmluZyB8IHVuZGVmaW5lZFxuICAgIGlmIChlcnJvciAhPT0gbnVsbCkge1xuICAgICAgY2FsbGJhY2soZXJyb3IsICcnKVxuICAgIH1cbiAgICAvLyBEZWZhdWx0IGNvZGUgYmxvY2tzIHRvIGJlIGNvZmZlZSBpbiBMaXRlcmF0ZSBDb2ZmZWVTY3JpcHQgZmlsZXNcbiAgICBpZiAoKGdyYW1tYXIgJiYgZ3JhbW1hci5zY29wZU5hbWUpID09PSAnc291cmNlLmxpdGNvZmZlZScpIHtcbiAgICAgIGRlZmF1bHRDb2RlTGFuZ3VhZ2UgPSAnY29mZmVlJ1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAhYXRvbS5jb25maWcuZ2V0KCdtYXJrZG93bi1wcmV2aWV3LXBsdXMuZW5hYmxlUGFuZG9jJykgfHxcbiAgICAgICFhdG9tLmNvbmZpZy5nZXQoJ21hcmtkb3duLXByZXZpZXctcGx1cy51c2VOYXRpdmVQYW5kb2NDb2RlU3R5bGVzJylcbiAgICApIHtcbiAgICAgIGh0bWwgPSB0b2tlbml6ZUNvZGVCbG9ja3MoaHRtbCwgZGVmYXVsdENvZGVMYW5ndWFnZSlcbiAgICB9XG4gICAgY2FsbGJhY2sobnVsbCwgaHRtbClcbiAgfSlcbn1cblxuZnVuY3Rpb24gcmVuZGVyKFxuICB0ZXh0OiBzdHJpbmcsXG4gIGZpbGVQYXRoOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gIHJlbmRlckxhVGVYOiBib29sZWFuLFxuICBjb3B5SFRNTEZsYWc6IGJvb2xlYW4sXG4gIGNhbGxiYWNrOiAoZXJyb3I6IEVycm9yIHwgbnVsbCwgaHRtbDogc3RyaW5nKSA9PiB2b2lkLFxuKTogdm9pZCB7XG4gIC8vIFJlbW92ZSB0aGUgPCFkb2N0eXBlPiBzaW5jZSBvdGhlcndpc2UgbWFya2VkIHdpbGwgZXNjYXBlIGl0XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGpqL21hcmtlZC9pc3N1ZXMvMzU0XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL15cXHMqPCFkb2N0eXBlKFxccysuKik/PlxccyovaSwgJycpXG5cbiAgY29uc3QgY2FsbGJhY2tGdW5jdGlvbiA9IGZ1bmN0aW9uKGVycm9yOiBFcnJvciB8IG51bGwsIGh0bWw6IHN0cmluZykge1xuICAgIGlmIChlcnJvciAhPT0gbnVsbCkge1xuICAgICAgY2FsbGJhY2soZXJyb3IsICcnKVxuICAgIH1cbiAgICBodG1sID0gc2FuaXRpemUoaHRtbClcbiAgICBodG1sID0gcmVzb2x2ZUltYWdlUGF0aHMoaHRtbCwgZmlsZVBhdGgsIGNvcHlIVE1MRmxhZylcbiAgICBjYWxsYmFjayhudWxsLCBodG1sLnRyaW0oKSlcbiAgfVxuXG4gIGlmIChhdG9tLmNvbmZpZy5nZXQoJ21hcmtkb3duLXByZXZpZXctcGx1cy5lbmFibGVQYW5kb2MnKSkge1xuICAgIHBhbmRvY0hlbHBlci5yZW5kZXJQYW5kb2ModGV4dCwgZmlsZVBhdGgsIHJlbmRlckxhVGVYLCBjYWxsYmFja0Z1bmN0aW9uKVxuICB9IGVsc2Uge1xuICAgIGNhbGxiYWNrRnVuY3Rpb24obnVsbCwgbWFya2Rvd25JdC5yZW5kZXIodGV4dCwgcmVuZGVyTGFUZVgpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHNhbml0aXplKGh0bWw6IHN0cmluZykge1xuICBjb25zdCBkb2MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICBkb2MuaW5uZXJIVE1MID0gaHRtbFxuICAvLyBEbyBub3QgcmVtb3ZlIE1hdGhKYXggc2NyaXB0IGRlbGltaXRlZCBibG9ja3NcbiAgZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJzY3JpcHQ6bm90KFt0eXBlXj0nbWF0aC90ZXgnXSlcIikuZm9yRWFjaCgoZWxlbSkgPT4ge1xuICAgIGVsZW0ucmVtb3ZlKClcbiAgfSlcbiAgY29uc3QgYXR0cmlidXRlc1RvUmVtb3ZlID0gW1xuICAgICdvbmFib3J0JyxcbiAgICAnb25ibHVyJyxcbiAgICAnb25jaGFuZ2UnLFxuICAgICdvbmNsaWNrJyxcbiAgICAnb25kYmNsaWNrJyxcbiAgICAnb25lcnJvcicsXG4gICAgJ29uZm9jdXMnLFxuICAgICdvbmtleWRvd24nLFxuICAgICdvbmtleXByZXNzJyxcbiAgICAnb25rZXl1cCcsXG4gICAgJ29ubG9hZCcsXG4gICAgJ29ubW91c2Vkb3duJyxcbiAgICAnb25tb3VzZW1vdmUnLFxuICAgICdvbm1vdXNlb3ZlcicsXG4gICAgJ29ubW91c2VvdXQnLFxuICAgICdvbm1vdXNldXAnLFxuICAgICdvbnJlc2V0JyxcbiAgICAnb25yZXNpemUnLFxuICAgICdvbnNjcm9sbCcsXG4gICAgJ29uc2VsZWN0JyxcbiAgICAnb25zdWJtaXQnLFxuICAgICdvbnVubG9hZCcsXG4gIF1cbiAgZG9jLnF1ZXJ5U2VsZWN0b3JBbGwoJyonKS5mb3JFYWNoKChlbGVtKSA9PlxuICAgIGF0dHJpYnV0ZXNUb1JlbW92ZS5tYXAoKGF0dHJpYnV0ZSkgPT4ge1xuICAgICAgZWxlbS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKVxuICAgIH0pLFxuICApXG4gIHJldHVybiBkb2MuaW5uZXJIVE1MXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVJbWFnZVBhdGhzKFxuICBodG1sOiBzdHJpbmcsXG4gIGZpbGVQYXRoOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gIGNvcHlIVE1MRmxhZzogYm9vbGVhbixcbikge1xuICBjb25zdCBbcm9vdERpcmVjdG9yeV0gPSBhdG9tLnByb2plY3QucmVsYXRpdml6ZVBhdGgoZmlsZVBhdGggfHwgJycpXG4gIGNvbnN0IGRvYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gIGRvYy5pbm5lckhUTUwgPSBodG1sXG4gIGRvYy5xdWVyeVNlbGVjdG9yQWxsKCdpbWcnKS5mb3JFYWNoKGZ1bmN0aW9uKGltZykge1xuICAgIGxldCBzcmMgPSBpbWcuZ2V0QXR0cmlidXRlKCdzcmMnKVxuICAgIGlmIChzcmMpIHtcbiAgICAgIGlmICghYXRvbS5jb25maWcuZ2V0KCdtYXJrZG93bi1wcmV2aWV3LXBsdXMuZW5hYmxlUGFuZG9jJykpIHtcbiAgICAgICAgc3JjID0gbWFya2Rvd25JdC5kZWNvZGUoc3JjKVxuICAgICAgfVxuXG4gICAgICBpZiAoc3JjLm1hdGNoKC9eKGh0dHBzP3xhdG9tfGRhdGEpOi8pKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgaWYgKHNyYy5zdGFydHNXaXRoKHByb2Nlc3MucmVzb3VyY2VzUGF0aCBhcyBzdHJpbmcpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgaWYgKHNyYy5zdGFydHNXaXRoKHJlc291cmNlUGF0aCkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZiAoc3JjLnN0YXJ0c1dpdGgocGFja2FnZVBhdGgpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAoc3JjWzBdID09PSAnLycpIHtcbiAgICAgICAgaWYgKCFmcy5pc0ZpbGVTeW5jKHNyYykpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHJvb3REaXJlY3RvcnkgIT09IG51bGwpIHNyYyA9IHBhdGguam9pbihyb290RGlyZWN0b3J5LCBzcmMuc3Vic3RyaW5nKDEpKVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIG5vb3BcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZmlsZVBhdGgpIHtcbiAgICAgICAgc3JjID0gcGF0aC5yZXNvbHZlKHBhdGguZGlybmFtZShmaWxlUGF0aCksIHNyYylcbiAgICAgIH1cblxuICAgICAgLy8gVXNlIG1vc3QgcmVjZW50IHZlcnNpb24gb2YgaW1hZ2VcbiAgICAgIGlmICghY29weUhUTUxGbGFnKSB7XG4gICAgICAgIGNvbnN0IHYgPSBpbWFnZVdhdGNoZXIuZ2V0VmVyc2lvbihzcmMsIGZpbGVQYXRoKVxuICAgICAgICBpZiAodikge1xuICAgICAgICAgIHNyYyA9IGAke3NyY30/dj0ke3Z9YFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoaW1nLnNyYyA9IHNyYylcbiAgICB9XG4gICAgcmV0dXJuXG4gIH0pXG5cbiAgcmV0dXJuIGRvYy5pbm5lckhUTUxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRDb2RlQmxvY2tzVG9BdG9tRWRpdG9ycyhcbiAgZG9tRnJhZ21lbnQ6IEVsZW1lbnQsXG4gIGRlZmF1bHRMYW5ndWFnZTogc3RyaW5nID0gJ3RleHQnLFxuKSB7XG4gIGNvbnN0IGZvbnRGYW1pbHkgPSBhdG9tLmNvbmZpZy5nZXQoJ2VkaXRvci5mb250RmFtaWx5JylcbiAgaWYgKGZvbnRGYW1pbHkpIHtcbiAgICBmb3IgKGNvbnN0IGNvZGVFbGVtZW50IG9mIEFycmF5LmZyb20oXG4gICAgICBkb21GcmFnbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdjb2RlJyksXG4gICAgKSkge1xuICAgICAgY29kZUVsZW1lbnQuc3R5bGUuZm9udEZhbWlseSA9IGZvbnRGYW1pbHlcbiAgICB9XG4gIH1cblxuICBmb3IgKGNvbnN0IHByZUVsZW1lbnQgb2YgQXJyYXkuZnJvbShkb21GcmFnbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdwcmUnKSkpIHtcbiAgICBjb25zdCBjb2RlQmxvY2sgPVxuICAgICAgcHJlRWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCAhPT0gbnVsbFxuICAgICAgICA/IHByZUVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGRcbiAgICAgICAgOiBwcmVFbGVtZW50XG4gICAgY29uc3QgY2JDbGFzcyA9IGNvZGVCbG9jay5jbGFzc05hbWVcbiAgICBjb25zdCBmZW5jZU5hbWUgPSBjYkNsYXNzXG4gICAgICA/IGNiQ2xhc3MucmVwbGFjZSgvXihsYW5nLXxzb3VyY2VDb2RlICkvLCAnJylcbiAgICAgIDogZGVmYXVsdExhbmd1YWdlXG5cbiAgICBjb25zdCBlZGl0b3JFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcbiAgICAgICdhdG9tLXRleHQtZWRpdG9yJyxcbiAgICApIGFzIFRleHRFZGl0b3JFbGVtZW50XG4gICAgZWRpdG9yRWxlbWVudC5zZXRBdHRyaWJ1dGVOb2RlKGRvY3VtZW50LmNyZWF0ZUF0dHJpYnV0ZSgnZ3V0dGVyLWhpZGRlbicpKVxuICAgIGVkaXRvckVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCd0YWJpbmRleCcpIC8vIG1ha2UgcmVhZC1vbmx5XG5cbiAgICBwcmVFbGVtZW50LnBhcmVudEVsZW1lbnQhLnJlcGxhY2VDaGlsZChlZGl0b3JFbGVtZW50LCBwcmVFbGVtZW50KVxuXG4gICAgY29uc3QgZWRpdG9yID0gZWRpdG9yRWxlbWVudC5nZXRNb2RlbCgpXG4gICAgLy8gcmVtb3ZlIHRoZSBkZWZhdWx0IHNlbGVjdGlvbiBvZiBhIGxpbmUgaW4gZWFjaCBlZGl0b3JcbiAgICBpZiAoZWRpdG9yLmN1cnNvckxpbmVEZWNvcmF0aW9ucyAhPSBudWxsKSB7XG4gICAgICBmb3IgKGNvbnN0IGN1cnNvckxpbmVEZWNvcmF0aW9uIG9mIGVkaXRvci5jdXJzb3JMaW5lRGVjb3JhdGlvbnMpIHtcbiAgICAgICAgY3Vyc29yTGluZURlY29yYXRpb24uZGVzdHJveSgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZWRpdG9yLnNldFRleHQoY29kZUJsb2NrLnRleHRDb250ZW50IS5yZXBsYWNlKC9cXG4kLywgJycpKVxuICAgIGNvbnN0IGdyYW1tYXIgPSBhdG9tLmdyYW1tYXJzLmdyYW1tYXJGb3JTY29wZU5hbWUoXG4gICAgICBzY29wZUZvckZlbmNlTmFtZShmZW5jZU5hbWUpLFxuICAgIClcbiAgICBpZiAoZ3JhbW1hcikgZWRpdG9yLnNldEdyYW1tYXIoZ3JhbW1hcilcbiAgfVxuXG4gIHJldHVybiBkb21GcmFnbWVudFxufVxuXG5mdW5jdGlvbiB0b2tlbml6ZUNvZGVCbG9ja3MoaHRtbDogc3RyaW5nLCBkZWZhdWx0TGFuZ3VhZ2U6IHN0cmluZyA9ICd0ZXh0Jykge1xuICBjb25zdCBkb2MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICBkb2MuaW5uZXJIVE1MID0gaHRtbFxuXG4gIGNvbnN0IGZvbnRGYW1pbHkgPSBhdG9tLmNvbmZpZy5nZXQoJ2VkaXRvci5mb250RmFtaWx5JylcbiAgaWYgKGZvbnRGYW1pbHkpIHtcbiAgICBkb2NcbiAgICAgIC5xdWVyeVNlbGVjdG9yQWxsKCdjb2RlJylcbiAgICAgIC5mb3JFYWNoKChjb2RlKSA9PiAoY29kZS5zdHlsZS5mb250RmFtaWx5ID0gZm9udEZhbWlseSB8fCBudWxsKSlcbiAgfVxuXG4gIGRvYy5xdWVyeVNlbGVjdG9yQWxsKCdwcmUnKS5mb3JFYWNoKGZ1bmN0aW9uKHByZUVsZW1lbnQpIHtcbiAgICBjb25zdCBjb2RlQmxvY2sgPSBwcmVFbGVtZW50LmZpcnN0RWxlbWVudENoaWxkIGFzIEhUTUxFbGVtZW50XG4gICAgY29uc3QgZmVuY2VOYW1lID1cbiAgICAgIGNvZGVCbG9jay5jbGFzc05hbWUucmVwbGFjZSgvXihsYW5nLXxzb3VyY2VDb2RlICkvLCAnJykgfHwgZGVmYXVsdExhbmd1YWdlXG5cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdW5zYWZlLWFueVxuICAgIGNvbnN0IGhpZ2hsaWdodGVkSHRtbDogc3RyaW5nID0gaGlnaGxpZ2h0KHtcbiAgICAgIGZpbGVDb250ZW50czogY29kZUJsb2NrLmlubmVyVGV4dCxcbiAgICAgIHNjb3BlTmFtZTogc2NvcGVGb3JGZW5jZU5hbWUoZmVuY2VOYW1lKSxcbiAgICAgIG5ic3A6IGZhbHNlLFxuICAgICAgbGluZURpdnM6IGZhbHNlLFxuICAgICAgZWRpdG9yRGl2OiB0cnVlLFxuICAgICAgZWRpdG9yRGl2VGFnOiAncHJlJyxcbiAgICAgIC8vIFRoZSBgZWRpdG9yYCBjbGFzcyBtZXNzZXMgdGhpbmdzIHVwIGFzIGAuZWRpdG9yYCBoYXMgYWJzb2x1dGVseSBwb3NpdGlvbmVkIGxpbmVzXG4gICAgICBlZGl0b3JEaXZDbGFzczogZmVuY2VOYW1lXG4gICAgICAgID8gYGVkaXRvci1jb2xvcnMgbGFuZy0ke2ZlbmNlTmFtZX1gXG4gICAgICAgIDogJ2VkaXRvci1jb2xvcnMnLFxuICAgIH0pXG5cbiAgICBwcmVFbGVtZW50Lm91dGVySFRNTCA9IGhpZ2hsaWdodGVkSHRtbFxuICB9KVxuXG4gIHJldHVybiBkb2MuaW5uZXJIVE1MXG59XG4iXX0=