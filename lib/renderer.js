"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const highlight = require("atom-highlight");
const pandocHelper = require("./pandoc-helper");
const markdownIt = require("./markdown-it-helper");
const extension_helper_1 = require("./extension-helper");
const imageWatcher = require("./image-watch-helper");
const util_1 = require("./util");
const { resourcePath } = atom.getLoadSettings();
const packagePath = path.dirname(__dirname);
async function toHTML(text, filePath, grammar, renderLaTeX, copyHTMLFlag) {
    if (text === null) {
        text = '';
    }
    const doc = await render(text, filePath, renderLaTeX, copyHTMLFlag);
    let defaultCodeLanguage;
    if ((grammar && grammar.scopeName) === 'source.litcoffee') {
        defaultCodeLanguage = 'coffee';
    }
    if (!atom.config.get('markdown-preview-plus.enablePandoc') ||
        !atom.config.get('markdown-preview-plus.useNativePandocCodeStyles')) {
        tokenizeCodeBlocks(doc, defaultCodeLanguage);
    }
    return doc.documentElement.outerHTML;
}
exports.toHTML = toHTML;
async function render(text, filePath, renderLaTeX, copyHTMLFlag) {
    text = text.replace(/^\s*<!doctype(\s+.*)?>\s*/i, '');
    let html;
    let error;
    if (atom.config.get('markdown-preview-plus.enablePandoc')) {
        try {
            html = await pandocHelper.renderPandoc(text, filePath, renderLaTeX);
        }
        catch (err) {
            error = err.message;
            html = err.html;
        }
    }
    else {
        html = markdownIt.render(text, renderLaTeX);
    }
    const parser = new DOMParser();
    const doc = parser.parseFromString(html, 'text/html');
    sanitize(doc);
    await resolveImagePaths(doc, filePath, copyHTMLFlag);
    if (error) {
        const errd = doc.createElement('div');
        const msgel = doc.createElement('code');
        msgel.innerText = error;
        errd.innerHTML = `<h1>Pandoc Error:</h1>${msgel.outerHTML}<hr>`;
        doc.body.insertBefore(errd, doc.body.firstElementChild);
    }
    return doc;
}
exports.render = render;
function sanitize(doc) {
    doc.querySelectorAll("script:not([type^='math/tex'])").forEach((elem) => {
        elem.remove();
    });
    const attributesToRemove = [
        'onabort',
        'onblur',
        'onchange',
        'onclick',
        'ondbclick',
        'onerror',
        'onfocus',
        'onkeydown',
        'onkeypress',
        'onkeyup',
        'onload',
        'onmousedown',
        'onmousemove',
        'onmouseover',
        'onmouseout',
        'onmouseup',
        'onreset',
        'onresize',
        'onscroll',
        'onselect',
        'onsubmit',
        'onunload',
    ];
    doc.querySelectorAll('*').forEach((elem) => attributesToRemove.map((attribute) => {
        elem.removeAttribute(attribute);
    }));
}
async function resolveImagePaths(doc, filePath, copyHTMLFlag) {
    const [rootDirectory] = atom.project.relativizePath(filePath || '');
    await Promise.all(Array.from(doc.querySelectorAll('img')).map(async function (img) {
        let src = img.getAttribute('src');
        if (src) {
            if (!atom.config.get('markdown-preview-plus.enablePandoc')) {
                src = markdownIt.decode(src);
            }
            if (src.match(/^(https?|atom|data):/)) {
                return;
            }
            if (src.startsWith(process.resourcesPath)) {
                return;
            }
            if (src.startsWith(resourcePath)) {
                return;
            }
            if (src.startsWith(packagePath)) {
                return;
            }
            if (src[0] === '/') {
                if (!util_1.isFileSync(src)) {
                    try {
                        if (rootDirectory !== null) {
                            src = path.join(rootDirectory, src.substring(1));
                        }
                    }
                    catch (e) {
                    }
                }
            }
            else if (filePath) {
                src = path.resolve(path.dirname(filePath), src);
            }
            if (!copyHTMLFlag) {
                const v = await imageWatcher.getVersion(src, filePath);
                if (v) {
                    src = `${src}?v=${v}`;
                }
            }
            img.src = src;
        }
        return;
    }));
}
function highlightCodeBlocks(domFragment, defaultLanguage = 'text') {
    const fontFamily = atom.config.get('editor.fontFamily');
    if (fontFamily) {
        for (const codeElement of Array.from(domFragment.querySelectorAll('code'))) {
            codeElement.style.fontFamily = fontFamily;
        }
    }
    for (const preElement of Array.from(domFragment.querySelectorAll('pre'))) {
        const codeBlock = preElement.firstElementChild !== null
            ? preElement.firstElementChild
            : preElement;
        const cbClass = codeBlock.className;
        const fenceName = cbClass
            ? cbClass.replace(/^(lang-|sourceCode )/, '')
            : defaultLanguage;
        preElement.outerHTML = highlight({
            fileContents: codeBlock.textContent.replace(/\n$/, ''),
            scopeName: extension_helper_1.scopeForFenceName(fenceName),
            nbsp: false,
            lineDivs: true,
            editorDiv: true,
            editorDivTag: 'atom-text-editor',
            editorDivClass: fenceName ? `lang-${fenceName}` : '',
        });
    }
    return domFragment;
}
exports.highlightCodeBlocks = highlightCodeBlocks;
function tokenizeCodeBlocks(doc, defaultLanguage = 'text') {
    const fontFamily = atom.config.get('editor.fontFamily');
    if (fontFamily) {
        doc
            .querySelectorAll('code')
            .forEach((code) => (code.style.fontFamily = fontFamily || null));
    }
    doc.querySelectorAll('pre').forEach(function (preElement) {
        const codeBlock = preElement.firstElementChild;
        const fenceName = codeBlock.className.replace(/^(lang-|sourceCode )/, '') || defaultLanguage;
        const highlightedHtml = highlight({
            fileContents: codeBlock.innerText,
            scopeName: extension_helper_1.scopeForFenceName(fenceName),
            nbsp: false,
            lineDivs: false,
            editorDiv: true,
            editorDivTag: 'pre',
            editorDivClass: fenceName
                ? `editor-colors lang-${fenceName}`
                : 'editor-colors',
        });
        preElement.outerHTML = highlightedHtml;
    });
}
//# sourceMappingURL=data:application/json;base64,