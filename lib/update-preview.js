"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const wrapped_dom_tree_1 = require("./wrapped-dom-tree");
const MathJaxHelper = require("./mathjax-helper");
const renderer = require("./renderer");
const util_1 = require("./util");
class UpdatePreview {
    constructor(dom) {
        this.tree = new wrapped_dom_tree_1.WrappedDomTree(dom, true);
    }
    update(frame, domFragment, renderLaTeX) {
        prepareCodeBlocksForAtomEditors(frame.contentDocument, domFragment);
        if (this.domFragment && domFragment.isEqualNode(this.domFragment)) {
            return undefined;
        }
        const firstTime = this.domFragment === undefined;
        this.domFragment = domFragment.cloneNode(true);
        const newDom = frame.contentDocument.createElement('div');
        newDom.className = 'update-preview';
        newDom.appendChild(domFragment);
        const newTree = new wrapped_dom_tree_1.WrappedDomTree(newDom, false);
        const r = this.tree.diffTo(newTree);
        newTree.removeSelf();
        if (firstTime) {
            r.possibleReplace = undefined;
            r.last = undefined;
        }
        if (renderLaTeX) {
            r.inserted = r.inserted.map(function (elm) {
                while (elm.parentElement && !elm.innerHTML) {
                    elm = elm.parentElement;
                }
                return elm;
            });
            r.inserted = r.inserted.filter((elm) => !!elm);
            util_1.handlePromise(MathJaxHelper.mathProcessor(frame, r.inserted));
        }
        if (!atom.config.get('markdown-preview-plus.enablePandoc') ||
            !atom.config.get('markdown-preview-plus.useNativePandocCodeStyles')) {
            for (const elm of r.inserted) {
                if (typeof elm.querySelectorAll === 'function') {
                    renderer.highlightCodeBlocks(elm);
                }
            }
        }
        this.updateOrderedListsStart(this.domFragment);
        return r;
    }
    updateOrderedListsStart(fragment) {
        if (this.tree.shownTree === undefined) {
            throw new Error('shownTree undefined in updateOrderedListsStart');
        }
        const previewOLs = this.tree.shownTree.dom.querySelectorAll('ol');
        const parsedOLs = fragment.querySelectorAll('ol');
        const end = parsedOLs.length - 1;
        for (let i = 0; i <= end; i++) {
            const previewStart = previewOLs[i].getAttribute('start');
            const parsedStart = parsedOLs[i].getAttribute('start');
            if (previewStart === parsedStart) {
                continue;
            }
            else if (parsedStart !== null) {
                previewOLs[i].setAttribute('start', parsedStart);
            }
            else {
                previewOLs[i].removeAttribute('start');
            }
        }
    }
}
exports.UpdatePreview = UpdatePreview;
function prepareCodeBlocksForAtomEditors(document, domFragment) {
    for (const preElement of Array.from(domFragment.querySelectorAll('pre'))) {
        const preWrapper = document.createElement('span');
        preWrapper.className = 'atom-text-editor';
        preElement.parentNode.insertBefore(preWrapper, preElement);
        preWrapper.appendChild(preElement);
    }
    return domFragment;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLXByZXZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXBkYXRlLXByZXZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFzQkEseURBQW1EO0FBQ25ELGtEQUFrRDtBQUNsRCx1Q0FBdUM7QUFDdkMsaUNBQXNDO0FBRXRDO0lBS0UsWUFBWSxHQUFZO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxpQ0FBYyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUMzQyxDQUFDO0lBRU0sTUFBTSxDQUNYLEtBQXdCLEVBQ3hCLFdBQTZCLEVBQzdCLFdBQW9CO1FBRXBCLCtCQUErQixDQUFDLEtBQUssQ0FBQyxlQUFlLEVBQUUsV0FBVyxDQUFDLENBQUE7UUFFbkUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEUsTUFBTSxDQUFDLFNBQVMsQ0FBQTtRQUNsQixDQUFDO1FBRUQsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsS0FBSyxTQUFTLENBQUE7UUFDaEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBcUIsQ0FBQTtRQUVsRSxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUN6RCxNQUFNLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFBO1FBQ25DLE1BQU0sQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDL0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxpQ0FBYyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUVqRCxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNuQyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUE7UUFFcEIsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUNkLENBQUMsQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFBO1lBQzdCLENBQUMsQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFBO1FBQ3BCLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLENBQUMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBUyxHQUFTO2dCQUM1QyxPQUFPLEdBQUcsQ0FBQyxhQUFhLElBQUksQ0FBRSxHQUFtQixDQUFDLFNBQVMsRUFBRSxDQUFDO29CQUM1RCxHQUFHLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQTtnQkFDekIsQ0FBQztnQkFDRCxNQUFNLENBQUMsR0FBRyxDQUFBO1lBQ1osQ0FBQyxDQUFDLENBQUE7WUFDRixDQUFDLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDOUMsb0JBQWEsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtRQUMvRCxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQ0QsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxvQ0FBb0MsQ0FBQztZQUN0RCxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGlEQUFpRCxDQUNwRSxDQUFDLENBQUMsQ0FBQztZQUNELEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixFQUFFLENBQUMsQ0FBQyxPQUFRLEdBQVcsQ0FBQyxnQkFBZ0IsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDO29CQUN4RCxRQUFRLENBQUMsbUJBQW1CLENBQUMsR0FBYyxDQUFDLENBQUE7Z0JBQzlDLENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQztRQUVELElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7UUFFOUMsTUFBTSxDQUFDLENBQUMsQ0FBQTtJQUNWLENBQUM7SUFFTyx1QkFBdUIsQ0FBQyxRQUEwQjtRQUN4RCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ3RDLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0RBQWdELENBQUMsQ0FBQTtRQUNuRSxDQUFDO1FBQ0QsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ2pFLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUVqRCxNQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQTtRQUNoQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzlCLE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUE7WUFDeEQsTUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUV0RCxFQUFFLENBQUMsQ0FBQyxZQUFZLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQztnQkFDakMsUUFBUSxDQUFBO1lBQ1YsQ0FBQztZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDaEMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUE7WUFDbEQsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUE7WUFDeEMsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUFwRkQsc0NBb0ZDO0FBRUQseUNBQ0UsUUFBc0IsRUFDdEIsV0FBNkI7SUFFN0IsR0FBRyxDQUFDLENBQUMsTUFBTSxVQUFVLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekUsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUNqRCxVQUFVLENBQUMsU0FBUyxHQUFHLGtCQUFrQixDQUFBO1FBQ3pDLFVBQVUsQ0FBQyxVQUFXLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQTtRQUMzRCxVQUFVLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQ3BDLENBQUM7SUFDRCxNQUFNLENBQUMsV0FBVyxDQUFBO0FBQ3BCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgaW5jb3Jwb3JhdGVzIGNvZGUgZnJvbSBbbWFya21vbl0oaHR0cHM6Ly9naXRodWIuY29tL3l5amhhby9tYXJrbW9uKVxuLy8gY292ZXJlZCBieSB0aGUgZm9sbG93aW5nIHRlcm1zOlxuLy9cbi8vIENvcHlyaWdodCAoYykgMjAxNCwgWWFvIFl1amlhbiwgaHR0cDovL3lqeWFvLmNvbVxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5pbXBvcnQgeyBXcmFwcGVkRG9tVHJlZSB9IGZyb20gJy4vd3JhcHBlZC1kb20tdHJlZSdcbmltcG9ydCBNYXRoSmF4SGVscGVyID0gcmVxdWlyZSgnLi9tYXRoamF4LWhlbHBlcicpXG5pbXBvcnQgcmVuZGVyZXIgPSByZXF1aXJlKCcuL3JlbmRlcmVyJylcbmltcG9ydCB7IGhhbmRsZVByb21pc2UgfSBmcm9tICcuL3V0aWwnXG5cbmV4cG9ydCBjbGFzcyBVcGRhdGVQcmV2aWV3IHtcbiAgcHJpdmF0ZSBkb21GcmFnbWVudD86IERvY3VtZW50RnJhZ21lbnRcbiAgcHJpdmF0ZSB0cmVlOiBXcmFwcGVkRG9tVHJlZVxuICAvLyBAcGFyYW0gZG9tIEEgRE9NIGVsZW1lbnQgb2JqZWN0XG4gIC8vICAgIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9lbGVtZW50XG4gIGNvbnN0cnVjdG9yKGRvbTogRWxlbWVudCkge1xuICAgIHRoaXMudHJlZSA9IG5ldyBXcmFwcGVkRG9tVHJlZShkb20sIHRydWUpXG4gIH1cblxuICBwdWJsaWMgdXBkYXRlKFxuICAgIGZyYW1lOiBIVE1MSUZyYW1lRWxlbWVudCxcbiAgICBkb21GcmFnbWVudDogRG9jdW1lbnRGcmFnbWVudCxcbiAgICByZW5kZXJMYVRlWDogYm9vbGVhbixcbiAgKSB7XG4gICAgcHJlcGFyZUNvZGVCbG9ja3NGb3JBdG9tRWRpdG9ycyhmcmFtZS5jb250ZW50RG9jdW1lbnQsIGRvbUZyYWdtZW50KVxuXG4gICAgaWYgKHRoaXMuZG9tRnJhZ21lbnQgJiYgZG9tRnJhZ21lbnQuaXNFcXVhbE5vZGUodGhpcy5kb21GcmFnbWVudCkpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG5cbiAgICBjb25zdCBmaXJzdFRpbWUgPSB0aGlzLmRvbUZyYWdtZW50ID09PSB1bmRlZmluZWRcbiAgICB0aGlzLmRvbUZyYWdtZW50ID0gZG9tRnJhZ21lbnQuY2xvbmVOb2RlKHRydWUpIGFzIERvY3VtZW50RnJhZ21lbnRcblxuICAgIGNvbnN0IG5ld0RvbSA9IGZyYW1lLmNvbnRlbnREb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIG5ld0RvbS5jbGFzc05hbWUgPSAndXBkYXRlLXByZXZpZXcnXG4gICAgbmV3RG9tLmFwcGVuZENoaWxkKGRvbUZyYWdtZW50KVxuICAgIGNvbnN0IG5ld1RyZWUgPSBuZXcgV3JhcHBlZERvbVRyZWUobmV3RG9tLCBmYWxzZSlcblxuICAgIGNvbnN0IHIgPSB0aGlzLnRyZWUuZGlmZlRvKG5ld1RyZWUpXG4gICAgbmV3VHJlZS5yZW1vdmVTZWxmKClcblxuICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgIHIucG9zc2libGVSZXBsYWNlID0gdW5kZWZpbmVkXG4gICAgICByLmxhc3QgPSB1bmRlZmluZWRcbiAgICB9XG5cbiAgICBpZiAocmVuZGVyTGFUZVgpIHtcbiAgICAgIHIuaW5zZXJ0ZWQgPSByLmluc2VydGVkLm1hcChmdW5jdGlvbihlbG06IE5vZGUpIHtcbiAgICAgICAgd2hpbGUgKGVsbS5wYXJlbnRFbGVtZW50ICYmICEoZWxtIGFzIEhUTUxFbGVtZW50KS5pbm5lckhUTUwpIHtcbiAgICAgICAgICBlbG0gPSBlbG0ucGFyZW50RWxlbWVudFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbG1cbiAgICAgIH0pXG4gICAgICByLmluc2VydGVkID0gci5pbnNlcnRlZC5maWx0ZXIoKGVsbSkgPT4gISFlbG0pXG4gICAgICBoYW5kbGVQcm9taXNlKE1hdGhKYXhIZWxwZXIubWF0aFByb2Nlc3NvcihmcmFtZSwgci5pbnNlcnRlZCkpXG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgIWF0b20uY29uZmlnLmdldCgnbWFya2Rvd24tcHJldmlldy1wbHVzLmVuYWJsZVBhbmRvYycpIHx8XG4gICAgICAhYXRvbS5jb25maWcuZ2V0KCdtYXJrZG93bi1wcmV2aWV3LXBsdXMudXNlTmF0aXZlUGFuZG9jQ29kZVN0eWxlcycpXG4gICAgKSB7XG4gICAgICBmb3IgKGNvbnN0IGVsbSBvZiByLmluc2VydGVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgKGVsbSBhcyBhbnkpLnF1ZXJ5U2VsZWN0b3JBbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZW5kZXJlci5oaWdobGlnaHRDb2RlQmxvY2tzKGVsbSBhcyBFbGVtZW50KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVPcmRlcmVkTGlzdHNTdGFydCh0aGlzLmRvbUZyYWdtZW50KVxuXG4gICAgcmV0dXJuIHJcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlT3JkZXJlZExpc3RzU3RhcnQoZnJhZ21lbnQ6IERvY3VtZW50RnJhZ21lbnQpIHtcbiAgICBpZiAodGhpcy50cmVlLnNob3duVHJlZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Nob3duVHJlZSB1bmRlZmluZWQgaW4gdXBkYXRlT3JkZXJlZExpc3RzU3RhcnQnKVxuICAgIH1cbiAgICBjb25zdCBwcmV2aWV3T0xzID0gdGhpcy50cmVlLnNob3duVHJlZS5kb20ucXVlcnlTZWxlY3RvckFsbCgnb2wnKVxuICAgIGNvbnN0IHBhcnNlZE9McyA9IGZyYWdtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ29sJylcblxuICAgIGNvbnN0IGVuZCA9IHBhcnNlZE9Mcy5sZW5ndGggLSAxXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gZW5kOyBpKyspIHtcbiAgICAgIGNvbnN0IHByZXZpZXdTdGFydCA9IHByZXZpZXdPTHNbaV0uZ2V0QXR0cmlidXRlKCdzdGFydCcpXG4gICAgICBjb25zdCBwYXJzZWRTdGFydCA9IHBhcnNlZE9Mc1tpXS5nZXRBdHRyaWJ1dGUoJ3N0YXJ0JylcblxuICAgICAgaWYgKHByZXZpZXdTdGFydCA9PT0gcGFyc2VkU3RhcnQpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH0gZWxzZSBpZiAocGFyc2VkU3RhcnQgIT09IG51bGwpIHtcbiAgICAgICAgcHJldmlld09Mc1tpXS5zZXRBdHRyaWJ1dGUoJ3N0YXJ0JywgcGFyc2VkU3RhcnQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmV2aWV3T0xzW2ldLnJlbW92ZUF0dHJpYnV0ZSgnc3RhcnQnKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcmVwYXJlQ29kZUJsb2Nrc0ZvckF0b21FZGl0b3JzKFxuICBkb2N1bWVudDogSFRNTERvY3VtZW50LFxuICBkb21GcmFnbWVudDogRG9jdW1lbnRGcmFnbWVudCxcbikge1xuICBmb3IgKGNvbnN0IHByZUVsZW1lbnQgb2YgQXJyYXkuZnJvbShkb21GcmFnbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdwcmUnKSkpIHtcbiAgICBjb25zdCBwcmVXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpXG4gICAgcHJlV3JhcHBlci5jbGFzc05hbWUgPSAnYXRvbS10ZXh0LWVkaXRvcidcbiAgICBwcmVFbGVtZW50LnBhcmVudE5vZGUhLmluc2VydEJlZm9yZShwcmVXcmFwcGVyLCBwcmVFbGVtZW50KVxuICAgIHByZVdyYXBwZXIuYXBwZW5kQ2hpbGQocHJlRWxlbWVudClcbiAgfVxuICByZXR1cm4gZG9tRnJhZ21lbnRcbn1cbiJdfQ==