'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const wrapped_dom_tree_1 = require("./wrapped-dom-tree");
const MathJaxHelper = require("./mathjax-helper");
const renderer = require("./renderer");
class UpdatePreview {
    constructor(dom) {
        this.tree = new wrapped_dom_tree_1.WrappedDomTree(dom, true);
    }
    update(domFragment, renderLaTeX) {
        prepareCodeBlocksForAtomEditors(domFragment);
        if (this.domFragment && domFragment.isEqualNode(this.domFragment)) {
            return;
        }
        const firstTime = this.domFragment === undefined;
        this.domFragment = domFragment.cloneNode(true);
        const newDom = document.createElement('div');
        newDom.className = 'update-preview';
        newDom.appendChild(domFragment);
        const newTree = new wrapped_dom_tree_1.WrappedDomTree(newDom, false);
        const r = this.tree.diffTo(newTree);
        newTree.removeSelf();
        if (firstTime) {
            r.possibleReplace = undefined;
            r.last = undefined;
        }
        if (renderLaTeX) {
            r.inserted = r.inserted.map(function (elm) {
                while (elm.parentElement && !elm.innerHTML) {
                    elm = elm.parentElement;
                }
                return elm;
            });
            r.inserted = r.inserted.filter((elm) => !!elm);
            MathJaxHelper.mathProcessor(r.inserted);
        }
        if (!atom.config.get('markdown-preview-plus.enablePandoc') ||
            !atom.config.get('markdown-preview-plus.useNativePandocCodeStyles')) {
            for (let elm of Array.from(r.inserted)) {
                if (elm instanceof Element) {
                    renderer.convertCodeBlocksToAtomEditors(elm);
                }
            }
        }
        this.updateOrderedListsStart(this.domFragment);
        return r;
    }
    updateOrderedListsStart(fragment) {
        if (this.tree.shownTree === undefined) {
            throw new Error('shownTree undefined in updateOrderedListsStart');
        }
        const previewOLs = this.tree.shownTree.dom.querySelectorAll('ol');
        const parsedOLs = fragment.querySelectorAll('ol');
        for (let i = 0, end = parsedOLs.length - 1; i <= end; i++) {
            const previewStart = previewOLs[i].getAttribute('start');
            const parsedStart = parsedOLs[i].getAttribute('start');
            if (previewStart === parsedStart) {
                continue;
            }
            else if (parsedStart != null) {
                previewOLs[i].setAttribute('start', parsedStart);
            }
            else {
                previewOLs[i].removeAttribute('start');
            }
        }
    }
}
exports.UpdatePreview = UpdatePreview;
function prepareCodeBlocksForAtomEditors(domFragment) {
    for (let preElement of Array.from(domFragment.querySelectorAll('pre'))) {
        const preWrapper = document.createElement('span');
        preWrapper.className = 'atom-text-editor';
        preElement.parentNode.insertBefore(preWrapper, preElement);
        preWrapper.appendChild(preElement);
    }
    return domFragment;
}
//# sourceMappingURL=data:application/json;base64,