"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const WrappedDomTree = require('./wrapped-dom-tree');
const MathJaxHelper = require('./mathjax-helper');
const renderer = require('./renderer');
class UpdatePreview {
    constructor(dom) {
        this.tree = new WrappedDomTree(dom, true);
        this.domFragment = document.createDocumentFragment();
    }
    update(domFragment, renderLaTeX) {
        prepareCodeBlocksForAtomEditors(domFragment);
        if (domFragment.isEqualNode(this.domFragment)) {
            return;
        }
        const firstTime = this.domFragment.childElementCount === 0;
        this.domFragment = domFragment.cloneNode(true);
        const newDom = document.createElement("div");
        newDom.className = "update-preview";
        newDom.appendChild(domFragment);
        const newTree = new WrappedDomTree(newDom);
        const r = this.tree.diffTo(newTree);
        newTree.removeSelf();
        if (firstTime) {
            r.possibleReplace = null;
            r.last = null;
        }
        if (renderLaTeX) {
            r.inserted = r.inserted.map(function (elm) {
                while (elm && !elm.innerHTML) {
                    elm = elm.parentElement;
                }
                return elm;
            });
            r.inserted = r.inserted.filter(elm => !!elm);
            MathJaxHelper.mathProcessor(r.inserted);
        }
        if (!atom.config.get('markdown-preview-plus.enablePandoc')
            || !atom.config.get('markdown-preview-plus.useNativePandocCodeStyles')) {
            for (let elm of Array.from(r.inserted)) {
                if (elm instanceof Element) {
                    renderer.convertCodeBlocksToAtomEditors(elm);
                }
            }
        }
        this.updateOrderedListsStart();
        return r;
    }
    updateOrderedListsStart() {
        const previewOLs = this.tree.shownTree.dom.querySelectorAll('ol');
        const parsedOLs = this.domFragment.querySelectorAll('ol');
        for (let i = 0, end = parsedOLs.length - 1; i <= end; i++) {
            const previewStart = previewOLs[i].getAttribute('start');
            const parsedStart = parsedOLs[i].getAttribute('start');
            if (previewStart === parsedStart) {
                continue;
            }
            else if (parsedStart != null) {
                previewOLs[i].setAttribute('start', parsedStart);
            }
            else {
                previewOLs[i].removeAttribute('start');
            }
        }
    }
}
exports.UpdatePreview = UpdatePreview;
function prepareCodeBlocksForAtomEditors(domFragment) {
    for (let preElement of Array.from(domFragment.querySelectorAll('pre'))) {
        const preWrapper = document.createElement('span');
        preWrapper.className = 'atom-text-editor';
        preElement.parentNode.insertBefore(preWrapper, preElement);
        preWrapper.appendChild(preElement);
    }
    return domFragment;
}
;
//# sourceMappingURL=data:application/json;base64,