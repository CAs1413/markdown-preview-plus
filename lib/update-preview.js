"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const wrapped_dom_tree_1 = require("./wrapped-dom-tree");
const MathJaxHelper = require("./mathjax-helper");
const renderer = require("./renderer");
const util_1 = require("./util");
class UpdatePreview {
    constructor(dom) {
        this.tree = new wrapped_dom_tree_1.WrappedDomTree(dom, true);
    }
    update(frame, domFragment, renderLaTeX) {
        prepareCodeBlocksForAtomEditors(frame.contentDocument, domFragment);
        if (this.domFragment && domFragment.isEqualNode(this.domFragment)) {
            return undefined;
        }
        const firstTime = this.domFragment === undefined;
        this.domFragment = domFragment.cloneNode(true);
        const newDom = frame.contentDocument.createElement('div');
        newDom.className = 'update-preview';
        newDom.appendChild(domFragment);
        const newTree = new wrapped_dom_tree_1.WrappedDomTree(newDom, false);
        const r = this.tree.diffTo(newTree);
        newTree.removeSelf();
        if (firstTime) {
            r.possibleReplace = undefined;
            r.last = undefined;
        }
        r.inserted = r.inserted.filter((elm) => elm.nodeType === Node.ELEMENT_NODE);
        if (renderLaTeX) {
            if (firstTime) {
                util_1.handlePromise(MathJaxHelper.mathProcessor(frame, [frame.contentDocument.body]));
            }
            else {
                util_1.handlePromise(MathJaxHelper.mathProcessor(frame, r.inserted));
            }
        }
        if (!atom.config.get('markdown-preview-plus.enablePandoc') ||
            !atom.config.get('markdown-preview-plus.useNativePandocCodeStyles')) {
            for (const elm of r.inserted) {
                renderer.highlightCodeBlocks(elm);
            }
        }
        this.updateOrderedListsStart(this.domFragment);
        return r;
    }
    updateOrderedListsStart(fragment) {
        if (this.tree.shownTree === undefined) {
            throw new Error('shownTree undefined in updateOrderedListsStart');
        }
        const previewOLs = this.tree.shownTree.dom.querySelectorAll('ol');
        const parsedOLs = fragment.querySelectorAll('ol');
        const end = parsedOLs.length - 1;
        for (let i = 0; i <= end; i++) {
            const previewStart = previewOLs[i].getAttribute('start');
            const parsedStart = parsedOLs[i].getAttribute('start');
            if (previewStart === parsedStart) {
                continue;
            }
            else if (parsedStart !== null) {
                previewOLs[i].setAttribute('start', parsedStart);
            }
            else {
                previewOLs[i].removeAttribute('start');
            }
        }
    }
}
exports.UpdatePreview = UpdatePreview;
function prepareCodeBlocksForAtomEditors(document, domFragment) {
    for (const preElement of Array.from(domFragment.querySelectorAll('pre'))) {
        const preWrapper = document.createElement('span');
        preWrapper.className = 'atom-text-editor';
        preElement.parentNode.insertBefore(preWrapper, preElement);
        preWrapper.appendChild(preElement);
    }
    return domFragment;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLXByZXZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXBkYXRlLXByZXZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFzQkEseURBQW1EO0FBQ25ELGtEQUFrRDtBQUNsRCx1Q0FBdUM7QUFDdkMsaUNBQXNDO0FBRXRDO0lBS0UsWUFBWSxHQUFZO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxpQ0FBYyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUMzQyxDQUFDO0lBRU0sTUFBTSxDQUNYLEtBQXdCLEVBQ3hCLFdBQTZCLEVBQzdCLFdBQW9CO1FBRXBCLCtCQUErQixDQUFDLEtBQUssQ0FBQyxlQUFlLEVBQUUsV0FBVyxDQUFDLENBQUE7UUFFbkUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsSUFBSSxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEUsTUFBTSxDQUFDLFNBQVMsQ0FBQTtRQUNsQixDQUFDO1FBRUQsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsS0FBSyxTQUFTLENBQUE7UUFDaEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBcUIsQ0FBQTtRQUVsRSxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUN6RCxNQUFNLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFBO1FBQ25DLE1BQU0sQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDL0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxpQ0FBYyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUVqRCxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNuQyxPQUFPLENB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QUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBcEZELHNDQW9GQztBQUVELHlDQUNFLFFBQXNCLEVBQ3RCLFdBQTZCO0lBRTdCLEdBQUcsQ0FBQyxDQUFDLE1BQU0sVUFBVSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDakQsVUFBVSxDQUFDLFNBQVMsR0FBRyxrQkFBa0IsQ0FBQTtRQUN6QyxVQUFVLENBQUMsVUFBVyxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUE7UUFDM0QsVUFBVSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUNwQyxDQUFDO0lBQ0QsTUFBTSxDQUFDLFdBQVcsQ0FBQTtBQUNwQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBmaWxlIGluY29ycG9yYXRlcyBjb2RlIGZyb20gW21hcmttb25dKGh0dHBzOi8vZ2l0aHViLmNvbS95eWpoYW8vbWFya21vbilcbi8vIGNvdmVyZWQgYnkgdGhlIGZvbGxvd2luZyB0ZXJtczpcbi8vXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTQsIFlhbyBZdWppYW4sIGh0dHA6Ly95anlhby5jb21cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuaW1wb3J0IHsgV3JhcHBlZERvbVRyZWUgfSBmcm9tICcuL3dyYXBwZWQtZG9tLXRyZWUnXG5pbXBvcnQgTWF0aEpheEhlbHBlciA9IHJlcXVpcmUoJy4vbWF0aGpheC1oZWxwZXInKVxuaW1wb3J0IHJlbmRlcmVyID0gcmVxdWlyZSgnLi9yZW5kZXJlcicpXG5pbXBvcnQgeyBoYW5kbGVQcm9taXNlIH0gZnJvbSAnLi91dGlsJ1xuXG5leHBvcnQgY2xhc3MgVXBkYXRlUHJldmlldyB7XG4gIHByaXZhdGUgZG9tRnJhZ21lbnQ/OiBEb2N1bWVudEZyYWdtZW50XG4gIHByaXZhdGUgdHJlZTogV3JhcHBlZERvbVRyZWVcbiAgLy8gQHBhcmFtIGRvbSBBIERPTSBlbGVtZW50IG9iamVjdFxuICAvLyAgICBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvZWxlbWVudFxuICBjb25zdHJ1Y3Rvcihkb206IEVsZW1lbnQpIHtcbiAgICB0aGlzLnRyZWUgPSBuZXcgV3JhcHBlZERvbVRyZWUoZG9tLCB0cnVlKVxuICB9XG5cbiAgcHVibGljIHVwZGF0ZShcbiAgICBmcmFtZTogSFRNTElGcmFtZUVsZW1lbnQsXG4gICAgZG9tRnJhZ21lbnQ6IERvY3VtZW50RnJhZ21lbnQsXG4gICAgcmVuZGVyTGFUZVg6IGJvb2xlYW4sXG4gICkge1xuICAgIHByZXBhcmVDb2RlQmxvY2tzRm9yQXRvbUVkaXRvcnMoZnJhbWUuY29udGVudERvY3VtZW50LCBkb21GcmFnbWVudClcblxuICAgIGlmICh0aGlzLmRvbUZyYWdtZW50ICYmIGRvbUZyYWdtZW50LmlzRXF1YWxOb2RlKHRoaXMuZG9tRnJhZ21lbnQpKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgY29uc3QgZmlyc3RUaW1lID0gdGhpcy5kb21GcmFnbWVudCA9PT0gdW5kZWZpbmVkXG4gICAgdGhpcy5kb21GcmFnbWVudCA9IGRvbUZyYWdtZW50LmNsb25lTm9kZSh0cnVlKSBhcyBEb2N1bWVudEZyYWdtZW50XG5cbiAgICBjb25zdCBuZXdEb20gPSBmcmFtZS5jb250ZW50RG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBuZXdEb20uY2xhc3NOYW1lID0gJ3VwZGF0ZS1wcmV2aWV3J1xuICAgIG5ld0RvbS5hcHBlbmRDaGlsZChkb21GcmFnbWVudClcbiAgICBjb25zdCBuZXdUcmVlID0gbmV3IFdyYXBwZWREb21UcmVlKG5ld0RvbSwgZmFsc2UpXG5cbiAgICBjb25zdCByID0gdGhpcy50cmVlLmRpZmZUbyhuZXdUcmVlKVxuICAgIG5ld1RyZWUucmVtb3ZlU2VsZigpXG5cbiAgICBpZiAoZmlyc3RUaW1lKSB7XG4gICAgICByLnBvc3NpYmxlUmVwbGFjZSA9IHVuZGVmaW5lZFxuICAgICAgci5sYXN0ID0gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgci5pbnNlcnRlZCA9IHIuaW5zZXJ0ZWQuZmlsdGVyKChlbG0pID0+IGVsbS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpXG5cbiAgICBpZiAocmVuZGVyTGFUZVgpIHtcbiAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgaGFuZGxlUHJvbWlzZShcbiAgICAgICAgICBNYXRoSmF4SGVscGVyLm1hdGhQcm9jZXNzb3IoZnJhbWUsIFtmcmFtZS5jb250ZW50RG9jdW1lbnQuYm9keV0pLFxuICAgICAgICApXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYW5kbGVQcm9taXNlKE1hdGhKYXhIZWxwZXIubWF0aFByb2Nlc3NvcihmcmFtZSwgci5pbnNlcnRlZCkpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgIWF0b20uY29uZmlnLmdldCgnbWFya2Rvd24tcHJldmlldy1wbHVzLmVuYWJsZVBhbmRvYycpIHx8XG4gICAgICAhYXRvbS5jb25maWcuZ2V0KCdtYXJrZG93bi1wcmV2aWV3LXBsdXMudXNlTmF0aXZlUGFuZG9jQ29kZVN0eWxlcycpXG4gICAgKSB7XG4gICAgICBmb3IgKGNvbnN0IGVsbSBvZiByLmluc2VydGVkKSB7XG4gICAgICAgIC8vIE5PVEU6IGZpbHRlcmVkIGFib3ZlXG4gICAgICAgIHJlbmRlcmVyLmhpZ2hsaWdodENvZGVCbG9ja3MoZWxtIGFzIEVsZW1lbnQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVPcmRlcmVkTGlzdHNTdGFydCh0aGlzLmRvbUZyYWdtZW50KVxuXG4gICAgcmV0dXJuIHJcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlT3JkZXJlZExpc3RzU3RhcnQoZnJhZ21lbnQ6IERvY3VtZW50RnJhZ21lbnQpIHtcbiAgICBpZiAodGhpcy50cmVlLnNob3duVHJlZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Nob3duVHJlZSB1bmRlZmluZWQgaW4gdXBkYXRlT3JkZXJlZExpc3RzU3RhcnQnKVxuICAgIH1cbiAgICBjb25zdCBwcmV2aWV3T0xzID0gdGhpcy50cmVlLnNob3duVHJlZS5kb20ucXVlcnlTZWxlY3RvckFsbCgnb2wnKVxuICAgIGNvbnN0IHBhcnNlZE9McyA9IGZyYWdtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ29sJylcblxuICAgIGNvbnN0IGVuZCA9IHBhcnNlZE9Mcy5sZW5ndGggLSAxXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gZW5kOyBpKyspIHtcbiAgICAgIGNvbnN0IHByZXZpZXdTdGFydCA9IHByZXZpZXdPTHNbaV0uZ2V0QXR0cmlidXRlKCdzdGFydCcpXG4gICAgICBjb25zdCBwYXJzZWRTdGFydCA9IHBhcnNlZE9Mc1tpXS5nZXRBdHRyaWJ1dGUoJ3N0YXJ0JylcblxuICAgICAgaWYgKHByZXZpZXdTdGFydCA9PT0gcGFyc2VkU3RhcnQpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH0gZWxzZSBpZiAocGFyc2VkU3RhcnQgIT09IG51bGwpIHtcbiAgICAgICAgcHJldmlld09Mc1tpXS5zZXRBdHRyaWJ1dGUoJ3N0YXJ0JywgcGFyc2VkU3RhcnQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmV2aWV3T0xzW2ldLnJlbW92ZUF0dHJpYnV0ZSgnc3RhcnQnKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcmVwYXJlQ29kZUJsb2Nrc0ZvckF0b21FZGl0b3JzKFxuICBkb2N1bWVudDogSFRNTERvY3VtZW50LFxuICBkb21GcmFnbWVudDogRG9jdW1lbnRGcmFnbWVudCxcbikge1xuICBmb3IgKGNvbnN0IHByZUVsZW1lbnQgb2YgQXJyYXkuZnJvbShkb21GcmFnbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdwcmUnKSkpIHtcbiAgICBjb25zdCBwcmVXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpXG4gICAgcHJlV3JhcHBlci5jbGFzc05hbWUgPSAnYXRvbS10ZXh0LWVkaXRvcidcbiAgICBwcmVFbGVtZW50LnBhcmVudE5vZGUhLmluc2VydEJlZm9yZShwcmVXcmFwcGVyLCBwcmVFbGVtZW50KVxuICAgIHByZVdyYXBwZXIuYXBwZW5kQ2hpbGQocHJlRWxlbWVudClcbiAgfVxuICByZXR1cm4gZG9tRnJhZ21lbnRcbn1cbiJdfQ==