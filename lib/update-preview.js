"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const wrapped_dom_tree_1 = require("./wrapped-dom-tree");
const MathJaxHelper = require("./mathjax-helper");
const renderer = require("./renderer");
const util_1 = require("./util");
class UpdatePreview {
    constructor(dom) {
        this.tree = new wrapped_dom_tree_1.WrappedDomTree(dom, true);
    }
    update(frame, domFragment, renderLaTeX) {
        prepareCodeBlocksForAtomEditors(frame.contentDocument, domFragment);
        if (this.domFragment && domFragment.isEqualNode(this.domFragment)) {
            return undefined;
        }
        const firstTime = this.domFragment === undefined;
        this.domFragment = domFragment.cloneNode(true);
        const newDom = frame.contentDocument.createElement('div');
        newDom.className = 'update-preview';
        newDom.appendChild(domFragment);
        const newTree = new wrapped_dom_tree_1.WrappedDomTree(newDom, false);
        const r = this.tree.diffTo(newTree);
        newTree.removeSelf();
        if (firstTime) {
            r.possibleReplace = undefined;
            r.last = undefined;
        }
        r.inserted = r.inserted.filter((elm) => elm.nodeType === Node.ELEMENT_NODE);
        if (renderLaTeX) {
            if (firstTime) {
                util_1.handlePromise(MathJaxHelper.mathProcessor(frame, [frame.contentDocument.body]));
            }
            else {
                util_1.handlePromise(MathJaxHelper.mathProcessor(frame, r.inserted));
            }
        }
        if (!atom.config.get('markdown-preview-plus.enablePandoc') ||
            !atom.config.get('markdown-preview-plus.useNativePandocCodeStyles')) {
            for (const elm of r.inserted) {
                renderer.highlightCodeBlocks(elm);
            }
        }
        this.updateOrderedListsStart(this.domFragment);
        return r;
    }
    updateOrderedListsStart(fragment) {
        if (this.tree.shownTree === undefined) {
            throw new Error('shownTree undefined in updateOrderedListsStart');
        }
        if (!util_1.isElement(this.tree.shownTree.dom)) {
            throw new Error('this.tree.shownTree.dom is not an Element in updateOrderedListsStart');
        }
        const previewOLs = this.tree.shownTree.dom.querySelectorAll('ol');
        const parsedOLs = fragment.querySelectorAll('ol');
        const end = parsedOLs.length - 1;
        for (let i = 0; i <= end; i++) {
            const previewStart = previewOLs[i].getAttribute('start');
            const parsedStart = parsedOLs[i].getAttribute('start');
            if (previewStart === parsedStart) {
                continue;
            }
            else if (parsedStart !== null) {
                previewOLs[i].setAttribute('start', parsedStart);
            }
            else {
                previewOLs[i].removeAttribute('start');
            }
        }
    }
}
exports.UpdatePreview = UpdatePreview;
function prepareCodeBlocksForAtomEditors(document, domFragment) {
    for (const preElement of Array.from(domFragment.querySelectorAll('pre'))) {
        const preWrapper = document.createElement('span');
        preWrapper.className = 'atom-text-editor';
        preElement.parentNode.insertBefore(preWrapper, preElement);
        preWrapper.appendChild(preElement);
    }
    return domFragment;
}
//# sourceMappingURL=data:application/json;base64,