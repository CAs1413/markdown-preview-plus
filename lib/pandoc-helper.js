"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const CP = require("child_process");
const fs = require("fs");
const path = require("path");
const atomConfig = () => atom.config.get('markdown-preview-plus');
const getMathJaxPath = (function () {
    let cached = null;
    return function () {
        if (cached !== null) {
            return cached;
        }
        try {
            return (cached = require.resolve('MathJax'));
        }
        catch (e) {
            return '';
        }
    };
})();
function findFileRecursive(filePath, fileName) {
    const bibFile = path.join(filePath, '../', fileName);
    if (fs.existsSync(bibFile)) {
        return bibFile;
    }
    else {
        const newPath = path.join(bibFile, '..');
        if (newPath !== filePath && !_.includes(atom.project.getPaths(), newPath)) {
            return findFileRecursive(newPath, fileName);
        }
        else {
            return false;
        }
    }
}
exports.findFileRecursive = findFileRecursive;
function setPandocOptions(filePath, renderMath) {
    const opts = { maxBuffer: Infinity };
    if (filePath !== undefined) {
        opts.cwd = path.dirname(filePath);
    }
    const mathjaxPath = getMathJaxPath();
    const args = {
        from: atomConfig().pandocMarkdownFlavor,
        to: 'html',
        mathjax: renderMath ? mathjaxPath : undefined,
        filter: atomConfig().pandocFilters,
    };
    if (atomConfig().pandocBibliography) {
        args.filter.push('pandoc-citeproc');
        let bibFile = filePath && findFileRecursive(filePath, atomConfig().pandocBIBFile);
        if (!bibFile) {
            bibFile = atomConfig().pandocBIBFileFallback;
        }
        args.bibliography = bibFile ? bibFile : undefined;
        let cslFile = filePath && findFileRecursive(filePath, atomConfig().pandocCSLFile);
        if (!cslFile) {
            cslFile = atomConfig().pandocCSLFileFallback;
        }
        args.csl = cslFile ? cslFile : undefined;
    }
    return { args, opts };
}
exports.setPandocOptions = setPandocOptions;
function handleError(error, html, renderMath) {
    html = `<h1>Pandoc Error:</h1><pre>${error}</pre><hr>${html}`;
    return handleSuccess(html, renderMath);
}
function handleMath(html) {
    const doc = document.createElement('div');
    doc.innerHTML = html;
    doc.querySelectorAll('.math').forEach(function (elem) {
        let math = elem.innerText;
        const mode = math.indexOf('\\[') > -1 ? '; mode=display' : '';
        math = math.replace(/\\[[()\]]/g, '');
        return (elem.outerHTML =
            '<span class="math">' +
                `<script type='math/tex${mode}'>${math}</script>` +
                '</span>');
    });
    return doc.innerHTML;
}
function removeReferences(html) {
    const doc = document.createElement('div');
    doc.innerHTML = html;
    doc.querySelectorAll('.references').forEach((elem) => {
        elem.remove();
    });
    return doc.innerHTML;
}
function handleSuccess(html, renderMath) {
    if (renderMath) {
        html = handleMath(html);
    }
    if (atomConfig().pandocRemoveReferences) {
        html = removeReferences(html);
    }
    return html;
}
function handleResponse(error, html, renderMath) {
    if (error) {
        return handleError(error, html, renderMath);
    }
    else {
        return handleSuccess(html, renderMath);
    }
}
async function renderPandoc(text, filePath, renderMath) {
    const { args, opts } = setPandocOptions(filePath, renderMath);
    return new Promise((resolve, reject) => {
        const cp = CP.execFile(atomConfig().pandocPath, getArguments(args), opts, function (error, stdout, stderr) {
            if (error) {
                atom.notifications.addError(error.toString(), {
                    stack: error.stack,
                    dismissable: true,
                });
                reject(error);
            }
            const result = handleResponse(stderr || '', stdout || '', renderMath);
            resolve(result);
        });
        cp.stdin.write(text);
        cp.stdin.end();
    });
}
exports.renderPandoc = renderPandoc;
function getArguments(iargs) {
    const args = _.reduce(iargs, function (res, val, key) {
        if (val && !_.isEmpty(val)) {
            const nval = _.flatten([val]);
            _.forEach(nval, function (v) {
                if (!_.isEmpty(v)) {
                    res.push(`--${key}=${v}`);
                }
            });
        }
        return res;
    }, []);
    const res = [];
    for (const val of [
        ...args,
        ...atom.config.get('markdown-preview-plus.pandocArguments'),
    ]) {
        const newval = val.replace(/^(--[\w\-]+)\s(.+)$/i, '$1=$2');
        if (newval.substr(0, 1) === '-') {
            res.push(newval);
        }
    }
    return res;
}
exports.getArguments = getArguments;
//# sourceMappingURL=data:application/json;base64,