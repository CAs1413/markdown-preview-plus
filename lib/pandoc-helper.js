"use strict";
const _ = require('lodash');
const CP = require('child_process');
let fs = null;
let path = null;
const atomConfig = () => atom.config.get('markdown-preview-plus');
const getMathJaxPath = (function () {
    let cached = null;
    return function () {
        if (cached != null) {
            return cached;
        }
        try {
            return cached = require.resolve('MathJax');
        }
        catch (e) {
            return '';
        }
    };
})();
var findFileRecursive = function (filePath, fileName) {
    if (fs == null) {
        fs = require('fs');
    }
    if (path == null) {
        path = require('path');
    }
    const bibFile = path.join(filePath, '../', fileName);
    if (fs.existsSync(bibFile)) {
        return bibFile;
    }
    else {
        const newPath = path.join(bibFile, '..');
        if ((newPath !== filePath) && !_.includes(atom.project.getPaths(), newPath)) {
            return findFileRecursive(newPath, fileName);
        }
        else {
            return false;
        }
    }
};
const setPandocOptions = function (filePath, renderMath) {
    const args = {
        from: atomConfig().pandocMarkdownFlavor,
        to: 'html'
    };
    const opts = { maxBuffer: Infinity };
    if (path == null) {
        path = require('path');
    }
    if (filePath != null) {
        opts.cwd = path.dirname(filePath);
    }
    const mathjaxPath = getMathJaxPath();
    args.mathjax = renderMath ? mathjaxPath : undefined;
    args.filter = atomConfig().pandocFilters;
    if (atomConfig().pandocBibliography) {
        args.filter.push('pandoc-citeproc');
        let bibFile = findFileRecursive(filePath, atomConfig().pandocBIBFile);
        if (!bibFile) {
            bibFile = atomConfig().pandocBIBFileFallback;
        }
        args.bibliography = bibFile ? bibFile : undefined;
        let cslFile = findFileRecursive(filePath, atomConfig().pandocCSLFile);
        if (!cslFile) {
            cslFile = atomConfig().pandocCSLFileFallback;
        }
        args.csl = cslFile ? cslFile : undefined;
    }
    return { args, opts };
};
const handleError = function (error, html, renderMath) {
    const message = _.uniq(error.split('\n'))
        .join('<br>');
    html = `<h1>Pandoc Error:</h1><pre>${error}</pre><hr>${html}`;
    return handleSuccess(html, renderMath);
};
const handleMath = function (html) {
    const doc = document.createElement('div');
    doc.innerHTML = html;
    doc.querySelectorAll('.math').forEach(function (elem) {
        let math = elem.innerText;
        const mode = math.indexOf('\\[') > -1 ? '; mode=display' : '';
        math = math.replace(/\\[[()\]]/g, '');
        return elem.outerHTML =
            '<span class="math">' +
                `<script type='math/tex${mode}'>${math}</script>` +
                '</span>';
    });
    return doc.innerHTML;
};
const removeReferences = function (html) {
    const doc = document.createElement('div');
    doc.innerHTML = html;
    doc.querySelectorAll('.references').forEach(elem => elem.remove());
    return doc.innerHTML;
};
var handleSuccess = function (html, renderMath) {
    if (renderMath) {
        html = handleMath(html);
    }
    if (atomConfig().pandocRemoveReferences) {
        html = removeReferences(html);
    }
    return [null, html];
};
const handleResponse = function (error, html, renderMath) {
    if (error) {
        return handleError(error, html, renderMath);
    }
    else {
        return handleSuccess(html, renderMath);
    }
};
const renderPandoc = function (text, filePath, renderMath, cb) {
    const { args, opts } = setPandocOptions(filePath, renderMath);
    const cp = CP.execFile(atomConfig().pandocPath, getArguments(args), opts, function (error, stdout, stderr) {
        if (error) {
            atom.notifications.addError(error.toString(), {
                stack: error.stack,
                dismissable: true
            });
        }
        const cbargs = handleResponse((stderr != null ? stderr : ''), (stdout != null ? stdout : ''), renderMath);
        return cb(...Array.from(cbargs || []));
    });
    cp.stdin.write(text);
    return cp.stdin.end();
};
var getArguments = function (args) {
    args = _.reduce(args, function (res, val, key) {
        if (!_.isEmpty(val)) {
            val = _.flatten([val]);
            _.forEach(val, function (v) {
                if (!_.isEmpty(v)) {
                    return res.push(`--${key}=${v}`);
                }
            });
        }
        return res;
    }, []);
    args = _.union(args, atom.config.get('markdown-preview-plus.pandocArguments'));
    args = _.map(args, function (val) {
        val = val.replace(/^(--[\w\-]+)\s(.+)$/i, "$1=$2");
        if (val.substr(0, 1) !== '-') {
            return undefined;
        }
        else {
            return val;
        }
    });
    return _.reject(args, _.isEmpty);
};
module.exports = {
    renderPandoc,
    __testing__: {
        findFileRecursive,
        setPandocOptions,
        getArguments
    }
};
//# sourceMappingURL=data:application/json;base64,