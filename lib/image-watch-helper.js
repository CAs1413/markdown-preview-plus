"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-plus");
const _ = require("lodash");
const cast_1 = require("./cast");
const atom_1 = require("atom");
let imageRegister = {};
const refreshImages = _.debounce(async function (src) {
    for (const item of atom.workspace.getPaneItems()) {
        if (cast_1.isMarkdownPreviewView(item)) {
            await item.refreshImages(src);
        }
    }
}, 250);
function srcClosure(src) {
    return function (events) {
        for (const event of events) {
            const i = imageRegister[src];
            if (!i)
                return;
            if (event.action === 'modified' && fs.isFileSync(src)) {
                i.version = Date.now();
            }
            else {
                i.watcher.dispose();
                delete imageRegister[src];
            }
            refreshImages(src);
        }
    };
}
function removeFile(file) {
    imageRegister = _.mapValues(imageRegister, function (image) {
        if (!image)
            return image;
        image.files = _.without(image.files, file);
        image.files = _.filter(image.files, fs.isFileSync);
        if (_.isEmpty(image.files)) {
            image.watched = false;
            image.watcher.dispose();
        }
        return image;
    });
}
exports.removeFile = removeFile;
async function getVersion(image, file) {
    let version;
    const i = imageRegister[image];
    if (!i) {
        if (fs.isFileSync(image)) {
            version = Date.now();
            imageRegister[image] = {
                path: image,
                watched: true,
                files: file ? [file] : [],
                version,
                watcher: await atom_1.watchPath(image, {}, srcClosure(image)),
            };
            return version;
        }
        else {
            return false;
        }
    }
    const files = i.files;
    if (file && !_.includes(files, file)) {
        i.files.push(file);
    }
    version = i.version;
    if (!version && fs.isFileSync(image)) {
        version = Date.now();
        i.version = version;
    }
    return version;
}
exports.getVersion = getVersion;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2Utd2F0Y2gtaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ltYWdlLXdhdGNoLWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhCQUE4QjtBQUM5Qiw0QkFBNEI7QUFDNUIsaUNBQThDO0FBQzlDLCtCQUFvRTtBQUtwRSxJQUFJLGFBQWEsR0FNQyxFQUFFLENBQUE7QUFFcEIsTUFBTSxhQUFhLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLFdBQVUsR0FBVztJQUN6RCxHQUFHLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNqRCxFQUFFLENBQUMsQ0FBQyw0QkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFaEMsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQy9CLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0FBRVAsb0JBQW9CLEdBQVc7SUFDN0IsTUFBTSxDQUFDLFVBQVMsTUFBNkI7UUFDM0MsR0FBRyxDQUFDLENBQUMsTUFBTSxLQUFLLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQztZQUMzQixNQUFNLENBQUMsR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDNUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsTUFBTSxDQUFBO1lBQ2QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxVQUFVLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RELENBQUMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFBO1lBQ3hCLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFBO2dCQUNuQixPQUFPLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUMzQixDQUFDO1lBRUQsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3BCLENBQUM7SUFDSCxDQUFDLENBQUE7QUFDSCxDQUFDO0FBRUQsb0JBQTJCLElBQVk7SUFDckMsYUFBYSxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLFVBQVMsS0FBSztRQUN2RCxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUE7UUFDeEIsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDMUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ2xELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzQixLQUFLLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQTtZQUNyQixLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ3pCLENBQUM7UUFDRCxNQUFNLENBQUMsS0FBSyxDQUFBO0lBQ2QsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDO0FBWEQsZ0NBV0M7QUFFTSxLQUFLLHFCQUFxQixLQUFhLEVBQUUsSUFBYTtJQUMzRCxJQUFJLE9BQU8sQ0FBQTtJQUNYLE1BQU0sQ0FBQyxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUM5QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDUCxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QixPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFBO1lBQ3BCLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRztnQkFDckIsSUFBSSxFQUFFLEtBQUs7Z0JBQ1gsT0FBTyxFQUFFLElBQUk7Z0JBQ2IsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDekIsT0FBTztnQkFDUCxPQUFPLEVBQUUsTUFBTSxnQkFBUyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3ZELENBQUE7WUFDRCxNQUFNLENBQUMsT0FBTyxDQUFBO1FBQ2hCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyxLQUFLLENBQUE7UUFDZCxDQUFDO0lBQ0gsQ0FBQztJQUVELE1BQU0sS0FBSyxHQUFhLENBQUMsQ0FBQyxLQUFLLENBQUE7SUFDL0IsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3BCLENBQUM7SUFFRCxPQUFPLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQTtJQUNuQixFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFBO1FBQ3BCLENBQUMsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO0lBQ3JCLENBQUM7SUFDRCxNQUFNLENBQUMsT0FBTyxDQUFBO0FBQ2hCLENBQUM7QUE5QkQsZ0NBOEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzID0gcmVxdWlyZSgnZnMtcGx1cycpXG5pbXBvcnQgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpXG5pbXBvcnQgeyBpc01hcmtkb3duUHJldmlld1ZpZXcgfSBmcm9tICcuL2Nhc3QnXG5pbXBvcnQgeyB3YXRjaFBhdGgsIEZpbGVzeXN0ZW1DaGFuZ2VFdmVudCwgUGF0aFdhdGNoZXIgfSBmcm9tICdhdG9tJ1xuXG4vLyBUT0RPOiBGaXhtZVxuLy8gdHNsaW50OmRpc2FibGU6IG5vLXVuc2FmZS1hbnlcblxubGV0IGltYWdlUmVnaXN0ZXI6IHsgW2tleTogc3RyaW5nXToge1xuICB2ZXJzaW9uOiBudW1iZXJcbiAgd2F0Y2hlcjogUGF0aFdhdGNoZXJcbiAgZmlsZXM6IHN0cmluZ1tdXG4gIHdhdGNoZWQ6IGJvb2xlYW5cbiAgcGF0aDogc3RyaW5nXG59IHwgdW5kZWZpbmVkIH0gPSB7fVxuXG5jb25zdCByZWZyZXNoSW1hZ2VzID0gXy5kZWJvdW5jZShhc3luYyBmdW5jdGlvbihzcmM6IHN0cmluZykge1xuICBmb3IgKGNvbnN0IGl0ZW0gb2YgYXRvbS53b3Jrc3BhY2UuZ2V0UGFuZUl0ZW1zKCkpIHtcbiAgICBpZiAoaXNNYXJrZG93blByZXZpZXdWaWV3KGl0ZW0pKSB7XG4gICAgICAvLyBUT0RPOiBjaGVjayBhZ2FpbnN0IGltYWdlUmVnaXN0ZXJbc3JjXS52ZXJzaW9uLmZpbGVzXG4gICAgICBhd2FpdCBpdGVtLnJlZnJlc2hJbWFnZXMoc3JjKVxuICAgIH1cbiAgfVxufSwgMjUwKVxuXG5mdW5jdGlvbiBzcmNDbG9zdXJlKHNyYzogc3RyaW5nKSB7XG4gIHJldHVybiBmdW5jdGlvbihldmVudHM6IEZpbGVzeXN0ZW1DaGFuZ2VFdmVudCkge1xuICAgIGZvciAoY29uc3QgZXZlbnQgb2YgZXZlbnRzKSB7XG4gICAgICBjb25zdCBpID0gaW1hZ2VSZWdpc3RlcltzcmNdXG4gICAgICBpZiAoIWkpIHJldHVyblxuICAgICAgaWYgKGV2ZW50LmFjdGlvbiA9PT0gJ21vZGlmaWVkJyAmJiBmcy5pc0ZpbGVTeW5jKHNyYykpIHtcbiAgICAgICAgaS52ZXJzaW9uID0gRGF0ZS5ub3coKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaS53YXRjaGVyLmRpc3Bvc2UoKVxuICAgICAgICBkZWxldGUgaW1hZ2VSZWdpc3RlcltzcmNdXG4gICAgICB9XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWZsb2F0aW5nLXByb21pc2VzXG4gICAgICByZWZyZXNoSW1hZ2VzKHNyYylcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUZpbGUoZmlsZTogc3RyaW5nKSB7XG4gIGltYWdlUmVnaXN0ZXIgPSBfLm1hcFZhbHVlcyhpbWFnZVJlZ2lzdGVyLCBmdW5jdGlvbihpbWFnZSkge1xuICAgIGlmICghaW1hZ2UpIHJldHVybiBpbWFnZVxuICAgIGltYWdlLmZpbGVzID0gXy53aXRob3V0KGltYWdlLmZpbGVzLCBmaWxlKVxuICAgIGltYWdlLmZpbGVzID0gXy5maWx0ZXIoaW1hZ2UuZmlsZXMsIGZzLmlzRmlsZVN5bmMpXG4gICAgaWYgKF8uaXNFbXB0eShpbWFnZS5maWxlcykpIHtcbiAgICAgIGltYWdlLndhdGNoZWQgPSBmYWxzZVxuICAgICAgaW1hZ2Uud2F0Y2hlci5kaXNwb3NlKClcbiAgICB9XG4gICAgcmV0dXJuIGltYWdlXG4gIH0pXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRWZXJzaW9uKGltYWdlOiBzdHJpbmcsIGZpbGU/OiBzdHJpbmcpIHtcbiAgbGV0IHZlcnNpb25cbiAgY29uc3QgaSA9IGltYWdlUmVnaXN0ZXJbaW1hZ2VdXG4gIGlmICghaSkge1xuICAgIGlmIChmcy5pc0ZpbGVTeW5jKGltYWdlKSkge1xuICAgICAgdmVyc2lvbiA9IERhdGUubm93KClcbiAgICAgIGltYWdlUmVnaXN0ZXJbaW1hZ2VdID0ge1xuICAgICAgICBwYXRoOiBpbWFnZSxcbiAgICAgICAgd2F0Y2hlZDogdHJ1ZSxcbiAgICAgICAgZmlsZXM6IGZpbGUgPyBbZmlsZV0gOiBbXSxcbiAgICAgICAgdmVyc2lvbixcbiAgICAgICAgd2F0Y2hlcjogYXdhaXQgd2F0Y2hQYXRoKGltYWdlLCB7fSwgc3JjQ2xvc3VyZShpbWFnZSkpLFxuICAgICAgfVxuICAgICAgcmV0dXJuIHZlcnNpb25cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgY29uc3QgZmlsZXM6IHN0cmluZ1tdID0gaS5maWxlc1xuICBpZiAoZmlsZSAmJiAhXy5pbmNsdWRlcyhmaWxlcywgZmlsZSkpIHtcbiAgICBpLmZpbGVzLnB1c2goZmlsZSlcbiAgfVxuXG4gIHZlcnNpb24gPSBpLnZlcnNpb25cbiAgaWYgKCF2ZXJzaW9uICYmIGZzLmlzRmlsZVN5bmMoaW1hZ2UpKSB7XG4gICAgdmVyc2lvbiA9IERhdGUubm93KClcbiAgICBpLnZlcnNpb24gPSB2ZXJzaW9uXG4gIH1cbiAgcmV0dXJuIHZlcnNpb25cbn1cbiJdfQ==