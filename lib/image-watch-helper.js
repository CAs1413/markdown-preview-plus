"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-plus");
const _ = require("lodash");
const path = require("path");
const cast_1 = require("./cast");
const pathWatcherPath = path.join(atom.packages.resourcePath, '/node_modules/pathwatcher/lib/main');
const pathWatcher = require(pathWatcherPath);
let imageRegister = {};
const refreshImages = _.debounce(function (src) {
    for (const item of atom.workspace.getPaneItems()) {
        if (cast_1.isMarkdownPreviewView(item)) {
            item.refreshImages(src);
        }
    }
}, 250);
function srcClosure(src) {
    return function (event, _path) {
        const i = imageRegister[src];
        if (!i)
            return;
        if (event === 'change' && fs.isFileSync(src)) {
            i.version = Date.now();
        }
        else {
            i.watcher.close();
            delete imageRegister[src];
        }
        refreshImages(src);
    };
}
function removeFile(file) {
    imageRegister = _.mapValues(imageRegister, function (image) {
        if (!image)
            return image;
        image.files = _.without(image.files, file);
        image.files = _.filter(image.files, fs.isFileSync);
        if (_.isEmpty(image.files)) {
            image.watched = false;
            image.watcher.close();
        }
        return image;
    });
}
exports.removeFile = removeFile;
function getVersion(image, file) {
    let version;
    const i = imageRegister[image];
    if (!i) {
        if (fs.isFileSync(image)) {
            version = Date.now();
            imageRegister[image] = {
                path: image,
                watched: true,
                files: file ? [file] : [],
                version,
                watcher: pathWatcher.watch(image, srcClosure(image)),
            };
            return version;
        }
        else {
            return false;
        }
    }
    const files = i.files;
    if (file && !_.includes(files, file)) {
        i.files.push(file);
    }
    version = i.version;
    if (!version && fs.isFileSync(image)) {
        version = Date.now();
        i.version = version;
    }
    return version;
}
exports.getVersion = getVersion;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2Utd2F0Y2gtaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ltYWdlLXdhdGNoLWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhCQUE4QjtBQUM5Qiw0QkFBNEI7QUFDNUIsNkJBQTZCO0FBQzdCLGlDQUE4QztBQUM5QyxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUMvQixJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFDMUIsb0NBQW9DLENBQ3JDLENBQUE7QUFFRCxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUE7QUFLNUMsSUFBSSxhQUFhLEdBTUMsRUFBRSxDQUFBO0FBRXBCLE1BQU0sYUFBYSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBUyxHQUFXO0lBQ25ELEdBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pELEVBQUUsQ0FBQyxDQUFDLDRCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVoQyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3pCLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0FBRVAsb0JBQW9CLEdBQVc7SUFDN0IsTUFBTSxDQUFDLFVBQVMsS0FBYSxFQUFFLEtBQWE7UUFDMUMsTUFBTSxDQUFDLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQzVCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQUMsTUFBTSxDQUFBO1FBQ2QsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLFFBQVEsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QyxDQUFDLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxH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bHVzJylcbmltcG9ydCBfID0gcmVxdWlyZSgnbG9kYXNoJylcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpXG5pbXBvcnQgeyBpc01hcmtkb3duUHJldmlld1ZpZXcgfSBmcm9tICcuL2Nhc3QnXG5jb25zdCBwYXRoV2F0Y2hlclBhdGggPSBwYXRoLmpvaW4oXG4gIGF0b20ucGFja2FnZXMucmVzb3VyY2VQYXRoLFxuICAnL25vZGVfbW9kdWxlcy9wYXRod2F0Y2hlci9saWIvbWFpbicsXG4pXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdmFyLXJlcXVpcmVzXG5jb25zdCBwYXRoV2F0Y2hlciA9IHJlcXVpcmUocGF0aFdhdGNoZXJQYXRoKVxuXG4vLyBUT0RPOiBGaXhtZVxuLy8gdHNsaW50OmRpc2FibGU6IG5vLXVuc2FmZS1hbnlcblxubGV0IGltYWdlUmVnaXN0ZXI6IHsgW2tleTogc3RyaW5nXToge1xuICB2ZXJzaW9uOiBudW1iZXJcbiAgd2F0Y2hlcjogYW55XG4gIGZpbGVzOiBzdHJpbmdbXVxuICB3YXRjaGVkOiBib29sZWFuXG4gIHBhdGg6IHN0cmluZ1xufSB8IHVuZGVmaW5lZCB9ID0ge31cblxuY29uc3QgcmVmcmVzaEltYWdlcyA9IF8uZGVib3VuY2UoZnVuY3Rpb24oc3JjOiBzdHJpbmcpIHtcbiAgZm9yIChjb25zdCBpdGVtIG9mIGF0b20ud29ya3NwYWNlLmdldFBhbmVJdGVtcygpKSB7XG4gICAgaWYgKGlzTWFya2Rvd25QcmV2aWV3VmlldyhpdGVtKSkge1xuICAgICAgLy8gVE9ETzogY2hlY2sgYWdhaW5zdCBpbWFnZVJlZ2lzdGVyW3NyY10udmVyc2lvbi5maWxlc1xuICAgICAgaXRlbS5yZWZyZXNoSW1hZ2VzKHNyYylcbiAgICB9XG4gIH1cbn0sIDI1MClcblxuZnVuY3Rpb24gc3JjQ2xvc3VyZShzcmM6IHN0cmluZykge1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQ6IHN0cmluZywgX3BhdGg6IHN0cmluZykge1xuICAgIGNvbnN0IGkgPSBpbWFnZVJlZ2lzdGVyW3NyY11cbiAgICBpZiAoIWkpIHJldHVyblxuICAgIGlmIChldmVudCA9PT0gJ2NoYW5nZScgJiYgZnMuaXNGaWxlU3luYyhzcmMpKSB7XG4gICAgICBpLnZlcnNpb24gPSBEYXRlLm5vdygpXG4gICAgfSBlbHNlIHtcbiAgICAgIGkud2F0Y2hlci5jbG9zZSgpXG4gICAgICBkZWxldGUgaW1hZ2VSZWdpc3RlcltzcmNdXG4gICAgfVxuICAgIHJlZnJlc2hJbWFnZXMoc3JjKVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVGaWxlKGZpbGU6IHN0cmluZykge1xuICBpbWFnZVJlZ2lzdGVyID0gXy5tYXBWYWx1ZXMoaW1hZ2VSZWdpc3RlciwgZnVuY3Rpb24oaW1hZ2UpIHtcbiAgICBpZiAoIWltYWdlKSByZXR1cm4gaW1hZ2VcbiAgICBpbWFnZS5maWxlcyA9IF8ud2l0aG91dChpbWFnZS5maWxlcywgZmlsZSlcbiAgICBpbWFnZS5maWxlcyA9IF8uZmlsdGVyKGltYWdlLmZpbGVzLCBmcy5pc0ZpbGVTeW5jKVxuICAgIGlmIChfLmlzRW1wdHkoaW1hZ2UuZmlsZXMpKSB7XG4gICAgICBpbWFnZS53YXRjaGVkID0gZmFsc2VcbiAgICAgIGltYWdlLndhdGNoZXIuY2xvc2UoKVxuICAgIH1cbiAgICByZXR1cm4gaW1hZ2VcbiAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFZlcnNpb24oaW1hZ2U6IHN0cmluZywgZmlsZT86IHN0cmluZykge1xuICBsZXQgdmVyc2lvblxuICBjb25zdCBpID0gaW1hZ2VSZWdpc3RlcltpbWFnZV1cbiAgaWYgKCFpKSB7XG4gICAgaWYgKGZzLmlzRmlsZVN5bmMoaW1hZ2UpKSB7XG4gICAgICB2ZXJzaW9uID0gRGF0ZS5ub3coKVxuICAgICAgaW1hZ2VSZWdpc3RlcltpbWFnZV0gPSB7XG4gICAgICAgIHBhdGg6IGltYWdlLFxuICAgICAgICB3YXRjaGVkOiB0cnVlLFxuICAgICAgICBmaWxlczogZmlsZSA/IFtmaWxlXSA6IFtdLFxuICAgICAgICB2ZXJzaW9uLFxuICAgICAgICB3YXRjaGVyOiBwYXRoV2F0Y2hlci53YXRjaChpbWFnZSwgc3JjQ2xvc3VyZShpbWFnZSkpLFxuICAgICAgfVxuICAgICAgcmV0dXJuIHZlcnNpb25cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgY29uc3QgZmlsZXM6IHN0cmluZ1tdID0gaS5maWxlc1xuICBpZiAoZmlsZSAmJiAhXy5pbmNsdWRlcyhmaWxlcywgZmlsZSkpIHtcbiAgICBpLmZpbGVzLnB1c2goZmlsZSlcbiAgfVxuXG4gIHZlcnNpb24gPSBpLnZlcnNpb25cbiAgaWYgKCF2ZXJzaW9uICYmIGZzLmlzRmlsZVN5bmMoaW1hZ2UpKSB7XG4gICAgdmVyc2lvbiA9IERhdGUubm93KClcbiAgICBpLnZlcnNpb24gPSB2ZXJzaW9uXG4gIH1cbiAgcmV0dXJuIHZlcnNpb25cbn1cbiJdfQ==