"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-plus");
const _ = require("lodash");
const cast_1 = require("./cast");
const atom_1 = require("atom");
let imageRegister = {};
const refreshImages = _.debounce(async function (src) {
    for (const item of atom.workspace.getPaneItems()) {
        if (cast_1.isMarkdownPreviewView(item)) {
            await item.refreshImages(src);
        }
    }
}, 250);
function srcClosure(src) {
    return function (events) {
        for (const event of events) {
            const i = imageRegister[src];
            if (!i)
                return;
            if (event.action === 'modified' && fs.isFileSync(src)) {
                i.version = Date.now();
            }
            else {
                i.watcher.dispose();
                delete imageRegister[src];
            }
            refreshImages(src);
        }
    };
}
function removeFile(file) {
    imageRegister = _.mapValues(imageRegister, function (image) {
        if (!image)
            return image;
        image.files = _.without(image.files, file);
        image.files = _.filter(image.files, fs.isFileSync);
        if (_.isEmpty(image.files)) {
            image.watched = false;
            image.watcher.dispose();
        }
        return image;
    });
}
exports.removeFile = removeFile;
async function getVersion(image, file) {
    let version;
    const i = imageRegister[image];
    if (!i) {
        if (fs.isFileSync(image)) {
            version = Date.now();
            imageRegister[image] = {
                path: image,
                watched: true,
                files: file ? [file] : [],
                version,
                watcher: await atom_1.watchPath(image, {}, srcClosure(image)),
            };
            return version;
        }
        else {
            return false;
        }
    }
    const files = i.files;
    if (file && !_.includes(files, file)) {
        i.files.push(file);
    }
    version = i.version;
    if (!version && fs.isFileSync(image)) {
        version = Date.now();
        i.version = version;
    }
    return version;
}
exports.getVersion = getVersion;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2Utd2F0Y2gtaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ltYWdlLXdhdGNoLWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhCQUE4QjtBQUM5Qiw0QkFBNEI7QUFDNUIsaUNBQThDO0FBQzlDLCtCQUFvRTtBQWFwRSxJQUFJLGFBQWEsR0FFYixFQUFFLENBQUE7QUFFTixNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssV0FBVSxHQUFXO0lBQ3pELEdBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pELEVBQUUsQ0FBQyxDQUFDLDRCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVoQyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDL0IsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUE7QUFFUCxvQkFBb0IsR0FBVztJQUM3QixNQUFNLENBQUMsVUFBUyxNQUE2QjtRQUMzQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEtBQUssSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQzNCLE1BQU0sQ0FBQyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUM1QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFBQyxNQUFNLENBQUE7WUFDZCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLFVBQVUsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdEQsQ0FBQyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUE7WUFDeEIsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUE7Z0JBQ25CLE9BQU8sYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQzNCLENBQUM7WUFFRCxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDcEIsQ0FBQztJQUNILENBQUMsQ0FBQTtBQUNILENBQUM7QUFFRCxvQkFBMkIsSUFBWTtJQUNyQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsVUFBUyxLQUFLO1FBQ3ZELEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1lBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQTtRQUN4QixLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUMxQyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDbEQsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNCLEtBQUssQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFBO1lBQ3JCLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDekIsQ0FBQztRQUNELE1BQU0sQ0FBQyxLQUFLLENBQUE7SUFDZCxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFYRCxnQ0FXQztBQUVNLEtBQUsscUJBQXFCLEtBQWEsRUFBRSxJQUFhO0lBQzNELElBQUksT0FBTyxDQUFBO0lBQ1gsTUFBTSxDQUFDLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQzlCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNQLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUE7WUFDcEIsYUFBYSxDQUFDLEtBQUssQ0FBQyxHQUFHO2dCQUNyQixJQUFJLEVBQUUsS0FBSztnQkFDWCxPQUFPLEVBQUUsSUFBSTtnQkFDYixLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUN6QixPQUFPO2dCQUNQLE9BQU8sRUFBRSxNQUFNLGdCQUFTLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDdkQsQ0FBQTtZQUNELE1BQU0sQ0FBQyxPQUFPLENBQUE7UUFDaEIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLEtBQUssQ0FBQTtRQUNkLENBQUM7SUFDSCxDQUFDO0lBRUQsTUFBTSxLQUFLLEdBQWEsQ0FBQyxDQUFDLEtBQUssQ0FBQTtJQUMvQixFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDcEIsQ0FBQztJQUVELE9BQU8sR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFBO0lBQ25CLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUE7UUFDcEIsQ0FBQyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7SUFDckIsQ0FBQztJQUNELE1BQU0sQ0FBQyxPQUFPLENBQUE7QUFDaEIsQ0FBQztBQTlCRCxnQ0E4QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgPSByZXF1aXJlKCdmcy1wbHVzJylcbmltcG9ydCBfID0gcmVxdWlyZSgnbG9kYXNoJylcbmltcG9ydCB7IGlzTWFya2Rvd25QcmV2aWV3VmlldyB9IGZyb20gJy4vY2FzdCdcbmltcG9ydCB7IHdhdGNoUGF0aCwgRmlsZXN5c3RlbUNoYW5nZUV2ZW50LCBQYXRoV2F0Y2hlciB9IGZyb20gJ2F0b20nXG5cbi8vIFRPRE86IEZpeG1lXG4vLyB0c2xpbnQ6ZGlzYWJsZTogbm8tdW5zYWZlLWFueVxuXG5pbnRlcmZhY2UgSW1hZ2VSZWdpc3RlclJlYyB7XG4gIHZlcnNpb246IG51bWJlclxuICB3YXRjaGVyOiBQYXRoV2F0Y2hlclxuICBmaWxlczogc3RyaW5nW11cbiAgd2F0Y2hlZDogYm9vbGVhblxuICBwYXRoOiBzdHJpbmdcbn1cblxubGV0IGltYWdlUmVnaXN0ZXI6IHtcbiAgW2tleTogc3RyaW5nXTogSW1hZ2VSZWdpc3RlclJlYyB8IHVuZGVmaW5lZFxufSA9IHt9XG5cbmNvbnN0IHJlZnJlc2hJbWFnZXMgPSBfLmRlYm91bmNlKGFzeW5jIGZ1bmN0aW9uKHNyYzogc3RyaW5nKSB7XG4gIGZvciAoY29uc3QgaXRlbSBvZiBhdG9tLndvcmtzcGFjZS5nZXRQYW5lSXRlbXMoKSkge1xuICAgIGlmIChpc01hcmtkb3duUHJldmlld1ZpZXcoaXRlbSkpIHtcbiAgICAgIC8vIFRPRE86IGNoZWNrIGFnYWluc3QgaW1hZ2VSZWdpc3RlcltzcmNdLnZlcnNpb24uZmlsZXNcbiAgICAgIGF3YWl0IGl0ZW0ucmVmcmVzaEltYWdlcyhzcmMpXG4gICAgfVxuICB9XG59LCAyNTApXG5cbmZ1bmN0aW9uIHNyY0Nsb3N1cmUoc3JjOiBzdHJpbmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50czogRmlsZXN5c3RlbUNoYW5nZUV2ZW50KSB7XG4gICAgZm9yIChjb25zdCBldmVudCBvZiBldmVudHMpIHtcbiAgICAgIGNvbnN0IGkgPSBpbWFnZVJlZ2lzdGVyW3NyY11cbiAgICAgIGlmICghaSkgcmV0dXJuXG4gICAgICBpZiAoZXZlbnQuYWN0aW9uID09PSAnbW9kaWZpZWQnICYmIGZzLmlzRmlsZVN5bmMoc3JjKSkge1xuICAgICAgICBpLnZlcnNpb24gPSBEYXRlLm5vdygpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpLndhdGNoZXIuZGlzcG9zZSgpXG4gICAgICAgIGRlbGV0ZSBpbWFnZVJlZ2lzdGVyW3NyY11cbiAgICAgIH1cbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tZmxvYXRpbmctcHJvbWlzZXNcbiAgICAgIHJlZnJlc2hJbWFnZXMoc3JjKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlRmlsZShmaWxlOiBzdHJpbmcpIHtcbiAgaW1hZ2VSZWdpc3RlciA9IF8ubWFwVmFsdWVzKGltYWdlUmVnaXN0ZXIsIGZ1bmN0aW9uKGltYWdlKSB7XG4gICAgaWYgKCFpbWFnZSkgcmV0dXJuIGltYWdlXG4gICAgaW1hZ2UuZmlsZXMgPSBfLndpdGhvdXQoaW1hZ2UuZmlsZXMsIGZpbGUpXG4gICAgaW1hZ2UuZmlsZXMgPSBfLmZpbHRlcihpbWFnZS5maWxlcywgZnMuaXNGaWxlU3luYylcbiAgICBpZiAoXy5pc0VtcHR5KGltYWdlLmZpbGVzKSkge1xuICAgICAgaW1hZ2Uud2F0Y2hlZCA9IGZhbHNlXG4gICAgICBpbWFnZS53YXRjaGVyLmRpc3Bvc2UoKVxuICAgIH1cbiAgICByZXR1cm4gaW1hZ2VcbiAgfSlcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFZlcnNpb24oaW1hZ2U6IHN0cmluZywgZmlsZT86IHN0cmluZykge1xuICBsZXQgdmVyc2lvblxuICBjb25zdCBpID0gaW1hZ2VSZWdpc3RlcltpbWFnZV1cbiAgaWYgKCFpKSB7XG4gICAgaWYgKGZzLmlzRmlsZVN5bmMoaW1hZ2UpKSB7XG4gICAgICB2ZXJzaW9uID0gRGF0ZS5ub3coKVxuICAgICAgaW1hZ2VSZWdpc3RlcltpbWFnZV0gPSB7XG4gICAgICAgIHBhdGg6IGltYWdlLFxuICAgICAgICB3YXRjaGVkOiB0cnVlLFxuICAgICAgICBmaWxlczogZmlsZSA/IFtmaWxlXSA6IFtdLFxuICAgICAgICB2ZXJzaW9uLFxuICAgICAgICB3YXRjaGVyOiBhd2FpdCB3YXRjaFBhdGgoaW1hZ2UsIHt9LCBzcmNDbG9zdXJlKGltYWdlKSksXG4gICAgICB9XG4gICAgICByZXR1cm4gdmVyc2lvblxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICBjb25zdCBmaWxlczogc3RyaW5nW10gPSBpLmZpbGVzXG4gIGlmIChmaWxlICYmICFfLmluY2x1ZGVzKGZpbGVzLCBmaWxlKSkge1xuICAgIGkuZmlsZXMucHVzaChmaWxlKVxuICB9XG5cbiAgdmVyc2lvbiA9IGkudmVyc2lvblxuICBpZiAoIXZlcnNpb24gJiYgZnMuaXNGaWxlU3luYyhpbWFnZSkpIHtcbiAgICB2ZXJzaW9uID0gRGF0ZS5ub3coKVxuICAgIGkudmVyc2lvbiA9IHZlcnNpb25cbiAgfVxuICByZXR1cm4gdmVyc2lvblxufVxuIl19