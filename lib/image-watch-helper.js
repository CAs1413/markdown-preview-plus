"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-plus");
const _ = require("lodash");
const cast_1 = require("./cast");
const path = require("path");
const pathWatcherPath = path.join(atom.packages.resourcePath, '/node_modules/pathwatcher/lib/main');
const { watch } = require(pathWatcherPath);
let imageRegister = {};
const refreshImages = _.debounce(async function (src) {
    for (const item of atom.workspace.getPaneItems()) {
        if (cast_1.isMarkdownPreviewView(item)) {
            await item.refreshImages(src);
        }
    }
}, 250);
function srcClosure(src) {
    return function (event) {
        const i = imageRegister[src];
        if (!i)
            return;
        if (event === 'change' && fs.isFileSync(src)) {
            i.version = Date.now();
        }
        else {
            i.watcher.close();
            delete imageRegister[src];
        }
        refreshImages(src);
    };
}
function removeFile(file) {
    imageRegister = _.mapValues(imageRegister, function (image) {
        if (!image)
            return image;
        image.files = _.without(image.files, file);
        image.files = _.filter(image.files, fs.isFileSync);
        if (_.isEmpty(image.files)) {
            image.watched = false;
            image.watcher.close();
        }
        return image;
    });
}
exports.removeFile = removeFile;
async function getVersion(image, file) {
    let version;
    const i = imageRegister[image];
    if (!i) {
        if (fs.isFileSync(image)) {
            version = Date.now();
            imageRegister[image] = {
                path: image,
                watched: true,
                files: file ? [file] : [],
                version,
                watcher: watch(image, srcClosure(image)),
            };
            return version;
        }
        else {
            return false;
        }
    }
    const files = i.files;
    if (file && !_.includes(files, file)) {
        i.files.push(file);
    }
    version = i.version;
    if (!version && fs.isFileSync(image)) {
        version = Date.now();
        i.version = version;
    }
    return version;
}
exports.getVersion = getVersion;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2Utd2F0Y2gtaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ltYWdlLXdhdGNoLWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhCQUE4QjtBQUM5Qiw0QkFBNEI7QUFDNUIsaUNBQThDO0FBVTlDLDZCQUE2QjtBQUM3QixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUMvQixJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFDMUIsb0NBQW9DLENBQ3JDLENBQUE7QUFHRCxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBbUIsQ0FBQTtBQVk1RCxJQUFJLGFBQWEsR0FFYixFQUFFLENBQUE7QUFFTixNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssV0FBVSxHQUFXO0lBQ3pELEdBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pELEVBQUUsQ0FBQyxDQUFDLDRCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVoQyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDL0IsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUE7QUFFUCxvQkFBb0IsR0FBVztJQUU3QixNQUFNLENBQUMsVUFBUyxLQUFhO1FBRTNCLE1BQU0sQ0FBQyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUM1QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUFDLE1BQU0sQ0FBQTtRQUNkLEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxRQUFRLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0MsQ0FBQyxDQUFDLE9BQU8sR0FBRyxJ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J2ZzLXBsdXMnKVxuaW1wb3J0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKVxuaW1wb3J0IHsgaXNNYXJrZG93blByZXZpZXdWaWV3IH0gZnJvbSAnLi9jYXN0J1xuLy8gaW1wb3J0IHsgd2F0Y2hQYXRoLCBGaWxlc3lzdGVtQ2hhbmdlRXZlbnQsIFBhdGhXYXRjaGVyIH0gZnJvbSAnYXRvbSdcblxuZGVjbGFyZSBtb2R1bGUgJ3BhdGh3YXRjaGVyJyB7XG4gIGV4cG9ydCBmdW5jdGlvbiB3YXRjaChcbiAgICBmaWxlbmFtZTogc3RyaW5nLFxuICAgIGxpc3RlbmVyPzogKGV2ZW50OiBURXZlbnQsIHBhdGg6IHN0cmluZykgPT4gdm9pZCxcbiAgKTogUGF0aFdhdGNoZXJcbiAgZXhwb3J0IHR5cGUgVEV2ZW50ID0gJ3JlbmFtZScgfCAnZGVsZXRlJyB8ICdjaGFuZ2UnXG59XG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxuY29uc3QgcGF0aFdhdGNoZXJQYXRoID0gcGF0aC5qb2luKFxuICBhdG9tLnBhY2thZ2VzLnJlc291cmNlUGF0aCxcbiAgJy9ub2RlX21vZHVsZXMvcGF0aHdhdGNoZXIvbGliL21haW4nLFxuKVxuaW1wb3J0IF91bnVzZWQgPSByZXF1aXJlKCdwYXRod2F0Y2hlcicpXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdmFyLXJlcXVpcmVzXG5jb25zdCB7IHdhdGNoIH0gPSByZXF1aXJlKHBhdGhXYXRjaGVyUGF0aCkgYXMgdHlwZW9mIF91bnVzZWRcbmltcG9ydCBQYXRoV2F0Y2hlciA9IF91bnVzZWQuUGF0aFdhdGNoZXJcbmltcG9ydCBURXZlbnQgPSBfdW51c2VkLlRFdmVudFxuXG5pbnRlcmZhY2UgSW1hZ2VSZWdpc3RlclJlYyB7XG4gIHZlcnNpb246IG51bWJlclxuICB3YXRjaGVyOiBQYXRoV2F0Y2hlclxuICBmaWxlczogc3RyaW5nW11cbiAgd2F0Y2hlZDogYm9vbGVhblxuICBwYXRoOiBzdHJpbmdcbn1cblxubGV0IGltYWdlUmVnaXN0ZXI6IHtcbiAgW2tleTogc3RyaW5nXTogSW1hZ2VSZWdpc3RlclJlYyB8IHVuZGVmaW5lZFxufSA9IHt9XG5cbmNvbnN0IHJlZnJlc2hJbWFnZXMgPSBfLmRlYm91bmNlKGFzeW5jIGZ1bmN0aW9uKHNyYzogc3RyaW5nKSB7XG4gIGZvciAoY29uc3QgaXRlbSBvZiBhdG9tLndvcmtzcGFjZS5nZXRQYW5lSXRlbXMoKSkge1xuICAgIGlmIChpc01hcmtkb3duUHJldmlld1ZpZXcoaXRlbSkpIHtcbiAgICAgIC8vIFRPRE86IGNoZWNrIGFnYWluc3QgaW1hZ2VSZWdpc3RlcltzcmNdLnZlcnNpb24uZmlsZXNcbiAgICAgIGF3YWl0IGl0ZW0ucmVmcmVzaEltYWdlcyhzcmMpXG4gICAgfVxuICB9XG59LCAyNTApXG5cbmZ1bmN0aW9uIHNyY0Nsb3N1cmUoc3JjOiBzdHJpbmcpIHtcbiAgLy8gcmV0dXJuIGZ1bmN0aW9uKGV2ZW50czogRmlsZXN5c3RlbUNoYW5nZUV2ZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbihldmVudDogVEV2ZW50KSB7XG4gICAgLy8gZm9yIChjb25zdCBldmVudCBvZiBldmVudHMpIHtcbiAgICBjb25zdCBpID0gaW1hZ2VSZWdpc3RlcltzcmNdXG4gICAgaWYgKCFpKSByZXR1cm5cbiAgICBpZiAoZXZlbnQgPT09ICdjaGFuZ2UnICYmIGZzLmlzRmlsZVN5bmMoc3JjKSkge1xuICAgICAgaS52ZXJzaW9uID0gRGF0ZS5ub3coKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpLndhdGNoZXIuZGlzcG9zZSgpXG4gICAgICBpLndhdGNoZXIuY2xvc2UoKVxuICAgICAgZGVsZXRlIGltYWdlUmVnaXN0ZXJbc3JjXVxuICAgIH1cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWZsb2F0aW5nLXByb21pc2VzXG4gICAgcmVmcmVzaEltYWdlcyhzcmMpXG4gICAgLy8gfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVGaWxlKGZpbGU6IHN0cmluZykge1xuICBpbWFnZVJlZ2lzdGVyID0gXy5tYXBWYWx1ZXMoaW1hZ2VSZWdpc3RlciwgZnVuY3Rpb24oaW1hZ2UpIHtcbiAgICBpZiAoIWltYWdlKSByZXR1cm4gaW1hZ2VcbiAgICBpbWFnZS5maWxlcyA9IF8ud2l0aG91dChpbWFnZS5maWxlcywgZmlsZSlcbiAgICBpbWFnZS5maWxlcyA9IF8uZmlsdGVyKGltYWdlLmZpbGVzLCBmcy5pc0ZpbGVTeW5jKVxuICAgIGlmIChfLmlzRW1wdHkoaW1hZ2UuZmlsZXMpKSB7XG4gICAgICBpbWFnZS53YXRjaGVkID0gZmFsc2VcbiAgICAgIC8vIGltYWdlLndhdGNoZXIuZGlzcG9zZSgpXG4gICAgICBpbWFnZS53YXRjaGVyLmNsb3NlKClcbiAgICB9XG4gICAgcmV0dXJuIGltYWdlXG4gIH0pXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRWZXJzaW9uKGltYWdlOiBzdHJpbmcsIGZpbGU/OiBzdHJpbmcpIHtcbiAgbGV0IHZlcnNpb25cbiAgY29uc3QgaSA9IGltYWdlUmVnaXN0ZXJbaW1hZ2VdXG4gIGlmICghaSkge1xuICAgIGlmIChmcy5pc0ZpbGVTeW5jKGltYWdlKSkge1xuICAgICAgdmVyc2lvbiA9IERhdGUubm93KClcbiAgICAgIGltYWdlUmVnaXN0ZXJbaW1hZ2VdID0ge1xuICAgICAgICBwYXRoOiBpbWFnZSxcbiAgICAgICAgd2F0Y2hlZDogdHJ1ZSxcbiAgICAgICAgZmlsZXM6IGZpbGUgPyBbZmlsZV0gOiBbXSxcbiAgICAgICAgdmVyc2lvbixcbiAgICAgICAgLy8gd2F0Y2hlcjogYXdhaXQgd2F0Y2hQYXRoKGltYWdlLCB7fSwgc3JjQ2xvc3VyZShpbWFnZSkpLFxuICAgICAgICB3YXRjaGVyOiB3YXRjaChpbWFnZSwgc3JjQ2xvc3VyZShpbWFnZSkpLFxuICAgICAgfVxuICAgICAgcmV0dXJuIHZlcnNpb25cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgY29uc3QgZmlsZXM6IHN0cmluZ1tdID0gaS5maWxlc1xuICBpZiAoZmlsZSAmJiAhXy5pbmNsdWRlcyhmaWxlcywgZmlsZSkpIHtcbiAgICBpLmZpbGVzLnB1c2goZmlsZSlcbiAgfVxuXG4gIHZlcnNpb24gPSBpLnZlcnNpb25cbiAgaWYgKCF2ZXJzaW9uICYmIGZzLmlzRmlsZVN5bmMoaW1hZ2UpKSB7XG4gICAgdmVyc2lvbiA9IERhdGUubm93KClcbiAgICBpLnZlcnNpb24gPSB2ZXJzaW9uXG4gIH1cbiAgcmV0dXJuIHZlcnNpb25cbn1cbiJdfQ==