"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-plus");
const _ = require("lodash");
const cast_1 = require("./cast");
const atom_1 = require("atom");
let imageRegister = {};
const refreshImages = _.debounce(async function (src) {
    for (const item of atom.workspace.getPaneItems()) {
        if (cast_1.isMarkdownPreviewView(item)) {
            await item.refreshImages(src);
        }
    }
}, 250);
function srcClosure(src, event) {
    return function () {
        const i = imageRegister[src];
        if (!i)
            return;
        if (event === 'change' && fs.isFileSync(src)) {
            i.version = Date.now();
        }
        else {
            i.watcher.dispose();
            delete imageRegister[src];
        }
        refreshImages(src);
    };
}
function removeFile(file) {
    imageRegister = _.mapValues(imageRegister, function (image) {
        if (!image)
            return image;
        image.files = _.without(image.files, file);
        image.files = _.filter(image.files, fs.isFileSync);
        if (_.isEmpty(image.files)) {
            image.watched = false;
            image.watcher.dispose();
        }
        return image;
    });
}
exports.removeFile = removeFile;
async function getVersion(image, file) {
    let version;
    const i = imageRegister[image];
    if (!i) {
        if (fs.isFileSync(image)) {
            version = Date.now();
            const watcher = new atom_1.CompositeDisposable();
            const af = new atom_1.File(image);
            watcher.add(af.onDidChange(srcClosure(image, 'change')), af.onDidDelete(srcClosure(image, 'delete')), af.onDidRename(srcClosure(image, 'rename')));
            imageRegister[image] = {
                path: image,
                watched: true,
                files: file ? [file] : [],
                version,
                watcher,
            };
            return version;
        }
        else {
            return false;
        }
    }
    const files = i.files;
    if (file && !_.includes(files, file)) {
        i.files.push(file);
    }
    version = i.version;
    if (!version && fs.isFileSync(image)) {
        version = Date.now();
        i.version = version;
    }
    return version;
}
exports.getVersion = getVersion;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2Utd2F0Y2gtaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ltYWdlLXdhdGNoLWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhCQUE4QjtBQUM5Qiw0QkFBNEI7QUFDNUIsaUNBQThDO0FBQzlDLCtCQUFnRDtBQVVoRCxJQUFJLGFBQWEsR0FFYixFQUFFLENBQUE7QUFFTixNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssV0FBVSxHQUFXO0lBQ3pELEdBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pELEVBQUUsQ0FBQyxDQUFDLDRCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVoQyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDL0IsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUE7QUFFUCxvQkFBb0IsR0FBVyxFQUFFLEtBQXFDO0lBRXBFLE1BQU0sQ0FBQztRQUVMLE1BQU0sQ0FBQyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUM1QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUFDLE1BQU0sQ0FBQTtRQUNkLEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxRQUFRLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0MsQ0FBQyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUE7UUFDeEIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtZQUNuQixPQUFPLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUMzQixDQUFDO1FBRUQs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QUFPLENBQUE7SUFDckIsQ0FBQztJQUNELE1BQU0sQ0FBQyxPQUFPLENBQUE7QUFDaEIsQ0FBQztBQXRDRCxnQ0FzQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgPSByZXF1aXJlKCdmcy1wbHVzJylcbmltcG9ydCBfID0gcmVxdWlyZSgnbG9kYXNoJylcbmltcG9ydCB7IGlzTWFya2Rvd25QcmV2aWV3VmlldyB9IGZyb20gJy4vY2FzdCdcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUsIEZpbGUgfSBmcm9tICdhdG9tJ1xuXG5pbnRlcmZhY2UgSW1hZ2VSZWdpc3RlclJlYyB7XG4gIHZlcnNpb246IG51bWJlclxuICB3YXRjaGVyOiBDb21wb3NpdGVEaXNwb3NhYmxlXG4gIGZpbGVzOiBzdHJpbmdbXVxuICB3YXRjaGVkOiBib29sZWFuXG4gIHBhdGg6IHN0cmluZ1xufVxuXG5sZXQgaW1hZ2VSZWdpc3Rlcjoge1xuICBba2V5OiBzdHJpbmddOiBJbWFnZVJlZ2lzdGVyUmVjIHwgdW5kZWZpbmVkXG59ID0ge31cblxuY29uc3QgcmVmcmVzaEltYWdlcyA9IF8uZGVib3VuY2UoYXN5bmMgZnVuY3Rpb24oc3JjOiBzdHJpbmcpIHtcbiAgZm9yIChjb25zdCBpdGVtIG9mIGF0b20ud29ya3NwYWNlLmdldFBhbmVJdGVtcygpKSB7XG4gICAgaWYgKGlzTWFya2Rvd25QcmV2aWV3VmlldyhpdGVtKSkge1xuICAgICAgLy8gVE9ETzogY2hlY2sgYWdhaW5zdCBpbWFnZVJlZ2lzdGVyW3NyY10udmVyc2lvbi5maWxlc1xuICAgICAgYXdhaXQgaXRlbS5yZWZyZXNoSW1hZ2VzKHNyYylcbiAgICB9XG4gIH1cbn0sIDI1MClcblxuZnVuY3Rpb24gc3JjQ2xvc3VyZShzcmM6IHN0cmluZywgZXZlbnQ6ICdjaGFuZ2UnIHwgJ2RlbGV0ZScgfCAncmVuYW1lJykge1xuICAvLyByZXR1cm4gZnVuY3Rpb24oZXZlbnRzOiBGaWxlc3lzdGVtQ2hhbmdlRXZlbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIC8vIGZvciAoY29uc3QgZXZlbnQgb2YgZXZlbnRzKSB7XG4gICAgY29uc3QgaSA9IGltYWdlUmVnaXN0ZXJbc3JjXVxuICAgIGlmICghaSkgcmV0dXJuXG4gICAgaWYgKGV2ZW50ID09PSAnY2hhbmdlJyAmJiBmcy5pc0ZpbGVTeW5jKHNyYykpIHtcbiAgICAgIGkudmVyc2lvbiA9IERhdGUubm93KClcbiAgICB9IGVsc2Uge1xuICAgICAgaS53YXRjaGVyLmRpc3Bvc2UoKVxuICAgICAgZGVsZXRlIGltYWdlUmVnaXN0ZXJbc3JjXVxuICAgIH1cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWZsb2F0aW5nLXByb21pc2VzXG4gICAgcmVmcmVzaEltYWdlcyhzcmMpXG4gICAgLy8gfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVGaWxlKGZpbGU6IHN0cmluZykge1xuICBpbWFnZVJlZ2lzdGVyID0gXy5tYXBWYWx1ZXMoaW1hZ2VSZWdpc3RlciwgZnVuY3Rpb24oaW1hZ2UpIHtcbiAgICBpZiAoIWltYWdlKSByZXR1cm4gaW1hZ2VcbiAgICBpbWFnZS5maWxlcyA9IF8ud2l0aG91dChpbWFnZS5maWxlcywgZmlsZSlcbiAgICBpbWFnZS5maWxlcyA9IF8uZmlsdGVyKGltYWdlLmZpbGVzLCBmcy5pc0ZpbGVTeW5jKVxuICAgIGlmIChfLmlzRW1wdHkoaW1hZ2UuZmlsZXMpKSB7XG4gICAgICBpbWFnZS53YXRjaGVkID0gZmFsc2VcbiAgICAgIGltYWdlLndhdGNoZXIuZGlzcG9zZSgpXG4gICAgfVxuICAgIHJldHVybiBpbWFnZVxuICB9KVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VmVyc2lvbihpbWFnZTogc3RyaW5nLCBmaWxlPzogc3RyaW5nKSB7XG4gIGxldCB2ZXJzaW9uXG4gIGNvbnN0IGkgPSBpbWFnZVJlZ2lzdGVyW2ltYWdlXVxuICBpZiAoIWkpIHtcbiAgICBpZiAoZnMuaXNGaWxlU3luYyhpbWFnZSkpIHtcbiAgICAgIHZlcnNpb24gPSBEYXRlLm5vdygpXG4gICAgICBjb25zdCB3YXRjaGVyID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKVxuICAgICAgY29uc3QgYWYgPSBuZXcgRmlsZShpbWFnZSlcbiAgICAgIHdhdGNoZXIuYWRkKFxuICAgICAgICBhZi5vbkRpZENoYW5nZShzcmNDbG9zdXJlKGltYWdlLCAnY2hhbmdlJykpLFxuICAgICAgICBhZi5vbkRpZERlbGV0ZShzcmNDbG9zdXJlKGltYWdlLCAnZGVsZXRlJykpLFxuICAgICAgICBhZi5vbkRpZFJlbmFtZShzcmNDbG9zdXJlKGltYWdlLCAncmVuYW1lJykpLFxuICAgICAgKVxuICAgICAgaW1hZ2VSZWdpc3RlcltpbWFnZV0gPSB7XG4gICAgICAgIHBhdGg6IGltYWdlLFxuICAgICAgICB3YXRjaGVkOiB0cnVlLFxuICAgICAgICBmaWxlczogZmlsZSA/IFtmaWxlXSA6IFtdLFxuICAgICAgICB2ZXJzaW9uLFxuICAgICAgICAvLyB3YXRjaGVyOiBhd2FpdCB3YXRjaFBhdGgoaW1hZ2UsIHt9LCBzcmNDbG9zdXJlKGltYWdlKSksXG4gICAgICAgIHdhdGNoZXIsXG4gICAgICB9XG4gICAgICByZXR1cm4gdmVyc2lvblxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICBjb25zdCBmaWxlczogc3RyaW5nW10gPSBpLmZpbGVzXG4gIGlmIChmaWxlICYmICFfLmluY2x1ZGVzKGZpbGVzLCBmaWxlKSkge1xuICAgIGkuZmlsZXMucHVzaChmaWxlKVxuICB9XG5cbiAgdmVyc2lvbiA9IGkudmVyc2lvblxuICBpZiAoIXZlcnNpb24gJiYgZnMuaXNGaWxlU3luYyhpbWFnZSkpIHtcbiAgICB2ZXJzaW9uID0gRGF0ZS5ub3coKVxuICAgIGkudmVyc2lvbiA9IHZlcnNpb25cbiAgfVxuICByZXR1cm4gdmVyc2lvblxufVxuIl19