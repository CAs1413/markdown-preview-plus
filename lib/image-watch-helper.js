"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-plus");
const _ = require("lodash");
const cast_1 = require("./cast");
const atom_1 = require("atom");
let imageRegister = {};
const refreshImages = _.debounce(async function (src) {
    for (const item of atom.workspace.getPaneItems()) {
        if (cast_1.isMarkdownPreviewView(item)) {
            await item.refreshImages(src);
        }
    }
}, 250);
function srcClosure(src) {
    return function (events) {
        for (const event of events) {
            const i = imageRegister[src];
            if (!i)
                return;
            if (event.action === 'modified' && fs.isFileSync(src)) {
                i.version = Date.now();
            }
            else {
                i.watcher.dispose();
                delete imageRegister[src];
            }
            refreshImages(src);
        }
    };
}
function removeFile(file) {
    imageRegister = _.mapValues(imageRegister, function (image) {
        if (!image)
            return image;
        image.files = _.without(image.files, file);
        image.files = _.filter(image.files, fs.isFileSync);
        if (_.isEmpty(image.files)) {
            image.watched = false;
            image.watcher.dispose();
        }
        return image;
    });
}
exports.removeFile = removeFile;
async function getVersion(image, file) {
    let version;
    const i = imageRegister[image];
    if (!i) {
        if (fs.isFileSync(image)) {
            version = Date.now();
            imageRegister[image] = {
                path: image,
                watched: true,
                files: file ? [file] : [],
                version,
                watcher: await atom_1.watchPath(image, {}, srcClosure(image)),
            };
            return version;
        }
        else {
            return false;
        }
    }
    const files = i.files;
    if (file && !_.includes(files, file)) {
        i.files.push(file);
    }
    version = i.version;
    if (!version && fs.isFileSync(image)) {
        version = Date.now();
        i.version = version;
    }
    return version;
}
exports.getVersion = getVersion;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2Utd2F0Y2gtaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ltYWdlLXdhdGNoLWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhCQUE4QjtBQUM5Qiw0QkFBNEI7QUFDNUIsaUNBQThDO0FBQzlDLCtCQUFvRTtBQVVwRSxJQUFJLGFBQWEsR0FFYixFQUFFLENBQUE7QUFFTixNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssV0FBVSxHQUFXO0lBQ3pELEdBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pELEVBQUUsQ0FBQyxDQUFDLDRCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVoQyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDL0IsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUE7QUFFUCxvQkFBb0IsR0FBVztJQUM3QixNQUFNLENBQUMsVUFBUyxNQUE2QjtRQUMzQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEtBQUssSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQzNCLE1BQU0sQ0FBQyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUM1QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFBQyxNQUFNLENBQUE7WUFDZCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLFVBQVUsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdEQsQ0FBQyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUE7WUFDeEIsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUE7Z0JBQ25CLE9BQU8sYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQzNCLENBQUM7WUFFRCxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDcEIsQ0FBQztJQUNILENBQUMsQ0FBQTtBQUNILENBQUM7QUFFRCxvQkFBMkIsSUFBWTtJQUNyQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsVUFBUyxLQUFLO1FBQ3ZELEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1lBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQTtRQUN4QixLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUMxQyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDbEQsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNCLEtBQUssQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFBO1lBQ3JCLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDekIsQ0FBQztRQUNELE1BQU0sQ0FBQyxLQUFLLENBQUE7SUFDZCxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFYRCxnQ0FXQztBQUVNLEtBQUsscUJBQXFCLEtBQWEsRUFBRSxJQUFhO0lBQzNELElBQUksT0FBTyxDQUFBO0lBQ1gsTUFBTSxDQUFDLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQzlCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNQLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUE7WUFDcEIsYUFBYSxDQUFDLEtBQUssQ0FBQyxHQUFHO2dCQUNyQixJQUFJLEVBQUUsS0FBSztnQkFDWCxPQUFPLEVBQUUsSUFBSTtnQkFDYixLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUN6QixPQUFPO2dCQUNQLE9BQU8sRUFBRSxNQUFNLGdCQUFTLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDdkQsQ0FBQTtZQUNELE1BQU0sQ0FBQyxPQUFPLENBQUE7UUFDaEIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLEtBQUssQ0FBQTtRQUNkLENBQUM7SUFDSCxDQUFDO0lBRUQsTUFBTSxLQUFLLEdBQWEsQ0FBQyxDQUFDLEtBQUssQ0FBQTtJQUMvQixFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDcEIsQ0FBQztJQUVELE9BQU8sR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFBO0lBQ25CLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUE7UUFDcEIsQ0FBQyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7SUFDckIsQ0FBQztJQUNELE1BQU0sQ0FBQyxPQUFPLENBQUE7QUFDaEIsQ0FBQztBQTlCRCxnQ0E4QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgPSByZXF1aXJlKCdmcy1wbHVzJylcbmltcG9ydCBfID0gcmVxdWlyZSgnbG9kYXNoJylcbmltcG9ydCB7IGlzTWFya2Rvd25QcmV2aWV3VmlldyB9IGZyb20gJy4vY2FzdCdcbmltcG9ydCB7IHdhdGNoUGF0aCwgRmlsZXN5c3RlbUNoYW5nZUV2ZW50LCBQYXRoV2F0Y2hlciB9IGZyb20gJ2F0b20nXG5cbmludGVyZmFjZSBJbWFnZVJlZ2lzdGVyUmVjIHtcbiAgdmVyc2lvbjogbnVtYmVyXG4gIHdhdGNoZXI6IFBhdGhXYXRjaGVyXG4gIGZpbGVzOiBzdHJpbmdbXVxuICB3YXRjaGVkOiBib29sZWFuXG4gIHBhdGg6IHN0cmluZ1xufVxuXG5sZXQgaW1hZ2VSZWdpc3Rlcjoge1xuICBba2V5OiBzdHJpbmddOiBJbWFnZVJlZ2lzdGVyUmVjIHwgdW5kZWZpbmVkXG59ID0ge31cblxuY29uc3QgcmVmcmVzaEltYWdlcyA9IF8uZGVib3VuY2UoYXN5bmMgZnVuY3Rpb24oc3JjOiBzdHJpbmcpIHtcbiAgZm9yIChjb25zdCBpdGVtIG9mIGF0b20ud29ya3NwYWNlLmdldFBhbmVJdGVtcygpKSB7XG4gICAgaWYgKGlzTWFya2Rvd25QcmV2aWV3VmlldyhpdGVtKSkge1xuICAgICAgLy8gVE9ETzogY2hlY2sgYWdhaW5zdCBpbWFnZVJlZ2lzdGVyW3NyY10udmVyc2lvbi5maWxlc1xuICAgICAgYXdhaXQgaXRlbS5yZWZyZXNoSW1hZ2VzKHNyYylcbiAgICB9XG4gIH1cbn0sIDI1MClcblxuZnVuY3Rpb24gc3JjQ2xvc3VyZShzcmM6IHN0cmluZykge1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnRzOiBGaWxlc3lzdGVtQ2hhbmdlRXZlbnQpIHtcbiAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIGV2ZW50cykge1xuICAgICAgY29uc3QgaSA9IGltYWdlUmVnaXN0ZXJbc3JjXVxuICAgICAgaWYgKCFpKSByZXR1cm5cbiAgICAgIGlmIChldmVudC5hY3Rpb24gPT09ICdtb2RpZmllZCcgJiYgZnMuaXNGaWxlU3luYyhzcmMpKSB7XG4gICAgICAgIGkudmVyc2lvbiA9IERhdGUubm93KClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGkud2F0Y2hlci5kaXNwb3NlKClcbiAgICAgICAgZGVsZXRlIGltYWdlUmVnaXN0ZXJbc3JjXVxuICAgICAgfVxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1mbG9hdGluZy1wcm9taXNlc1xuICAgICAgcmVmcmVzaEltYWdlcyhzcmMpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVGaWxlKGZpbGU6IHN0cmluZykge1xuICBpbWFnZVJlZ2lzdGVyID0gXy5tYXBWYWx1ZXMoaW1hZ2VSZWdpc3RlciwgZnVuY3Rpb24oaW1hZ2UpIHtcbiAgICBpZiAoIWltYWdlKSByZXR1cm4gaW1hZ2VcbiAgICBpbWFnZS5maWxlcyA9IF8ud2l0aG91dChpbWFnZS5maWxlcywgZmlsZSlcbiAgICBpbWFnZS5maWxlcyA9IF8uZmlsdGVyKGltYWdlLmZpbGVzLCBmcy5pc0ZpbGVTeW5jKVxuICAgIGlmIChfLmlzRW1wdHkoaW1hZ2UuZmlsZXMpKSB7XG4gICAgICBpbWFnZS53YXRjaGVkID0gZmFsc2VcbiAgICAgIGltYWdlLndhdGNoZXIuZGlzcG9zZSgpXG4gICAgfVxuICAgIHJldHVybiBpbWFnZVxuICB9KVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VmVyc2lvbihpbWFnZTogc3RyaW5nLCBmaWxlPzogc3RyaW5nKSB7XG4gIGxldCB2ZXJzaW9uXG4gIGNvbnN0IGkgPSBpbWFnZVJlZ2lzdGVyW2ltYWdlXVxuICBpZiAoIWkpIHtcbiAgICBpZiAoZnMuaXNGaWxlU3luYyhpbWFnZSkpIHtcbiAgICAgIHZlcnNpb24gPSBEYXRlLm5vdygpXG4gICAgICBpbWFnZVJlZ2lzdGVyW2ltYWdlXSA9IHtcbiAgICAgICAgcGF0aDogaW1hZ2UsXG4gICAgICAgIHdhdGNoZWQ6IHRydWUsXG4gICAgICAgIGZpbGVzOiBmaWxlID8gW2ZpbGVdIDogW10sXG4gICAgICAgIHZlcnNpb24sXG4gICAgICAgIHdhdGNoZXI6IGF3YWl0IHdhdGNoUGF0aChpbWFnZSwge30sIHNyY0Nsb3N1cmUoaW1hZ2UpKSxcbiAgICAgIH1cbiAgICAgIHJldHVybiB2ZXJzaW9uXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGZpbGVzOiBzdHJpbmdbXSA9IGkuZmlsZXNcbiAgaWYgKGZpbGUgJiYgIV8uaW5jbHVkZXMoZmlsZXMsIGZpbGUpKSB7XG4gICAgaS5maWxlcy5wdXNoKGZpbGUpXG4gIH1cblxuICB2ZXJzaW9uID0gaS52ZXJzaW9uXG4gIGlmICghdmVyc2lvbiAmJiBmcy5pc0ZpbGVTeW5jKGltYWdlKSkge1xuICAgIHZlcnNpb24gPSBEYXRlLm5vdygpXG4gICAgaS52ZXJzaW9uID0gdmVyc2lvblxuICB9XG4gIHJldHVybiB2ZXJzaW9uXG59XG4iXX0=