"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-plus");
const _ = require("lodash");
const cast_1 = require("./cast");
const path = require("path");
const pathWatcherPath = path.join(atom.packages.resourcePath, '/node_modules/pathwatcher/lib/main');
const { watch } = require(pathWatcherPath);
let imageRegister = {};
const refreshImages = _.debounce(async function (src) {
    for (const item of atom.workspace.getPaneItems()) {
        if (cast_1.isMarkdownPreviewView(item)) {
            await item.refreshImages(src);
        }
    }
}, 250);
function srcClosure(src) {
    return function (event, path) {
        console.log(event, path);
        const i = imageRegister[src];
        if (!i)
            return;
        if (event === 'change' && fs.isFileSync(src)) {
            i.version = Date.now();
        }
        else {
            i.watcher.close();
            delete imageRegister[src];
        }
        refreshImages(src);
    };
}
function removeFile(file) {
    imageRegister = _.mapValues(imageRegister, function (image) {
        if (!image)
            return image;
        image.files = _.without(image.files, file);
        image.files = _.filter(image.files, fs.isFileSync);
        if (_.isEmpty(image.files)) {
            image.watched = false;
            image.watcher.close();
        }
        return image;
    });
}
exports.removeFile = removeFile;
async function getVersion(image, file) {
    let version;
    const i = imageRegister[image];
    if (!i) {
        if (fs.isFileSync(image)) {
            version = Date.now();
            imageRegister[image] = {
                path: image,
                watched: true,
                files: file ? [file] : [],
                version,
                watcher: watch(image, srcClosure(image)),
            };
            return version;
        }
        else {
            return false;
        }
    }
    const files = i.files;
    if (file && !_.includes(files, file)) {
        i.files.push(file);
    }
    version = i.version;
    if (!version && fs.isFileSync(image)) {
        version = Date.now();
        i.version = version;
    }
    return version;
}
exports.getVersion = getVersion;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2Utd2F0Y2gtaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ltYWdlLXdhdGNoLWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhCQUE4QjtBQUM5Qiw0QkFBNEI7QUFDNUIsaUNBQThDO0FBVTlDLDZCQUE2QjtBQUM3QixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUMvQixJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFDMUIsb0NBQW9DLENBQ3JDLENBQUE7QUFHRCxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBbUIsQ0FBQTtBQVk1RCxJQUFJLGFBQWEsR0FFYixFQUFFLENBQUE7QUFFTixNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssV0FBVSxHQUFXO0lBQ3pELEdBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pELEVBQUUsQ0FBQyxDQUFDLDRCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVoQyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDL0IsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUE7QUFFUCxvQkFBb0IsR0FBVztJQUU3QixNQUFNLENBQUMsVUFBUyxLQUFhLEVBQUUsSUFBWTtRQUV6QyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUN4QixNQUFNLENBQUMsR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDNUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFBQyxNQUFNLENBQUE7UUFDZCxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssUUFBUSxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdDLENBQUMsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFBO1FBQ3hCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUVOLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUE7WUFDakIsT0FBTyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDM0IsQ0FBQztRQUVELGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUVwQixDQUFDLENBQUE7QUFDSCxDQUFDO0FBRUQsb0JBQTJCLElBQVk7SUFDckMsYUFBYSxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLFVBQVMsS0FBSztRQUN2RCxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUE7UUFDeEIsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDMUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ2xELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzQixLQUFLLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQTtZQUVyQixLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ3ZCLENBQUM7UUFDRCxNQUFNLENBQUMsS0FBSyxDQUFBO0lBQ2QsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDO0FBWkQsZ0NBWUM7QUFFTSxLQUFLLHFCQUFxQixLQUFhLEVBQUUsSUFBYTtJQUMzRCxJQUFJLE9BQU8sQ0FBQTtJQUNYLE1BQU0sQ0FBQyxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUM5QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDUCxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QixPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFBO1lBQ3BCLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRztnQkFDckIsSUFBSSxFQUFFLEtBQUs7Z0JBQ1gsT0FBTyxFQUFFLElBQUk7Z0JBQ2IsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDekIsT0FBTztnQkFFUCxPQUFPLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDekMsQ0FBQTtZQUNELE1BQU0sQ0FBQyxPQUFPLENBQUE7UUFDaEIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLEtBQUssQ0FBQTtRQUNkLENBQUM7SUFDSCxDQUFDO0lBRUQsTUFBTSxLQUFLLEdBQWEsQ0FBQyxDQUFDLEtBQUssQ0FBQTtJQUMvQixFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDcEIsQ0FBQztJQUVELE9BQU8sR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFBO0lBQ25CLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUE7UUFDcEIsQ0FBQyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7SUFDckIsQ0FBQztJQUNELE1BQU0sQ0FBQyxPQUFPLENBQUE7QUFDaEIsQ0FBQztBQS9CRCxnQ0ErQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgPSByZXF1aXJlKCdmcy1wbHVzJylcbmltcG9ydCBfID0gcmVxdWlyZSgnbG9kYXNoJylcbmltcG9ydCB7IGlzTWFya2Rvd25QcmV2aWV3VmlldyB9IGZyb20gJy4vY2FzdCdcbi8vIGltcG9ydCB7IHdhdGNoUGF0aCwgRmlsZXN5c3RlbUNoYW5nZUV2ZW50LCBQYXRoV2F0Y2hlciB9IGZyb20gJ2F0b20nXG5cbmRlY2xhcmUgbW9kdWxlICdwYXRod2F0Y2hlcicge1xuICBleHBvcnQgZnVuY3Rpb24gd2F0Y2goXG4gICAgZmlsZW5hbWU6IHN0cmluZyxcbiAgICBsaXN0ZW5lcj86IChldmVudDogVEV2ZW50LCBwYXRoOiBzdHJpbmcpID0+IHZvaWQsXG4gICk6IFBhdGhXYXRjaGVyXG4gIGV4cG9ydCB0eXBlIFRFdmVudCA9ICdyZW5hbWUnIHwgJ2RlbGV0ZScgfCAnY2hhbmdlJ1xufVxuaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJylcbmNvbnN0IHBhdGhXYXRjaGVyUGF0aCA9IHBhdGguam9pbihcbiAgYXRvbS5wYWNrYWdlcy5yZXNvdXJjZVBhdGgsXG4gICcvbm9kZV9tb2R1bGVzL3BhdGh3YXRjaGVyL2xpYi9tYWluJyxcbilcbmltcG9ydCBfdW51c2VkID0gcmVxdWlyZSgncGF0aHdhdGNoZXInKVxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXZhci1yZXF1aXJlc1xuY29uc3QgeyB3YXRjaCB9ID0gcmVxdWlyZShwYXRoV2F0Y2hlclBhdGgpIGFzIHR5cGVvZiBfdW51c2VkXG5pbXBvcnQgUGF0aFdhdGNoZXIgPSBfdW51c2VkLlBhdGhXYXRjaGVyXG5pbXBvcnQgVEV2ZW50ID0gX3VudXNlZC5URXZlbnRcblxuaW50ZXJmYWNlIEltYWdlUmVnaXN0ZXJSZWMge1xuICB2ZXJzaW9uOiBudW1iZXJcbiAgd2F0Y2hlcjogUGF0aFdhdGNoZXJcbiAgZmlsZXM6IHN0cmluZ1tdXG4gIHdhdGNoZWQ6IGJvb2xlYW5cbiAgcGF0aDogc3RyaW5nXG59XG5cbmxldCBpbWFnZVJlZ2lzdGVyOiB7XG4gIFtrZXk6IHN0cmluZ106IEltYWdlUmVnaXN0ZXJSZWMgfCB1bmRlZmluZWRcbn0gPSB7fVxuXG5jb25zdCByZWZyZXNoSW1hZ2VzID0gXy5kZWJvdW5jZShhc3luYyBmdW5jdGlvbihzcmM6IHN0cmluZykge1xuICBmb3IgKGNvbnN0IGl0ZW0gb2YgYXRvbS53b3Jrc3BhY2UuZ2V0UGFuZUl0ZW1zKCkpIHtcbiAgICBpZiAoaXNNYXJrZG93blByZXZpZXdWaWV3KGl0ZW0pKSB7XG4gICAgICAvLyBUT0RPOiBjaGVjayBhZ2FpbnN0IGltYWdlUmVnaXN0ZXJbc3JjXS52ZXJzaW9uLmZpbGVzXG4gICAgICBhd2FpdCBpdGVtLnJlZnJlc2hJbWFnZXMoc3JjKVxuICAgIH1cbiAgfVxufSwgMjUwKVxuXG5mdW5jdGlvbiBzcmNDbG9zdXJlKHNyYzogc3RyaW5nKSB7XG4gIC8vIHJldHVybiBmdW5jdGlvbihldmVudHM6IEZpbGVzeXN0ZW1DaGFuZ2VFdmVudCkge1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQ6IFRFdmVudCwgcGF0aDogc3RyaW5nKSB7XG4gICAgLy8gZm9yIChjb25zdCBldmVudCBvZiBldmVudHMpIHtcbiAgICBjb25zb2xlLmxvZyhldmVudCwgcGF0aClcbiAgICBjb25zdCBpID0gaW1hZ2VSZWdpc3RlcltzcmNdXG4gICAgaWYgKCFpKSByZXR1cm5cbiAgICBpZiAoZXZlbnQgPT09ICdjaGFuZ2UnICYmIGZzLmlzRmlsZVN5bmMoc3JjKSkge1xuICAgICAgaS52ZXJzaW9uID0gRGF0ZS5ub3coKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpLndhdGNoZXIuZGlzcG9zZSgpXG4gICAgICBpLndhdGNoZXIuY2xvc2UoKVxuICAgICAgZGVsZXRlIGltYWdlUmVnaXN0ZXJbc3JjXVxuICAgIH1cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWZsb2F0aW5nLXByb21pc2VzXG4gICAgcmVmcmVzaEltYWdlcyhzcmMpXG4gICAgLy8gfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVGaWxlKGZpbGU6IHN0cmluZykge1xuICBpbWFnZVJlZ2lzdGVyID0gXy5tYXBWYWx1ZXMoaW1hZ2VSZWdpc3RlciwgZnVuY3Rpb24oaW1hZ2UpIHtcbiAgICBpZiAoIWltYWdlKSByZXR1cm4gaW1hZ2VcbiAgICBpbWFnZS5maWxlcyA9IF8ud2l0aG91dChpbWFnZS5maWxlcywgZmlsZSlcbiAgICBpbWFnZS5maWxlcyA9IF8uZmlsdGVyKGltYWdlLmZpbGVzLCBmcy5pc0ZpbGVTeW5jKVxuICAgIGlmIChfLmlzRW1wdHkoaW1hZ2UuZmlsZXMpKSB7XG4gICAgICBpbWFnZS53YXRjaGVkID0gZmFsc2VcbiAgICAgIC8vIGltYWdlLndhdGNoZXIuZGlzcG9zZSgpXG4gICAgICBpbWFnZS53YXRjaGVyLmNsb3NlKClcbiAgICB9XG4gICAgcmV0dXJuIGltYWdlXG4gIH0pXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRWZXJzaW9uKGltYWdlOiBzdHJpbmcsIGZpbGU/OiBzdHJpbmcpIHtcbiAgbGV0IHZlcnNpb25cbiAgY29uc3QgaSA9IGltYWdlUmVnaXN0ZXJbaW1hZ2VdXG4gIGlmICghaSkge1xuICAgIGlmIChmcy5pc0ZpbGVTeW5jKGltYWdlKSkge1xuICAgICAgdmVyc2lvbiA9IERhdGUubm93KClcbiAgICAgIGltYWdlUmVnaXN0ZXJbaW1hZ2VdID0ge1xuICAgICAgICBwYXRoOiBpbWFnZSxcbiAgICAgICAgd2F0Y2hlZDogdHJ1ZSxcbiAgICAgICAgZmlsZXM6IGZpbGUgPyBbZmlsZV0gOiBbXSxcbiAgICAgICAgdmVyc2lvbixcbiAgICAgICAgLy8gd2F0Y2hlcjogYXdhaXQgd2F0Y2hQYXRoKGltYWdlLCB7fSwgc3JjQ2xvc3VyZShpbWFnZSkpLFxuICAgICAgICB3YXRjaGVyOiB3YXRjaChpbWFnZSwgc3JjQ2xvc3VyZShpbWFnZSkpLFxuICAgICAgfVxuICAgICAgcmV0dXJuIHZlcnNpb25cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgY29uc3QgZmlsZXM6IHN0cmluZ1tdID0gaS5maWxlc1xuICBpZiAoZmlsZSAmJiAhXy5pbmNsdWRlcyhmaWxlcywgZmlsZSkpIHtcbiAgICBpLmZpbGVzLnB1c2goZmlsZSlcbiAgfVxuXG4gIHZlcnNpb24gPSBpLnZlcnNpb25cbiAgaWYgKCF2ZXJzaW9uICYmIGZzLmlzRmlsZVN5bmMoaW1hZ2UpKSB7XG4gICAgdmVyc2lvbiA9IERhdGUubm93KClcbiAgICBpLnZlcnNpb24gPSB2ZXJzaW9uXG4gIH1cbiAgcmV0dXJuIHZlcnNpb25cbn1cbiJdfQ==