"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-plus");
const _ = require("lodash");
const path = require("path");
const cast_1 = require("./cast");
const pathWatcherPath = path.join(atom.packages.resourcePath, '/node_modules/pathwatcher/lib/main');
const pathWatcher = require(pathWatcherPath);
let imageRegister = {};
const refreshImages = _.debounce(function (src) {
    if (atom.workspace != null) {
        for (let item of atom.workspace.getPaneItems()) {
            if (cast_1.isMarkdownPreviewView(item)) {
                item.refreshImages(src);
            }
        }
    }
}, 250);
function srcClosure(src) {
    return function (event, _path) {
        if (event === 'change' && fs.isFileSync(src)) {
            imageRegister[src].version = Date.now();
        }
        else {
            imageRegister[src].watcher.close();
            delete imageRegister[src];
        }
        refreshImages(src);
    };
}
function removeFile(file) {
    imageRegister = _.mapValues(imageRegister, function (image) {
        image.files = _.without(image.files, file);
        image.files = _.filter(image.files, fs.isFileSync);
        if (_.isEmpty(image.files)) {
            image.watched = false;
            image.watcher.close();
        }
        return image;
    });
}
exports.removeFile = removeFile;
function getVersion(image, file) {
    let version;
    const i = _.get(imageRegister, image, {});
    if (_.isEmpty(i)) {
        if (fs.isFileSync(image)) {
            version = Date.now();
            imageRegister[image] = {
                path: image,
                watched: true,
                files: [file],
                version,
                watcher: pathWatcher.watch(image, srcClosure(image)),
            };
            return version;
        }
        else {
            return false;
        }
    }
    const files = _.get(i, 'files');
    if (!_.includes(files, file)) {
        imageRegister[image].files.push(file);
    }
    version = _.get(i, 'version');
    if (!version && fs.isFileSync(image)) {
        version = Date.now();
        imageRegister[image].version = version;
    }
    return version;
}
exports.getVersion = getVersion;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2Utd2F0Y2gtaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ltYWdlLXdhdGNoLWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhCQUE4QjtBQUM5Qiw0QkFBNEI7QUFDNUIsNkJBQTZCO0FBQzdCLGlDQUE4QztBQUM5QyxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUMvQixJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFDMUIsb0NBQW9DLENBQ3JDLENBQUE7QUFDRCxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUE7QUFFNUMsSUFBSSxhQUFhLEdBQUcsRUFBRSxDQUFBO0FBRXRCLE1BQU0sYUFBYSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBUyxHQUFHO0lBQzNDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMzQixHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMvQyxFQUFFLENBQUMsQ0FBQyw0QkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBRWhDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDekIsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0FBRVAsb0JBQW9CLEdBQVc7SUFDN0IsTUFBTSxDQUFDLFVBQVMsS0FBYSxFQUFFLEtBQWE7UUFDMUMsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLFFBQVEsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUs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aW1wb3J0IGZzID0gcmVxdWlyZSgnZnMtcGx1cycpXG5pbXBvcnQgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpXG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxuaW1wb3J0IHsgaXNNYXJrZG93blByZXZpZXdWaWV3IH0gZnJvbSAnLi9jYXN0J1xuY29uc3QgcGF0aFdhdGNoZXJQYXRoID0gcGF0aC5qb2luKFxuICBhdG9tLnBhY2thZ2VzLnJlc291cmNlUGF0aCxcbiAgJy9ub2RlX21vZHVsZXMvcGF0aHdhdGNoZXIvbGliL21haW4nLFxuKVxuY29uc3QgcGF0aFdhdGNoZXIgPSByZXF1aXJlKHBhdGhXYXRjaGVyUGF0aClcblxubGV0IGltYWdlUmVnaXN0ZXIgPSB7fVxuXG5jb25zdCByZWZyZXNoSW1hZ2VzID0gXy5kZWJvdW5jZShmdW5jdGlvbihzcmMpIHtcbiAgaWYgKGF0b20ud29ya3NwYWNlICE9IG51bGwpIHtcbiAgICBmb3IgKGxldCBpdGVtIG9mIGF0b20ud29ya3NwYWNlLmdldFBhbmVJdGVtcygpKSB7XG4gICAgICBpZiAoaXNNYXJrZG93blByZXZpZXdWaWV3KGl0ZW0pKSB7XG4gICAgICAgIC8vIFRPRE86IGNoZWNrIGFnYWluc3QgaW1hZ2VSZWdpc3RlcltzcmNdLnZlcnNpb24uZmlsZXNcbiAgICAgICAgaXRlbS5yZWZyZXNoSW1hZ2VzKHNyYylcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0sIDI1MClcblxuZnVuY3Rpb24gc3JjQ2xvc3VyZShzcmM6IHN0cmluZykge1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQ6IHN0cmluZywgX3BhdGg6IHN0cmluZykge1xuICAgIGlmIChldmVudCA9PT0gJ2NoYW5nZScgJiYgZnMuaXNGaWxlU3luYyhzcmMpKSB7XG4gICAgICBpbWFnZVJlZ2lzdGVyW3NyY10udmVyc2lvbiA9IERhdGUubm93KClcbiAgICB9IGVsc2Uge1xuICAgICAgaW1hZ2VSZWdpc3RlcltzcmNdLndhdGNoZXIuY2xvc2UoKVxuICAgICAgZGVsZXRlIGltYWdlUmVnaXN0ZXJbc3JjXVxuICAgIH1cbiAgICByZWZyZXNoSW1hZ2VzKHNyYylcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlRmlsZShmaWxlOiBzdHJpbmcpIHtcbiAgaW1hZ2VSZWdpc3RlciA9IF8ubWFwVmFsdWVzKGltYWdlUmVnaXN0ZXIsIGZ1bmN0aW9uKGltYWdlKSB7XG4gICAgaW1hZ2UuZmlsZXMgPSBfLndpdGhvdXQoaW1hZ2UuZmlsZXMsIGZpbGUpXG4gICAgaW1hZ2UuZmlsZXMgPSBfLmZpbHRlcihpbWFnZS5maWxlcywgZnMuaXNGaWxlU3luYylcbiAgICBpZiAoXy5pc0VtcHR5KGltYWdlLmZpbGVzKSkge1xuICAgICAgaW1hZ2Uud2F0Y2hlZCA9IGZhbHNlXG4gICAgICBpbWFnZS53YXRjaGVyLmNsb3NlKClcbiAgICB9XG4gICAgcmV0dXJuIGltYWdlXG4gIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRWZXJzaW9uKGltYWdlOiBzdHJpbmcsIGZpbGU/OiBzdHJpbmcpIHtcbiAgbGV0IHZlcnNpb25cbiAgY29uc3QgaSA9IF8uZ2V0KGltYWdlUmVnaXN0ZXIsIGltYWdlLCB7fSlcbiAgaWYgKF8uaXNFbXB0eShpKSkge1xuICAgIGlmIChmcy5pc0ZpbGVTeW5jKGltYWdlKSkge1xuICAgICAgdmVyc2lvbiA9IERhdGUubm93KClcbiAgICAgIGltYWdlUmVnaXN0ZXJbaW1hZ2VdID0ge1xuICAgICAgICBwYXRoOiBpbWFnZSxcbiAgICAgICAgd2F0Y2hlZDogdHJ1ZSxcbiAgICAgICAgZmlsZXM6IFtmaWxlXSxcbiAgICAgICAgdmVyc2lvbixcbiAgICAgICAgd2F0Y2hlcjogcGF0aFdhdGNoZXIud2F0Y2goaW1hZ2UsIHNyY0Nsb3N1cmUoaW1hZ2UpKSxcbiAgICAgIH1cbiAgICAgIHJldHVybiB2ZXJzaW9uXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGZpbGVzID0gXy5nZXQoaSwgJ2ZpbGVzJylcbiAgaWYgKCFfLmluY2x1ZGVzKGZpbGVzLCBmaWxlKSkge1xuICAgIGltYWdlUmVnaXN0ZXJbaW1hZ2VdLmZpbGVzLnB1c2goZmlsZSlcbiAgfVxuXG4gIHZlcnNpb24gPSBfLmdldChpLCAndmVyc2lvbicpXG4gIGlmICghdmVyc2lvbiAmJiBmcy5pc0ZpbGVTeW5jKGltYWdlKSkge1xuICAgIHZlcnNpb24gPSBEYXRlLm5vdygpXG4gICAgaW1hZ2VSZWdpc3RlcltpbWFnZV0udmVyc2lvbiA9IHZlcnNpb25cbiAgfVxuICByZXR1cm4gdmVyc2lvblxufVxuIl19