"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-plus");
const _ = require("lodash");
const path = require("path");
const cast_1 = require("./cast");
const pathWatcherPath = path.join(atom.packages.resourcePath, '/node_modules/pathwatcher/lib/main');
const pathWatcher = require(pathWatcherPath);
let imageRegister = {};
const refreshImages = _.debounce((function (src) {
    if (atom.workspace != null) {
        for (let item of atom.workspace.getPaneItems()) {
            if (cast_1.isMarkdownPreviewView(item)) {
                item.refreshImages(src);
            }
        }
    }
}), 250);
function srcClosure(src) {
    return function (event, _path) {
        if ((event === 'change') && fs.isFileSync(src)) {
            imageRegister[src].version = Date.now();
        }
        else {
            imageRegister[src].watcher.close();
            delete imageRegister[src];
        }
        refreshImages(src);
    };
}
function removeFile(file) {
    imageRegister = _.mapValues(imageRegister, function (image) {
        image.files = _.without(image.files, file);
        image.files = _.filter(image.files, fs.isFileSync);
        if (_.isEmpty(image.files)) {
            image.watched = false;
            image.watcher.close();
        }
        return image;
    });
}
exports.removeFile = removeFile;
function getVersion(image, file) {
    let version;
    const i = _.get(imageRegister, image, {});
    if (_.isEmpty(i)) {
        if (fs.isFileSync(image)) {
            version = Date.now();
            imageRegister[image] = {
                path: image,
                watched: true,
                files: [file],
                version,
                watcher: pathWatcher.watch(image, srcClosure(image))
            };
            return version;
        }
        else {
            return false;
        }
    }
    const files = _.get(i, 'files');
    if (!_.includes(files, file)) {
        imageRegister[image].files.push(file);
    }
    version = _.get(i, 'version');
    if (!version && fs.isFileSync(image)) {
        version = Date.now();
        imageRegister[image].version = version;
    }
    return version;
}
exports.getVersion = getVersion;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2Utd2F0Y2gtaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ltYWdlLXdhdGNoLWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDhCQUErQjtBQUMvQiw0QkFBNkI7QUFDN0IsNkJBQThCO0FBQzlCLGlDQUErQztBQUMvQyxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLG9DQUFvQyxDQUFDLENBQUM7QUFDcEcsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBRTdDLElBQUksYUFBYSxHQUFHLEVBQUUsQ0FBQztBQUV2QixNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsVUFBUyxHQUFHO0lBQzVDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMzQixHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMvQyxFQUFFLENBQUMsQ0FBQyw0QkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBRWhDLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDMUIsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0FBQ0QsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFFWCxvQkFBb0IsR0FBVztJQUM3QixNQUFNLENBQUMsVUFBUyxLQUFhLEVBQUUsS0FBYTtRQUMxQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUMxQyxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ25DLE9BQU8sYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLENBQUM7UUFDRCxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckIsQ0FBQyxDQUFBO0FBQ0gsQ0FBQztBQUdELG9CQUEyQixJQUFZO0lBQ3JDLGFBQWEsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxVQUFTLEtBQUs7UUFDdkQsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDM0MsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ25ELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzQixLQUFLLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUN0QixLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3hCLENBQUM7UUFDRCxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2YsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBVkQsZ0NBVUM7QUFFRCxvQkFBMkIsS0FBYSxFQUFFLElBQVk7SUFDcEQsSUFBSSxPQUFPLENBQUM7SUFDWixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDMUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakIsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekIsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNyQixhQUFhLENBQUMsS0FBSyxDQUFDLEdBQUc7Z0JBQ3JCLElBQUksRUFBRSxLQUFLO2dCQUNYLE9BQU8sRUFBRSxJQUFJO2dCQUNiLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQztnQkFDYixPQUFPO2dCQUNQLE9BQU8sRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDckQsQ0FBQztZQUNGLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDakIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLEtBQUssQ0FBQztRQUNmLENBQUM7SUFDSCxDQUFDO0lBRUQsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDaEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0IsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELE9BQU8sR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM5QixFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pDLENBQUM7SUFDRCxNQUFNLENBQUMsT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUE5QkQsZ0NBOEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzID0gcmVxdWlyZSgnZnMtcGx1cycpO1xuaW1wb3J0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuaW1wb3J0IHsgaXNNYXJrZG93blByZXZpZXdWaWV3IH0gZnJvbSAnLi9jYXN0JztcbmNvbnN0IHBhdGhXYXRjaGVyUGF0aCA9IHBhdGguam9pbihhdG9tLnBhY2thZ2VzLnJlc291cmNlUGF0aCwgJy9ub2RlX21vZHVsZXMvcGF0aHdhdGNoZXIvbGliL21haW4nKTtcbmNvbnN0IHBhdGhXYXRjaGVyID0gcmVxdWlyZShwYXRoV2F0Y2hlclBhdGgpO1xuXG5sZXQgaW1hZ2VSZWdpc3RlciA9IHt9O1xuXG5jb25zdCByZWZyZXNoSW1hZ2VzID0gXy5kZWJvdW5jZSgoZnVuY3Rpb24oc3JjKSB7XG4gIGlmIChhdG9tLndvcmtzcGFjZSAhPSBudWxsKSB7XG4gICAgZm9yIChsZXQgaXRlbSBvZiBhdG9tLndvcmtzcGFjZS5nZXRQYW5lSXRlbXMoKSkge1xuICAgICAgaWYgKGlzTWFya2Rvd25QcmV2aWV3VmlldyhpdGVtKSkge1xuICAgICAgICAvLyBUT0RPOiBjaGVjayBhZ2FpbnN0IGltYWdlUmVnaXN0ZXJbc3JjXS52ZXJzaW9uLmZpbGVzXG4gICAgICAgIGl0ZW0ucmVmcmVzaEltYWdlcyhzcmMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICB9KSwgMjUwKTtcblxuZnVuY3Rpb24gc3JjQ2xvc3VyZShzcmM6IHN0cmluZykge1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQ6IHN0cmluZywgX3BhdGg6IHN0cmluZykge1xuICAgIGlmICgoZXZlbnQgPT09ICdjaGFuZ2UnKSAmJiBmcy5pc0ZpbGVTeW5jKHNyYykpIHtcbiAgICAgIGltYWdlUmVnaXN0ZXJbc3JjXS52ZXJzaW9uID0gRGF0ZS5ub3coKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW1hZ2VSZWdpc3RlcltzcmNdLndhdGNoZXIuY2xvc2UoKTtcbiAgICAgIGRlbGV0ZSBpbWFnZVJlZ2lzdGVyW3NyY107XG4gICAgfVxuICAgIHJlZnJlc2hJbWFnZXMoc3JjKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVGaWxlKGZpbGU6IHN0cmluZykge1xuICBpbWFnZVJlZ2lzdGVyID0gXy5tYXBWYWx1ZXMoaW1hZ2VSZWdpc3RlciwgZnVuY3Rpb24oaW1hZ2UpIHtcbiAgICBpbWFnZS5maWxlcyA9IF8ud2l0aG91dChpbWFnZS5maWxlcywgZmlsZSk7XG4gICAgaW1hZ2UuZmlsZXMgPSBfLmZpbHRlcihpbWFnZS5maWxlcywgZnMuaXNGaWxlU3luYyk7XG4gICAgaWYgKF8uaXNFbXB0eShpbWFnZS5maWxlcykpIHtcbiAgICAgIGltYWdlLndhdGNoZWQgPSBmYWxzZTtcbiAgICAgIGltYWdlLndhdGNoZXIuY2xvc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIGltYWdlO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFZlcnNpb24oaW1hZ2U6IHN0cmluZywgZmlsZTogc3RyaW5nKSB7XG4gIGxldCB2ZXJzaW9uO1xuICBjb25zdCBpID0gXy5nZXQoaW1hZ2VSZWdpc3RlciwgaW1hZ2UsIHt9KTtcbiAgaWYgKF8uaXNFbXB0eShpKSkge1xuICAgIGlmIChmcy5pc0ZpbGVTeW5jKGltYWdlKSkge1xuICAgICAgdmVyc2lvbiA9IERhdGUubm93KCk7XG4gICAgICBpbWFnZVJlZ2lzdGVyW2ltYWdlXSA9IHtcbiAgICAgICAgcGF0aDogaW1hZ2UsXG4gICAgICAgIHdhdGNoZWQ6IHRydWUsXG4gICAgICAgIGZpbGVzOiBbZmlsZV0sXG4gICAgICAgIHZlcnNpb24sXG4gICAgICAgIHdhdGNoZXI6IHBhdGhXYXRjaGVyLndhdGNoKGltYWdlLCBzcmNDbG9zdXJlKGltYWdlKSlcbiAgICAgIH07XG4gICAgICByZXR1cm4gdmVyc2lvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGZpbGVzID0gXy5nZXQoaSwgJ2ZpbGVzJyk7XG4gIGlmICghXy5pbmNsdWRlcyhmaWxlcywgZmlsZSkpIHtcbiAgICBpbWFnZVJlZ2lzdGVyW2ltYWdlXS5maWxlcy5wdXNoKGZpbGUpO1xuICB9XG5cbiAgdmVyc2lvbiA9IF8uZ2V0KGksICd2ZXJzaW9uJyk7XG4gIGlmICghdmVyc2lvbiAmJiBmcy5pc0ZpbGVTeW5jKGltYWdlKSkge1xuICAgIHZlcnNpb24gPSBEYXRlLm5vdygpO1xuICAgIGltYWdlUmVnaXN0ZXJbaW1hZ2VdLnZlcnNpb24gPSB2ZXJzaW9uO1xuICB9XG4gIHJldHVybiB2ZXJzaW9uO1xufVxuIl19