"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const two_dim_array_1 = require("./two-dim-array");
let curHash = 0;
const hashTo = {};
class WrappedDomTree {
    constructor(dom, clone, rep) {
        if (clone) {
            this.shownTree = new WrappedDomTree(dom, false, this);
            this.dom = dom.cloneNode(true);
        }
        else {
            this.dom = dom;
            this.rep = rep;
        }
        this.clone = clone;
        this.hash = curHash++;
        hashTo[this.hash] = this;
        this.isText = dom.nodeType === 3;
        this.tagName = dom.tagName;
        this.className = dom.className;
        this.textData = dom.data;
        this.diffHash = {};
        if (this.isText) {
            this.size = 1;
        }
        else {
            ;
            ({ rep } = this);
            this.children = Array.from(this.dom.childNodes).map((dom, ind) => new WrappedDomTree(dom, false, rep ? rep.children[ind] : undefined));
            this.size = this.children.length
                ? this.children.reduce((prev, cur) => prev + cur.size, 0)
                : 0;
            if (!this.size) {
                this.size = 1;
            }
        }
    }
    diffTo(otherTree) {
        if (this.clone) {
            return this.shownTree.diffTo(otherTree);
        }
        const diff = this.rep && this.rep.diff(otherTree);
        const { operations } = diff;
        let indexShift = 0;
        let inserted = [];
        let last;
        let possibleReplace;
        let r;
        let lastOp;
        let lastElmDeleted;
        let lastElmInserted;
        if (operations) {
            if (operations instanceof Array) {
                for (let op of Array.from(operations)) {
                    ;
                    ((op) => {
                        if (op.type === 'd') {
                            const possibleLastDeleted = this.children[op.tree + indexShift]
                                .dom;
                            r = this.remove(op.tree + indexShift);
                            this.rep && this.rep.remove(op.tree + indexShift);
                            if (!last || last.nextSibling === r || last === r) {
                                last = r;
                                if (last && lastOp && op.tree === lastOp.pos) {
                                    lastElmDeleted = possibleLastDeleted;
                                }
                                else {
                                    lastElmDeleted = null;
                                    lastElmInserted = null;
                                }
                                lastOp = op;
                            }
                            indexShift--;
                            return;
                        }
                        else if (op.type === 'i') {
                            this.rep &&
                                this.rep.insert(op.pos + indexShift, otherTree.children[op.otherTree]);
                            r = this.insert(op.pos + indexShift, otherTree.children[op.otherTree], this.rep && this.rep.children[op.pos + indexShift]);
                            inserted.push(r);
                            if (!last || last.nextSibling === r) {
                                last = r;
                                lastOp = op;
                                lastElmInserted = r;
                            }
                            indexShift++;
                            return;
                        }
                        else {
                            const re = this.children[op.tree + indexShift].diffTo(otherTree.children[op.otherTree]);
                            if (!last ||
                                (last.nextSibling === this.children[op.tree + indexShift].dom &&
                                    re.last)) {
                                ;
                                ({ last } = re);
                                if (re.possibleReplace) {
                                    lastElmInserted = re.possibleReplace.cur;
                                    lastElmDeleted = re.possibleReplace.prev;
                                }
                                lastOp = op;
                            }
                            inserted = inserted.concat(re.inserted);
                            return;
                        }
                    })(op);
                }
            }
            else {
                console.log(operations);
                throw new Error('invalid operations');
            }
        }
        if (lastOp && lastOp.type !== 'i' && lastElmInserted && lastElmDeleted) {
            possibleReplace = {
                cur: lastElmInserted,
                prev: lastElmDeleted,
            };
        }
        return {
            last,
            inserted,
            possibleReplace,
        };
    }
    insert(i, tree, rep) {
        const dom = tree.dom.cloneNode(true);
        if (i === this.dom.childNodes.length) {
            this.dom.appendChild(dom);
        }
        else {
            this.dom.insertBefore(dom, this.dom.childNodes[i]);
        }
        const ctree = new WrappedDomTree(dom, false, rep);
        this.children.splice(i, 0, ctree);
        return this.dom.childNodes[i];
    }
    remove(i) {
        this.dom.removeChild(this.dom.childNodes[i]);
        this.children[i].removeSelf();
        this.children.splice(i, 1);
        return this.dom.childNodes[i - 1];
    }
    diff(otherTree, tmax) {
        let i;
        if (this.equalTo(otherTree)) {
            return { score: 0, operations: null };
        }
        if (this.cannotReplaceWith(otherTree)) {
            return { score: 1 / 0, operations: null };
        }
        const key = otherTree.hash;
        if (Object.keys(this.diffHash).includes(key.toString())) {
            return this.diffHash[key];
        }
        if (tmax === undefined) {
            tmax = 100000;
        }
        if (tmax <= 0) {
            return 0;
        }
        let offset = 0;
        const forwardSearch = (offset) => {
            return (offset < this.children.length &&
                offset < otherTree.children.length &&
                this.children[offset].equalTo(otherTree.children[offset]));
        };
        while (forwardSearch(offset)) {
            offset++;
        }
        const dp = new two_dim_array_1.TwoDimArray(this.children.length + 1 - offset, otherTree.children.length + 1 - offset);
        const p = new two_dim_array_1.TwoDimArray(this.children.length + 1 - offset, otherTree.children.length + 1 - offset);
        dp.set(0, 0, 0);
        let sum = 0;
        if (otherTree.children.length - offset > 1) {
            let asc, end;
            for (i = 1, end = otherTree.children.length - offset - 1, asc = 1 <= end; asc ? i <= end : i >= end; asc ? i++ : i--) {
                dp.set(0, i, sum);
                p.set(0, i, i - 1);
                sum += otherTree.children[i + offset].size;
            }
        }
        if (otherTree.children.length - offset > 0) {
            dp.set(0, otherTree.children.length - offset, sum);
            p.set(0, otherTree.children.length - offset, otherTree.children.length - 1 - offset);
        }
        sum = 0;
        if (this.children.length - offset > 1) {
            let asc1, end1;
            for (i = 1, end1 = this.children.length - offset - 1, asc1 = 1 <= end1; asc1 ? i <= end1 : i >= end1; asc1 ? i++ : i--) {
                dp.set(i, 0, sum);
                p.set(i, 0, (i - 1) * p.col);
                sum += this.children[i + offset].size;
            }
        }
        if (this.children.length - offset) {
            dp.set(this.children.length - offset, 0, sum);
            p.set(this.children.length - offset, 0, (this.children.length - 1 - offset) * p.col);
        }
        var getScore = (i, j, max) => {
            if (dp.get(i, j) !== undefined) {
                return dp.get(i, j);
            }
            if (max === undefined) {
                max = 1 / 0;
            }
            if (max <= 0) {
                return 1 / 0;
            }
            let val = max;
            const bound = max;
            const subdiff = this.children[i - 1 + offset].diff(otherTree.children[j - 1 + offset], bound).score;
            let force = false;
            if (subdiff < bound &&
                subdiff + 1 <
                    this.children[i - 1 + offset].size +
                        otherTree.children[j - 1 + offset].size) {
                force = true;
            }
            val = getScore(i - 1, j - 1, bound - subdiff) + subdiff;
            let prev = p.getInd(i - 1, j - 1);
            if (!force) {
                let other = getScore(i - 1, j, Math.min(val, max) - this.children[i - 1 + offset].size) + this.children[i - 1 + offset].size;
                if (other < val) {
                    prev = p.getInd(i - 1, j);
                    val = other;
                }
                other =
                    getScore(i, j - 1, Math.min(val, max) - otherTree.children[j - 1 + offset].size) + otherTree.children[j - 1 + offset].size;
                if (other < val) {
                    prev = p.getInd(i, j - 1);
                    val = other;
                }
            }
            if (val >= max) {
                val = 1 / 0;
            }
            dp.set(i, j, val);
            p.set(i, j, prev);
            return val;
        };
        const score = getScore(this.children.length - offset, otherTree.children.length - offset, tmax);
        const operations = [];
        let cur = p.getInd(this.children.length - offset, otherTree.children.length - offset);
        let cr = this.children.length - 1 - offset;
        let cc = otherTree.children.length - 1 - offset;
        while (p.rawGet(cur) !== undefined) {
            const prev = p.rawGet(cur);
            const rc = p.get2DInd(prev);
            const pr = rc.r - 1;
            const pc = rc.c - 1;
            if (pr === cr) {
                operations.unshift({
                    type: 'i',
                    otherTree: cc + offset,
                    pos: cr + 1 + offset,
                });
            }
            else if (pc === cc) {
                operations.unshift({
                    type: 'd',
                    tree: cr + offset,
                });
            }
            else {
                const op = this.children[cr + offset].diff(otherTree.children[cc + offset]).operations;
                if (op && op.length) {
                    operations.unshift({
                        type: 'r',
                        tree: cr + offset,
                        otherTree: cc + offset,
                    });
                }
            }
            cur = prev;
            cr = pr;
            cc = pc;
        }
        this.diffHash[key] = {
            score,
            operations,
        };
        return this.diffHash[key];
    }
    equalTo(otherTree) {
        return this.dom.isEqualNode(otherTree.dom);
    }
    cannotReplaceWith(otherTree) {
        return (this.isText ||
            otherTree.isText ||
            this.tagName !== otherTree.tagName ||
            this.className !== otherTree.className ||
            this.className === 'math' ||
            this.className === 'atom-text-editor' ||
            this.tagName === 'A' ||
            (this.tagName === 'IMG' && !this.dom.isEqualNode(otherTree.dom)));
    }
    getContent() {
        if (this.dom.outerHTML) {
            return this.dom.outerHTML;
        }
        else {
            return this.textData;
        }
    }
    removeSelf() {
        hashTo[this.hash] = null;
        this.children && this.children.forEach((c) => c.removeSelf());
    }
}
exports.WrappedDomTree = WrappedDomTree;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcHBlZC1kb20tdHJlZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy93cmFwcGVkLWRvbS10cmVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBNkJBLG1EQUE2QztBQUU3QyxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUE7QUFDZixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUE7QUFFakI7SUFtQkUsWUFBWSxHQUFZLEVBQUUsS0FBYyxFQUFFLEdBQW9CO1FBQzVELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDVixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksY0FBYyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUE7WUFDckQsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBWSxDQUFBO1FBQzNDLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFBO1lBQ2QsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUE7UUFDaEIsQ0FBQztRQUVELElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO1FBQ2xCLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxFQUFFLENBQUE7UUFDckIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUE7UUFDeEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQTtRQUNoQyxJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUE7UUFDMUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFBO1FBQzlCLElBQUksQ0FBQyxRQUFRLEdBQUksR0FBVyxDQUFDLElBQUksQ0FBQTtRQUNqQyxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQTtRQUVsQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNoQixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQTtRQUNmLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLENBQUM7WUFBQSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUE7WUFDakIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUNqRCxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUNYLElBQUksY0FBYyxDQUNoQixHQUFjLEVBQ2QsS0FBSyxFQUNMLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUNwQyxDQUNKLENBQUE7WUFDRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTTtnQkFDOUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO2dCQUN6RCxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ0wsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDZixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQTtZQUNmLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUdELE1BQU0sQ0FDSixTQUF5QjtRQVN6QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUN6QyxDQUFDO1FBRUQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUNqRCxNQUFNLEVBQUUsVUFBVSxFQUFFLEdBQUcsSUFBSSxDQUFBO1FBQzNCLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQTtRQUNsQixJQUFJLFFBQVEsR0FBVyxFQUFFLENBQUE7UUFHekIsSUFBSSxJQUFJLENBQUE7UUFDUixJQUFJLGVBQWUsQ0FBQTtRQUNuQixJQUFJLENBQUMsQ0FBQTtRQUNMLElBQUksTUFBTSxDQUFBO1FBQ1YsSUFBSSxjQUFjLENBQUE7UUFDbEIsSUFBSSxlQUFlLENBQUE7UUFFbkIsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUNmLEVBQUUsQ0FBQyxDQUFDLFVBQVUsWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNoQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDdEMsQ0FBQztvQkFBQSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUU7d0JBQ1AsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDOzRCQUNwQixNQUFNLG1CQUFtQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUM7aUNBQzVELEdBQUcsQ0FBQTs0QkFDTixDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQyxDQUFBOzRCQUNyQyxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLENBQUE7NEJBQ2pELEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxXQUFXLEtBQUssQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dDQUNsRCxJQUFJLEdBQUcsQ0FBQyxDQUFBO2dDQUdSLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxNQUFNLElBQUksRUFBRSxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztvQ0FDN0MsY0FBYyxHQUFHLG1CQUFtQixDQUFBO2dDQUN0QyxDQUFDO2dDQUFDLElBQUksQ0FBQyxDQUFDO29DQUNOLGNBQWMsR0FBRyxJQUFJLENBQUE7b0NBQ3JCLGVBQWUsR0FBRyxJQUFJLENBQUE7Z0NBQ3hCLENBQUM7Z0NBQ0QsTUFBTSxHQUFHLEVBQUUsQ0FBQTs0QkFDYixDQUFDOzRCQUNELFVBQVUsRUFBRSxDQUFBOzRCQUNaLE1BQU0sQ0FBQTt3QkFDUixDQUFDO3dCQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7NEJBQzNCLElBQUksQ0FBQyxHQUFHO2dDQUNOLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUNiLEVBQUUsQ0FBQyxHQUFHLEdBQUcsVUFBVSxFQUNuQixTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FDakMsQ0FBQTs0QkFDSCxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FDYixFQUFFLENBQUMsR0FBRyxHQUFHLFVBQVUsRUFDbkIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQ2hDLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxVQUFVLENBQUMsQ0FDbkQsQ0FBQTs0QkFDRCxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBOzRCQUNoQixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0NBQ3BDLElBQUksR0FBRyxDQUFDLENBQUE7Z0NBQ1IsTUFBTSxHQUFHLEVBQUUsQ0FBQTtnQ0FDWCxlQUFlLEdBQUcsQ0FBQyxDQUFBOzRCQUNyQixDQUFDOzRCQUNELFVBQVUsRUFBRSxDQUFBOzRCQUNaLE1BQU0sQ0FBQTt3QkFDUixDQUFDO3dCQUFDLElBQUksQ0FBQyxDQUFDOzRCQUNOLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsQ0FBQyxNQUFNLENBQ25ELFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUNqQyxDQUFBOzRCQUNELEVBQUUsQ0FBQyxDQUNELENBQUMsSUFBSTtnQ0FDTCxDQUFDLElBQUksQ0FBQyxXQUFXLEtBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQyxDQUFDLEdBQUc7b0NBQzNELEVBQUUsQ0FBQyxJQUFJLENBQ1gsQ0FBQyxDQUFDLENBQUM7Z0NBQ0QsQ0FBQztnQ0FBQSxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUE7Z0NBQ2hCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO29DQUN2QixlQUFlLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUE7b0NBQ3hDLGNBQWMsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQTtnQ0FDMUMsQ0FBQztnQ0FDRCxNQUFNLEdBQUcsRUFBRSxDQUFBOzRCQUNiLENBQUM7NEJBQ0QsUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFBOzRCQUN2QyxNQUFNLENBQUE7d0JBQ1IsQ0FBQztvQkFDSCxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQTtnQkFDUixDQUFDO1lBQ0gsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUE7Z0JBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtZQUN2QyxDQUFDO1FBQ0gsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLEdBQUcsSUFBSSxlQUFlLElBQUksY0FBYyxDQUFDLENBQUMsQ0FBQztZQUN2RSxlQUFlLEdBQUc7Z0JBQ2hCLEdBQUcsRUFBRSxlQUFlO2dCQUNwQixJQUFJLEVBQUUsY0FBYzthQUNyQixDQUFBO1FBQ0gsQ0FBQztRQUVELE1BQU0sQ0FBQztZQUNMLElBQUk7WUFDSixRQUFRO1lBQ1IsZUFBZTtTQUNoQixDQUFBO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxDQUFTLEVBQUUsSUFBb0IsRUFBRSxHQUFvQjtRQUMxRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNwQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNyQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUMzQixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNwRCxDQUFDO1FBRUQsTUFBTSxLQUFLLEdBQUcsSUFBSSxjQUFjLENBQUMsR0FBYyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUM1RCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQ2pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUMvQixDQUFDO0lBRUQsTUFBTSxDQUFDLENBQVM7UUFDZCxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQzVDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUE7UUFDN0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQzFCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFDbkMsQ0FBQztJQUVELElBQUksQ0FBQyxTQUF5QixFQUFFLElBQWE7UUFDM0MsSUFBSSxDQUFDLENBQUE7UUFDTCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1QixNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQTtRQUN2QyxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUE7UUFDM0MsQ0FBQztRQUVELE1BQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUE7UUFDMUIsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4RCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUMzQixDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxDQUFD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TSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFBO1FBQzNCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFBO1FBQ3RCLENBQUM7SUFDSCxDQUFDO0lBRUQsVUFBVTtRQUNSLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFBO1FBQ3hCLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFBO0lBQy9ELENBQUM7Q0FDRjtBQTVhRCx3Q0E0YUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogZGVjYWZmZWluYXRlIHN1Z2dlc3Rpb25zOlxuICogRFMxMDE6IFJlbW92ZSB1bm5lY2Vzc2FyeSB1c2Ugb2YgQXJyYXkuZnJvbVxuICogRFMxMDI6IFJlbW92ZSB1bm5lY2Vzc2FyeSBjb2RlIGNyZWF0ZWQgYmVjYXVzZSBvZiBpbXBsaWNpdCByZXR1cm5zXG4gKiBEUzIwMjogU2ltcGxpZnkgZHluYW1pYyByYW5nZSBsb29wc1xuICogRnVsbCBkb2NzOiBodHRwczovL2dpdGh1Yi5jb20vZGVjYWZmZWluYXRlL2RlY2FmZmVpbmF0ZS9ibG9iL21hc3Rlci9kb2NzL3N1Z2dlc3Rpb25zLm1kXG4gKi9cbi8vIFRoaXMgZmlsZSBpbmNvcnBvcmF0ZXMgY29kZSBmcm9tIFttYXJrbW9uXShodHRwczovL2dpdGh1Yi5jb20veXlqaGFvL21hcmttb24pXG4vLyBjb3ZlcmVkIGJ5IHRoZSBmb2xsb3dpbmcgdGVybXM6XG4vL1xuLy8gQ29weXJpZ2h0IChjKSAyMDE0LCBZYW8gWXVqaWFuLCBodHRwOi8veWp5YW8uY29tXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cbmltcG9ydCB7IFR3b0RpbUFycmF5IH0gZnJvbSAnLi90d28tZGltLWFycmF5J1xuXG5sZXQgY3VySGFzaCA9IDBcbmNvbnN0IGhhc2hUbyA9IHt9XG5cbmV4cG9ydCBjbGFzcyBXcmFwcGVkRG9tVHJlZSB7XG4gIHRleHREYXRhOiBzdHJpbmdcbiAgY2hpbGRyZW46IFdyYXBwZWREb21UcmVlW11cbiAgc2l6ZTogbnVtYmVyXG4gIGRpZmZIYXNoOiB7IFtrZXk6IHN0cmluZ106IGFueSB9XG4gIGNsYXNzTmFtZTogc3RyaW5nXG4gIHRhZ05hbWU6IHN0cmluZ1xuICByZXA/OiBXcmFwcGVkRG9tVHJlZVxuICBpc1RleHQ6IGJvb2xlYW5cbiAgaGFzaDogbnVtYmVyXG4gIGNsb25lOiBib29sZWFuXG4gIGRvbTogRWxlbWVudFxuICBzaG93blRyZWU6IFdyYXBwZWREb21UcmVlXG4gIC8vIEBwYXJhbSBkb20gQSBET00gZWxlbWVudCBvYmplY3RcbiAgLy8gICAgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL2VsZW1lbnRcbiAgLy8gQHBhcmFtIGNsb25lIEJvb2xlYW4gZmxhZyBpbmRpY2F0aW5nIGlmIHRoaXMgaXMgdGhlIERPTSB0cmVlIHRvIG1vZGlmeVxuICAvLyBAcGFyYW0gcmVwIFdyYXBwZWREb21UcmVlIG9mIGEgRE9NIGVsZW1lbnQgbm9kZSBpbiBkb21cbiAgY29uc3RydWN0b3IoZG9tOiBFbGVtZW50LCBjbG9uZTogdHJ1ZSlcbiAgY29uc3RydWN0b3IoZG9tOiBFbGVtZW50LCBjbG9uZTogZmFsc2UsIHJlcD86IFdyYXBwZWREb21UcmVlKVxuICBjb25zdHJ1Y3Rvcihkb206IEVsZW1lbnQsIGNsb25lOiBib29sZWFuLCByZXA/OiBXcmFwcGVkRG9tVHJlZSkge1xuICAgIGlmIChjbG9uZSkge1xuICAgICAgdGhpcy5zaG93blRyZWUgPSBuZXcgV3JhcHBlZERvbVRyZWUoZG9tLCBmYWxzZSwgdGhpcylcbiAgICAgIHRoaXMuZG9tID0gZG9tLmNsb25lTm9kZSh0cnVlKSBhcyBFbGVtZW50XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZG9tID0gZG9tXG4gICAgICB0aGlzLnJlcCA9IHJlcFxuICAgIH1cblxuICAgIHRoaXMuY2xvbmUgPSBjbG9uZVxuICAgIHRoaXMuaGFzaCA9IGN1ckhhc2grK1xuICAgIGhhc2hUb1t0aGlzLmhhc2hdID0gdGhpc1xuICAgIHRoaXMuaXNUZXh0ID0gZG9tLm5vZGVUeXBlID09PSAzXG4gICAgdGhpcy50YWdOYW1lID0gZG9tLnRhZ05hbWVcbiAgICB0aGlzLmNsYXNzTmFtZSA9IGRvbS5jbGFzc05hbWVcbiAgICB0aGlzLnRleHREYXRhID0gKGRvbSBhcyBhbnkpLmRhdGFcbiAgICB0aGlzLmRpZmZIYXNoID0ge31cblxuICAgIGlmICh0aGlzLmlzVGV4dCkge1xuICAgICAgdGhpcy5zaXplID0gMVxuICAgIH0gZWxzZSB7XG4gICAgICA7KHsgcmVwIH0gPSB0aGlzKVxuICAgICAgdGhpcy5jaGlsZHJlbiA9IEFycmF5LmZyb20odGhpcy5kb20uY2hpbGROb2RlcykubWFwKFxuICAgICAgICAoZG9tLCBpbmQpID0+XG4gICAgICAgICAgbmV3IFdyYXBwZWREb21UcmVlKFxuICAgICAgICAgICAgZG9tIGFzIEVsZW1lbnQsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHJlcCA/IHJlcC5jaGlsZHJlbltpbmRdIDogdW5kZWZpbmVkLFxuICAgICAgICAgICksXG4gICAgICApXG4gICAgICB0aGlzLnNpemUgPSB0aGlzLmNoaWxkcmVuLmxlbmd0aFxuICAgICAgICA/IHRoaXMuY2hpbGRyZW4ucmVkdWNlKChwcmV2LCBjdXIpID0+IHByZXYgKyBjdXIuc2l6ZSwgMClcbiAgICAgICAgOiAwXG4gICAgICBpZiAoIXRoaXMuc2l6ZSkge1xuICAgICAgICB0aGlzLnNpemUgPSAxXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQHBhcmFtIG90aGVyVHJlZSBXcmFwcGVkRG9tVHJlZSBvZiBhIERPTSBlbGVtZW50IHRvIGRpZmYgYWdhaW5zdFxuICBkaWZmVG8oXG4gICAgb3RoZXJUcmVlOiBXcmFwcGVkRG9tVHJlZSxcbiAgKToge1xuICAgIHBvc3NpYmxlUmVwbGFjZT86IHtcbiAgICAgIGN1cj86IE5vZGVcbiAgICAgIHByZXY/OiBFbGVtZW50XG4gICAgfVxuICAgIGluc2VydGVkOiBOb2RlW11cbiAgICBsYXN0PzogTm9kZVxuICB9IHtcbiAgICBpZiAodGhpcy5jbG9uZSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2hvd25UcmVlLmRpZmZUbyhvdGhlclRyZWUpXG4gICAgfVxuXG4gICAgY29uc3QgZGlmZiA9IHRoaXMucmVwICYmIHRoaXMucmVwLmRpZmYob3RoZXJUcmVlKVxuICAgIGNvbnN0IHsgb3BlcmF0aW9ucyB9ID0gZGlmZlxuICAgIGxldCBpbmRleFNoaWZ0ID0gMFxuICAgIGxldCBpbnNlcnRlZDogTm9kZVtdID0gW11cblxuICAgIC8vIEZvcmNlIHZhcmlhYmxlcyB0byBsZWFrIHRvIGRpZmZUbyBzY29wZVxuICAgIGxldCBsYXN0XG4gICAgbGV0IHBvc3NpYmxlUmVwbGFjZVxuICAgIGxldCByXG4gICAgbGV0IGxhc3RPcFxuICAgIGxldCBsYXN0RWxtRGVsZXRlZFxuICAgIGxldCBsYXN0RWxtSW5zZXJ0ZWRcblxuICAgIGlmIChvcGVyYXRpb25zKSB7XG4gICAgICBpZiAob3BlcmF0aW9ucyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIGZvciAobGV0IG9wIG9mIEFycmF5LmZyb20ob3BlcmF0aW9ucykpIHtcbiAgICAgICAgICA7KChvcCkgPT4ge1xuICAgICAgICAgICAgaWYgKG9wLnR5cGUgPT09ICdkJykge1xuICAgICAgICAgICAgICBjb25zdCBwb3NzaWJsZUxhc3REZWxldGVkID0gdGhpcy5jaGlsZHJlbltvcC50cmVlICsgaW5kZXhTaGlmdF1cbiAgICAgICAgICAgICAgICAuZG9tXG4gICAgICAgICAgICAgIHIgPSB0aGlzLnJlbW92ZShvcC50cmVlICsgaW5kZXhTaGlmdClcbiAgICAgICAgICAgICAgdGhpcy5yZXAgJiYgdGhpcy5yZXAucmVtb3ZlKG9wLnRyZWUgKyBpbmRleFNoaWZ0KVxuICAgICAgICAgICAgICBpZiAoIWxhc3QgfHwgbGFzdC5uZXh0U2libGluZyA9PT0gciB8fCBsYXN0ID09PSByKSB7XG4gICAgICAgICAgICAgICAgbGFzdCA9IHJcbiAgICAgICAgICAgICAgICAvLyBVbmRlZmluZWQgZXJyb3JzIGNhbiBiZSB0aHJvdyBzbyB3ZSBhZGQgYSBjb25kaXRpb24gb24gbGFzdE9wXG4gICAgICAgICAgICAgICAgLy8gYmVpbmcgZGVmaW5lZFxuICAgICAgICAgICAgICAgIGlmIChsYXN0ICYmIGxhc3RPcCAmJiBvcC50cmVlID09PSBsYXN0T3AucG9zKSB7XG4gICAgICAgICAgICAgICAgICBsYXN0RWxtRGVsZXRlZCA9IHBvc3NpYmxlTGFzdERlbGV0ZWRcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgbGFzdEVsbURlbGV0ZWQgPSBudWxsXG4gICAgICAgICAgICAgICAgICBsYXN0RWxtSW5zZXJ0ZWQgPSBudWxsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxhc3RPcCA9IG9wXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaW5kZXhTaGlmdC0tXG4gICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfSBlbHNlIGlmIChvcC50eXBlID09PSAnaScpIHtcbiAgICAgICAgICAgICAgdGhpcy5yZXAgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnJlcC5pbnNlcnQoXG4gICAgICAgICAgICAgICAgICBvcC5wb3MgKyBpbmRleFNoaWZ0LFxuICAgICAgICAgICAgICAgICAgb3RoZXJUcmVlLmNoaWxkcmVuW29wLm90aGVyVHJlZV0sXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICByID0gdGhpcy5pbnNlcnQoXG4gICAgICAgICAgICAgICAgb3AucG9zICsgaW5kZXhTaGlmdCxcbiAgICAgICAgICAgICAgICBvdGhlclRyZWUuY2hpbGRyZW5bb3Aub3RoZXJUcmVlXSxcbiAgICAgICAgICAgICAgICB0aGlzLnJlcCAmJiB0aGlzLnJlcC5jaGlsZHJlbltvcC5wb3MgKyBpbmRleFNoaWZ0XSxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBpbnNlcnRlZC5wdXNoKHIpXG4gICAgICAgICAgICAgIGlmICghbGFzdCB8fCBsYXN0Lm5leHRTaWJsaW5nID09PSByKSB7XG4gICAgICAgICAgICAgICAgbGFzdCA9IHJcbiAgICAgICAgICAgICAgICBsYXN0T3AgPSBvcFxuICAgICAgICAgICAgICAgIGxhc3RFbG1JbnNlcnRlZCA9IHJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpbmRleFNoaWZ0KytcbiAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zdCByZSA9IHRoaXMuY2hpbGRyZW5bb3AudHJlZSArIGluZGV4U2hpZnRdLmRpZmZUbyhcbiAgICAgICAgICAgICAgICBvdGhlclRyZWUuY2hpbGRyZW5bb3Aub3RoZXJUcmVlXSxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgIWxhc3QgfHxcbiAgICAgICAgICAgICAgICAobGFzdC5uZXh0U2libGluZyA9PT0gdGhpcy5jaGlsZHJlbltvcC50cmVlICsgaW5kZXhTaGlmdF0uZG9tICYmXG4gICAgICAgICAgICAgICAgICByZS5sYXN0KVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICA7KHsgbGFzdCB9ID0gcmUpXG4gICAgICAgICAgICAgICAgaWYgKHJlLnBvc3NpYmxlUmVwbGFjZSkge1xuICAgICAgICAgICAgICAgICAgbGFzdEVsbUluc2VydGVkID0gcmUucG9zc2libGVSZXBsYWNlLmN1clxuICAgICAgICAgICAgICAgICAgbGFzdEVsbURlbGV0ZWQgPSByZS5wb3NzaWJsZVJlcGxhY2UucHJldlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsYXN0T3AgPSBvcFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGluc2VydGVkID0gaW5zZXJ0ZWQuY29uY2F0KHJlLmluc2VydGVkKVxuICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KShvcClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2cob3BlcmF0aW9ucylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIG9wZXJhdGlvbnMnKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChsYXN0T3AgJiYgbGFzdE9wLnR5cGUgIT09ICdpJyAmJiBsYXN0RWxtSW5zZXJ0ZWQgJiYgbGFzdEVsbURlbGV0ZWQpIHtcbiAgICAgIHBvc3NpYmxlUmVwbGFjZSA9IHtcbiAgICAgICAgY3VyOiBsYXN0RWxtSW5zZXJ0ZWQsXG4gICAgICAgIHByZXY6IGxhc3RFbG1EZWxldGVkLFxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBsYXN0LFxuICAgICAgaW5zZXJ0ZWQsXG4gICAgICBwb3NzaWJsZVJlcGxhY2UsXG4gICAgfVxuICB9XG5cbiAgaW5zZXJ0KGk6IG51bWJlciwgdHJlZTogV3JhcHBlZERvbVRyZWUsIHJlcD86IFdyYXBwZWREb21UcmVlKSB7XG4gICAgY29uc3QgZG9tID0gdHJlZS5kb20uY2xvbmVOb2RlKHRydWUpXG4gICAgaWYgKGkgPT09IHRoaXMuZG9tLmNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmRvbS5hcHBlbmRDaGlsZChkb20pXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZG9tLmluc2VydEJlZm9yZShkb20sIHRoaXMuZG9tLmNoaWxkTm9kZXNbaV0pXG4gICAgfVxuXG4gICAgY29uc3QgY3RyZWUgPSBuZXcgV3JhcHBlZERvbVRyZWUoZG9tIGFzIEVsZW1lbnQsIGZhbHNlLCByZXApXG4gICAgdGhpcy5jaGlsZHJlbi5zcGxpY2UoaSwgMCwgY3RyZWUpXG4gICAgcmV0dXJuIHRoaXMuZG9tLmNoaWxkTm9kZXNbaV1cbiAgfVxuXG4gIHJlbW92ZShpOiBudW1iZXIpIHtcbiAgICB0aGlzLmRvbS5yZW1vdmVDaGlsZCh0aGlzLmRvbS5jaGlsZE5vZGVzW2ldKVxuICAgIHRoaXMuY2hpbGRyZW5baV0ucmVtb3ZlU2VsZigpXG4gICAgdGhpcy5jaGlsZHJlbi5zcGxpY2UoaSwgMSlcbiAgICByZXR1cm4gdGhpcy5kb20uY2hpbGROb2Rlc1tpIC0gMV1cbiAgfVxuXG4gIGRpZmYob3RoZXJUcmVlOiBXcmFwcGVkRG9tVHJlZSwgdG1heD86IG51bWJlcikge1xuICAgIGxldCBpXG4gICAgaWYgKHRoaXMuZXF1YWxUbyhvdGhlclRyZWUpKSB7XG4gICAgICByZXR1cm4geyBzY29yZTogMCwgb3BlcmF0aW9uczogbnVsbCB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuY2Fubm90UmVwbGFjZVdpdGgob3RoZXJUcmVlKSkge1xuICAgICAgcmV0dXJuIHsgc2NvcmU6IDEgLyAwLCBvcGVyYXRpb25zOiBudWxsIH1cbiAgICB9XG5cbiAgICBjb25zdCBrZXkgPSBvdGhlclRyZWUuaGFzaFxuICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLmRpZmZIYXNoKS5pbmNsdWRlcyhrZXkudG9TdHJpbmcoKSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmRpZmZIYXNoW2tleV1cbiAgICB9XG5cbiAgICBpZiAodG1heCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0bWF4ID0gMTAwMDAwXG4gICAgfVxuICAgIGlmICh0bWF4IDw9IDApIHtcbiAgICAgIHJldHVybiAwXG4gICAgfVxuXG4gICAgbGV0IG9mZnNldCA9IDBcbiAgICBjb25zdCBmb3J3YXJkU2VhcmNoID0gKG9mZnNldDogbnVtYmVyKSA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBvZmZzZXQgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aCAmJlxuICAgICAgICBvZmZzZXQgPCBvdGhlclRyZWUuY2hpbGRyZW4ubGVuZ3RoICYmXG4gICAgICAgIHRoaXMuY2hpbGRyZW5bb2Zmc2V0XS5lcXVhbFRvKG90aGVyVHJlZS5jaGlsZHJlbltvZmZzZXRdKVxuICAgICAgKVxuICAgIH1cbiAgICB3aGlsZSAoZm9yd2FyZFNlYXJjaChvZmZzZXQpKSB7XG4gICAgICBvZmZzZXQrK1xuICAgIH1cblxuICAgIGNvbnN0IGRwID0gbmV3IFR3b0RpbUFycmF5PG51bWJlcj4oXG4gICAgICB0aGlzLmNoaWxkcmVuLmxlbmd0aCArIDEgLSBvZmZzZXQsXG4gICAgICBvdGhlclRyZWUuY2hpbGRyZW4ubGVuZ3RoICsgMSAtIG9mZnNldCxcbiAgICApXG4gICAgY29uc3QgcCA9IG5ldyBUd29EaW1BcnJheTxudW1iZXI+KFxuICAgICAgdGhpcy5jaGlsZHJlbi5sZW5ndGggKyAxIC0gb2Zmc2V0LFxuICAgICAgb3RoZXJUcmVlLmNoaWxkcmVuLmxlbmd0aCArIDEgLSBvZmZzZXQsXG4gICAgKVxuICAgIGRwLnNldCgwLCAwLCAwKVxuXG4gICAgbGV0IHN1bSA9IDBcbiAgICAvLyBCZWNhdXNlIGNvZmZlc2NyaXB0cyBhbGxvd3MgYmlkZXJjdGlvbmFsIGxvb3BzIHdlIG5lZWQgdGhpcyBjb25kaXRpb25cbiAgICAvLyBnYXVyZCB0byBwcmV2ZW50IGEgZGVjcmVhc2luZyBhcnJheSBsaXN0XG4gICAgaWYgKG90aGVyVHJlZS5jaGlsZHJlbi5sZW5ndGggLSBvZmZzZXQgPiAxKSB7XG4gICAgICBsZXQgYXNjLCBlbmRcbiAgICAgIGZvciAoXG4gICAgICAgIGkgPSAxLCBlbmQgPSBvdGhlclRyZWUuY2hpbGRyZW4ubGVuZ3RoIC0gb2Zmc2V0IC0gMSwgYXNjID0gMSA8PSBlbmQ7XG4gICAgICAgIGFzYyA/IGkgPD0gZW5kIDogaSA+PSBlbmQ7XG4gICAgICAgIGFzYyA/IGkrKyA6IGktLVxuICAgICAgKSB7XG4gICAgICAgIGRwLnNldCgwLCBpLCBzdW0pXG4gICAgICAgIHAuc2V0KDAsIGksIGkgLSAxKVxuICAgICAgICBzdW0gKz0gb3RoZXJUcmVlLmNoaWxkcmVuW2kgKyBvZmZzZXRdLnNpemVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG90aGVyVHJlZS5jaGlsZHJlbi5sZW5ndGggLSBvZmZzZXQgPiAwKSB7XG4gICAgICBkcC5zZXQoMCwgb3RoZXJUcmVlLmNoaWxkcmVuLmxlbmd0aCAtIG9mZnNldCwgc3VtKVxuICAgICAgcC5zZXQoXG4gICAgICAgIDAsXG4gICAgICAgIG90aGVyVHJlZS5jaGlsZHJlbi5sZW5ndGggLSBvZmZzZXQsXG4gICAgICAgIG90aGVyVHJlZS5jaGlsZHJlbi5sZW5ndGggLSAxIC0gb2Zmc2V0LFxuICAgICAgKVxuICAgIH1cblxuICAgIHN1bSA9IDBcbiAgICAvLyBCZWNhdXNlIGNvZmZlc2NyaXB0cyBhbGxvd3MgYmlkZXJjdGlvbmFsIGxvb3BzIHdlIG5lZWQgdGhpcyBjb25kaXRpb25cbiAgICAvLyBnYXVyZCB0byBwcmV2ZW50IGEgZGVjcmVhc2luZyBhcnJheSBsaXN0XG4gICAgaWYgKHRoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gb2Zmc2V0ID4gMSkge1xuICAgICAgbGV0IGFzYzEsIGVuZDFcbiAgICAgIGZvciAoXG4gICAgICAgIGkgPSAxLCBlbmQxID0gdGhpcy5jaGlsZHJlbi5sZW5ndGggLSBvZmZzZXQgLSAxLCBhc2MxID0gMSA8PSBlbmQxO1xuICAgICAgICBhc2MxID8gaSA8PSBlbmQxIDogaSA+PSBlbmQxO1xuICAgICAgICBhc2MxID8gaSsrIDogaS0tXG4gICAgICApIHtcbiAgICAgICAgZHAuc2V0KGksIDAsIHN1bSlcbiAgICAgICAgcC5zZXQoaSwgMCwgKGkgLSAxKSAqIHAuY29sKVxuICAgICAgICBzdW0gKz0gdGhpcy5jaGlsZHJlbltpICsgb2Zmc2V0XS5zaXplXG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIG9mZnNldCkge1xuICAgICAgZHAuc2V0KHRoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gb2Zmc2V0LCAwLCBzdW0pXG4gICAgICBwLnNldChcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5sZW5ndGggLSBvZmZzZXQsXG4gICAgICAgIDAsXG4gICAgICAgICh0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIDEgLSBvZmZzZXQpICogcC5jb2wsXG4gICAgICApXG4gICAgfVxuXG4gICAgdmFyIGdldFNjb3JlID0gKGk6IG51bWJlciwgajogbnVtYmVyLCBtYXg6IG51bWJlcikgPT4ge1xuICAgICAgaWYgKGRwLmdldChpLCBqKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBkcC5nZXQoaSwgailcbiAgICAgIH1cbiAgICAgIGlmIChtYXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBtYXggPSAxIC8gMFxuICAgICAgfVxuICAgICAgaWYgKG1heCA8PSAwKSB7XG4gICAgICAgIHJldHVybiAxIC8gMFxuICAgICAgfVxuXG4gICAgICBsZXQgdmFsID0gbWF4XG4gICAgICBjb25zdCBib3VuZCA9IG1heFxuICAgICAgY29uc3Qgc3ViZGlmZiA9IHRoaXMuY2hpbGRyZW5baSAtIDEgKyBvZmZzZXRdLmRpZmYoXG4gICAgICAgIG90aGVyVHJlZS5jaGlsZHJlbltqIC0gMSArIG9mZnNldF0sXG4gICAgICAgIGJvdW5kLFxuICAgICAgKS5zY29yZVxuICAgICAgbGV0IGZvcmNlID0gZmFsc2VcbiAgICAgIGlmIChcbiAgICAgICAgc3ViZGlmZiA8IGJvdW5kICYmXG4gICAgICAgIHN1YmRpZmYgKyAxIDxcbiAgICAgICAgICB0aGlzLmNoaWxkcmVuW2kgLSAxICsgb2Zmc2V0XS5zaXplICtcbiAgICAgICAgICAgIG90aGVyVHJlZS5jaGlsZHJlbltqIC0gMSArIG9mZnNldF0uc2l6ZVxuICAgICAgKSB7XG4gICAgICAgIGZvcmNlID0gdHJ1ZVxuICAgICAgfVxuICAgICAgdmFsID0gZ2V0U2NvcmUoaSAtIDEsIGogLSAxLCBib3VuZCAtIHN1YmRpZmYpICsgc3ViZGlmZlxuICAgICAgbGV0IHByZXYgPSBwLmdldEluZChpIC0gMSwgaiAtIDEpXG5cbiAgICAgIGlmICghZm9yY2UpIHtcbiAgICAgICAgbGV0IG90aGVyID1cbiAgICAgICAgICBnZXRTY29yZShcbiAgICAgICAgICAgIGkgLSAxLFxuICAgICAgICAgICAgaixcbiAgICAgICAgICAgIE1hdGgubWluKHZhbCwgbWF4KSAtIHRoaXMuY2hpbGRyZW5baSAtIDEgKyBvZmZzZXRdLnNpemUsXG4gICAgICAgICAgKSArIHRoaXMuY2hpbGRyZW5baSAtIDEgKyBvZmZzZXRdLnNpemVcbiAgICAgICAgaWYgKG90aGVyIDwgdmFsKSB7XG4gICAgICAgICAgcHJldiA9IHAuZ2V0SW5kKGkgLSAxLCBqKVxuICAgICAgICAgIHZhbCA9IG90aGVyXG4gICAgICAgIH1cblxuICAgICAgICBvdGhlciA9XG4gICAgICAgICAgZ2V0U2NvcmUoXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgaiAtIDEsXG4gICAgICAgICAgICBNYXRoLm1pbih2YWwsIG1heCkgLSBvdGhlclRyZWUuY2hpbGRyZW5baiAtIDEgKyBvZmZzZXRdLnNpemUsXG4gICAgICAgICAgKSArIG90aGVyVHJlZS5jaGlsZHJlbltqIC0gMSArIG9mZnNldF0uc2l6ZVxuICAgICAgICBpZiAob3RoZXIgPCB2YWwpIHtcbiAgICAgICAgICBwcmV2ID0gcC5nZXRJbmQoaSwgaiAtIDEpXG4gICAgICAgICAgdmFsID0gb3RoZXJcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodmFsID49IG1heCkge1xuICAgICAgICB2YWwgPSAxIC8gMFxuICAgICAgfVxuXG4gICAgICBkcC5zZXQoaSwgaiwgdmFsKVxuICAgICAgcC5zZXQoaSwgaiwgcHJldilcbiAgICAgIHJldHVybiB2YWxcbiAgICB9XG5cbiAgICBjb25zdCBzY29yZSA9IGdldFNjb3JlKFxuICAgICAgdGhpcy5jaGlsZHJlbi5sZW5ndGggLSBvZmZzZXQsXG4gICAgICBvdGhlclRyZWUuY2hpbGRyZW4ubGVuZ3RoIC0gb2Zmc2V0LFxuICAgICAgdG1heCxcbiAgICApXG4gICAgY29uc3Qgb3BlcmF0aW9ucyA9IFtdXG5cbiAgICBsZXQgY3VyID0gcC5nZXRJbmQoXG4gICAgICB0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIG9mZnNldCxcbiAgICAgIG90aGVyVHJlZS5jaGlsZHJlbi5sZW5ndGggLSBvZmZzZXQsXG4gICAgKVxuICAgIGxldCBjciA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMSAtIG9mZnNldFxuICAgIGxldCBjYyA9IG90aGVyVHJlZS5jaGlsZHJlbi5sZW5ndGggLSAxIC0gb2Zmc2V0XG5cbiAgICB3aGlsZSAocC5yYXdHZXQoY3VyKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBwcmV2ID0gcC5yYXdHZXQoY3VyKVxuICAgICAgY29uc3QgcmMgPSBwLmdldDJESW5kKHByZXYpXG4gICAgICBjb25zdCBwciA9IHJjLnIgLSAxXG4gICAgICBjb25zdCBwYyA9IHJjLmMgLSAxXG5cbiAgICAgIGlmIChwciA9PT0gY3IpIHtcbiAgICAgICAgb3BlcmF0aW9ucy51bnNoaWZ0KHtcbiAgICAgICAgICB0eXBlOiAnaScsXG4gICAgICAgICAgb3RoZXJUcmVlOiBjYyArIG9mZnNldCxcbiAgICAgICAgICBwb3M6IGNyICsgMSArIG9mZnNldCxcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAocGMgPT09IGNjKSB7XG4gICAgICAgIG9wZXJhdGlvbnMudW5zaGlmdCh7XG4gICAgICAgICAgdHlwZTogJ2QnLFxuICAgICAgICAgIHRyZWU6IGNyICsgb2Zmc2V0LFxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgb3AgPSB0aGlzLmNoaWxkcmVuW2NyICsgb2Zmc2V0XS5kaWZmKFxuICAgICAgICAgIG90aGVyVHJlZS5jaGlsZHJlbltjYyArIG9mZnNldF0sXG4gICAgICAgICkub3BlcmF0aW9uc1xuICAgICAgICBpZiAob3AgJiYgb3AubGVuZ3RoKSB7XG4gICAgICAgICAgb3BlcmF0aW9ucy51bnNoaWZ0KHtcbiAgICAgICAgICAgIHR5cGU6ICdyJyxcbiAgICAgICAgICAgIHRyZWU6IGNyICsgb2Zmc2V0LFxuICAgICAgICAgICAgb3RoZXJUcmVlOiBjYyArIG9mZnNldCxcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjdXIgPSBwcmV2XG4gICAgICBjciA9IHByXG4gICAgICBjYyA9IHBjXG4gICAgfVxuXG4gICAgdGhpcy5kaWZmSGFzaFtrZXldID0ge1xuICAgICAgc2NvcmUsXG4gICAgICBvcGVyYXRpb25zLFxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmRpZmZIYXNoW2tleV1cbiAgfVxuXG4gIGVxdWFsVG8ob3RoZXJUcmVlOiBXcmFwcGVkRG9tVHJlZSkge1xuICAgIHJldHVybiB0aGlzLmRvbS5pc0VxdWFsTm9kZShvdGhlclRyZWUuZG9tKVxuICB9XG5cbiAgY2Fubm90UmVwbGFjZVdpdGgob3RoZXJUcmVlOiBXcmFwcGVkRG9tVHJlZSkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmlzVGV4dCB8fFxuICAgICAgb3RoZXJUcmVlLmlzVGV4dCB8fFxuICAgICAgdGhpcy50YWdOYW1lICE9PSBvdGhlclRyZWUudGFnTmFtZSB8fFxuICAgICAgdGhpcy5jbGFzc05hbWUgIT09IG90aGVyVHJlZS5jbGFzc05hbWUgfHxcbiAgICAgIHRoaXMuY2xhc3NOYW1lID09PSAnbWF0aCcgfHxcbiAgICAgIHRoaXMuY2xhc3NOYW1lID09PSAnYXRvbS10ZXh0LWVkaXRvcicgfHxcbiAgICAgIHRoaXMudGFnTmFtZSA9PT0gJ0EnIHx8XG4gICAgICAodGhpcy50YWdOYW1lID09PSAnSU1HJyAmJiAhdGhpcy5kb20uaXNFcXVhbE5vZGUob3RoZXJUcmVlLmRvbSkpXG4gICAgKVxuICB9XG5cbiAgZ2V0Q29udGVudCgpIHtcbiAgICBpZiAodGhpcy5kb20ub3V0ZXJIVE1MKSB7XG4gICAgICByZXR1cm4gdGhpcy5kb20ub3V0ZXJIVE1MXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHREYXRhXG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlU2VsZigpIHtcbiAgICBoYXNoVG9bdGhpcy5oYXNoXSA9IG51bGxcbiAgICB0aGlzLmNoaWxkcmVuICYmIHRoaXMuY2hpbGRyZW4uZm9yRWFjaCgoYykgPT4gYy5yZW1vdmVTZWxmKCkpXG4gIH1cbn1cbiJdfQ==