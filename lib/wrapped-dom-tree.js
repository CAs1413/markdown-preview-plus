"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const two_dim_array_1 = require("./two-dim-array");
const util_1 = require("./util");
let curHash = 0;
const hashTo = {};
class WrappedDomTree {
    constructor(dom, clone, rep) {
        this.children = [];
        this.size = 0;
        if (clone) {
            this.shownTree = new WrappedDomTree(dom, false, this);
            this.dom = dom.cloneNode(true);
        }
        else {
            this.dom = dom;
            this.rep = rep;
        }
        this.clone = clone;
        this.hash = curHash++;
        hashTo[this.hash] = this;
        this.isText = dom.nodeType === Node.TEXT_NODE;
        if (util_1.isElement(dom)) {
            this.tagName = dom.tagName;
            this.className = dom.className;
            this.style = dom.getAttribute('style');
        }
        this.diffHash = {};
        if (this.isText) {
            this.size = 1;
        }
        else {
            this.children = Array.from(this.dom.childNodes).map((dom, ind) => new WrappedDomTree(dom, false, rep ? rep.children[ind] : undefined));
            this.size = this.children.length
                ? this.children.reduce((prev, cur) => prev + cur.size, 0)
                : 0;
            if (!this.size) {
                this.size = 1;
            }
        }
    }
    diffTo(otherTree) {
        if (this.clone && this.shownTree) {
            return this.shownTree.diffTo(otherTree);
        }
        const diff = this.rep && this.rep.diff(otherTree);
        const operations = diff && diff.operations;
        let indexShift = 0;
        const inserted = [];
        let last;
        let possibleReplace;
        let r;
        let lastOp;
        let lastElmDeleted;
        let lastElmInserted;
        if (operations) {
            if (Array.isArray(operations)) {
                for (const op of operations) {
                    if (op.type === 'd') {
                        const possibleLastDeleted = this.children[op.tree + indexShift].dom;
                        r = this.remove(op.tree + indexShift);
                        this.rep && this.rep.remove(op.tree + indexShift);
                        if (!last || last.nextSibling === r || last === r) {
                            last = r;
                            if (last &&
                                lastOp &&
                                lastOp.type === 'i' &&
                                op.tree === lastOp.pos) {
                                lastElmDeleted = possibleLastDeleted;
                            }
                            else {
                                lastElmDeleted = undefined;
                                lastElmInserted = undefined;
                            }
                            lastOp = op;
                        }
                        indexShift--;
                    }
                    else if (op.type === 'i') {
                        this.rep &&
                            this.rep.insert(op.pos + indexShift, otherTree.children[op.otherTree]);
                        r = this.insert(op.pos + indexShift, otherTree.children[op.otherTree], this.rep && this.rep.children[op.pos + indexShift]);
                        inserted.push(r);
                        if (!last || last.nextSibling === r) {
                            last = r;
                            lastOp = op;
                            lastElmInserted = r;
                        }
                        indexShift++;
                    }
                    else {
                        const re = this.children[op.tree + indexShift].diffTo(otherTree.children[op.otherTree]);
                        if (!last ||
                            (last.nextSibling === this.children[op.tree + indexShift].dom &&
                                re.last)) {
                            ;
                            ({ last } = re);
                            if (re.possibleReplace) {
                                lastElmInserted = re.possibleReplace.cur;
                                lastElmDeleted = re.possibleReplace.prev;
                            }
                            lastOp = op;
                        }
                        inserted.push(...re.inserted);
                    }
                }
            }
            else {
                console.debug(operations);
                throw new Error('invalid operations');
            }
        }
        if (lastOp && lastOp.type !== 'i' && lastElmInserted && lastElmDeleted) {
            possibleReplace = {
                cur: lastElmInserted,
                prev: lastElmDeleted,
            };
        }
        return {
            last,
            inserted,
            possibleReplace,
        };
    }
    removeSelf() {
        hashTo[this.hash] = undefined;
        this.children &&
            this.children.forEach((c) => {
                c.removeSelf();
            });
    }
    insert(i, tree, rep) {
        const dom = tree.dom.cloneNode(true);
        if (i === this.dom.childNodes.length) {
            this.dom.appendChild(dom);
        }
        else {
            this.dom.insertBefore(dom, this.dom.childNodes[i]);
        }
        const ctree = new WrappedDomTree(dom, false, rep);
        this.children.splice(i, 0, ctree);
        return this.dom.childNodes[i];
    }
    remove(i) {
        this.dom.removeChild(this.dom.childNodes[i]);
        this.children[i].removeSelf();
        this.children.splice(i, 1);
        return this.dom.childNodes[i - 1];
    }
    diff(otherTree, tmax) {
        if (this.equalTo(otherTree)) {
            return { score: 0, operations: undefined };
        }
        if (this.cannotReplaceWith(otherTree)) {
            return { score: 1 / 0, operations: undefined };
        }
        const key = otherTree.hash;
        if (Object.keys(this.diffHash).includes(key.toString())) {
            return this.diffHash[key];
        }
        if (tmax === undefined) {
            tmax = 100000;
        }
        if (tmax <= 0) {
            return { score: 0 };
        }
        let offset = 0;
        const forwardSearch = (offset) => offset < this.children.length &&
            offset < otherTree.children.length &&
            this.children[offset].equalTo(otherTree.children[offset]);
        while (forwardSearch(offset)) {
            offset++;
        }
        const dp = new two_dim_array_1.TwoDimArray(this.children.length + 1 - offset, otherTree.children.length + 1 - offset);
        const p = new two_dim_array_1.TwoDimArray(this.children.length + 1 - offset, otherTree.children.length + 1 - offset);
        dp.set(0, 0, 0);
        let sum = 0;
        for (let i = 1; i + offset < otherTree.children.length; i++) {
            dp.set(0, i, sum);
            p.set(0, i, i - 1);
            sum += otherTree.children[i + offset].size;
        }
        if (otherTree.children.length - offset > 0) {
            const i = otherTree.children.length - offset;
            dp.set(0, i, sum);
            p.set(0, i, i - 1);
        }
        sum = 0;
        for (let i = 1; i + offset < this.children.length; i++) {
            dp.set(i, 0, sum);
            p.set(i, 0, (i - 1) * p.col);
            sum += this.children[i + offset].size;
        }
        if (this.children.length - offset > 0) {
            const i = this.children.length - offset;
            dp.set(i, 0, sum);
            p.set(i, 0, (i - 1) * p.col);
        }
        const getScore = (i, j, max) => {
            const res = dp.get(i, j);
            if (res !== undefined) {
                return res;
            }
            if (max === undefined) {
                max = 1 / 0;
            }
            if (max <= 0) {
                return 1 / 0;
            }
            let val = max;
            const bound = max;
            const subdiff = this.children[i - 1 + offset].diff(otherTree.children[j - 1 + offset], bound).score;
            let force = false;
            if (subdiff < bound &&
                subdiff + 1 <
                    this.children[i - 1 + offset].size +
                        otherTree.children[j - 1 + offset].size) {
                force = true;
            }
            val = getScore(i - 1, j - 1, bound - subdiff) + subdiff;
            let prev = p.getInd(i - 1, j - 1);
            if (!force) {
                let other = getScore(i - 1, j, Math.min(val, max) - this.children[i - 1 + offset].size) + this.children[i - 1 + offset].size;
                if (other < val) {
                    prev = p.getInd(i - 1, j);
                    val = other;
                }
                other =
                    getScore(i, j - 1, Math.min(val, max) - otherTree.children[j - 1 + offset].size) + otherTree.children[j - 1 + offset].size;
                if (other < val) {
                    prev = p.getInd(i, j - 1);
                    val = other;
                }
            }
            if (val >= max) {
                val = 1 / 0;
            }
            dp.set(i, j, val);
            p.set(i, j, prev);
            return val;
        };
        const score = getScore(this.children.length - offset, otherTree.children.length - offset, tmax);
        const operations = [];
        let cur = p.getInd(this.children.length - offset, otherTree.children.length - offset);
        let cr = this.children.length - 1 - offset;
        let cc = otherTree.children.length - 1 - offset;
        while (p.rawGet(cur) !== undefined) {
            const prev = p.rawGet(cur);
            const rc = p.get2DInd(prev);
            const pr = rc.r - 1;
            const pc = rc.c - 1;
            if (pr === cr) {
                operations.unshift({
                    type: 'i',
                    otherTree: cc + offset,
                    pos: cr + 1 + offset,
                });
            }
            else if (pc === cc) {
                operations.unshift({
                    type: 'd',
                    tree: cr + offset,
                });
            }
            else {
                const op = this.children[cr + offset].diff(otherTree.children[cc + offset]).operations;
                if (op && op.length) {
                    operations.unshift({
                        type: 'r',
                        tree: cr + offset,
                        otherTree: cc + offset,
                    });
                }
            }
            cur = prev;
            cr = pr;
            cc = pc;
        }
        this.diffHash[key] = {
            score,
            operations,
        };
        return this.diffHash[key];
    }
    equalTo(otherTree) {
        return this.dom.isEqualNode(otherTree.dom);
    }
    cannotReplaceWith(otherTree) {
        return (this.isText ||
            otherTree.isText ||
            this.tagName !== otherTree.tagName ||
            this.className !== otherTree.className ||
            this.style !== otherTree.style ||
            this.className === 'math' ||
            this.className === 'atom-text-editor' ||
            this.tagName === 'A' ||
            (this.tagName === 'IMG' && !this.dom.isEqualNode(otherTree.dom)));
    }
}
exports.WrappedDomTree = WrappedDomTree;
//# sourceMappingURL=data:application/json;base64,