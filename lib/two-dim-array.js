"use strict";
let TwoDimArray;
module.exports = (TwoDimArray = class TwoDimArray {
    constructor(rows, cols) {
        this._arr = new Array(rows * cols);
        this.row = rows;
        this.col = cols;
    }
    getInd(row, col) {
        return (row * this.col) + col;
    }
    get2DInd(ind) {
        return {
            r: (ind / this.col) | 0,
            c: ind % this.col
        };
    }
    get(row, col) {
        return this._arr[this.getInd(row, col)];
    }
    set(row, col, val) {
        this._arr[(row * this.col) + col] = val;
    }
    rawGet(ind) {
        return this._arr[ind];
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHdvLWRpbS1hcnJheS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy90d28tZGltLWFycmF5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUE0QkEsSUFBSSxXQUFXLENBQUM7QUFDaEIsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLFdBQVcsR0FBRztJQUM5QixZQUFZLElBQUksRUFBRSxJQUFJO1FBQ3BCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxHQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUc7UUFDYixNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUM5QixDQUFDO0lBRUQsUUFBUSxDQUFDLEdBQUc7UUFDVixNQUFNLENBQUM7WUFDTCxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7WUFDckIsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRztTQUNsQixDQUFDO0lBQ0osQ0FBQztJQUVELEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRztRQUNWLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7UUFDZixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDeEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFHO1FBQ1IsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDeEIsQ0FBQztDQUNGLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBkZWNhZmZlaW5hdGUgc3VnZ2VzdGlvbnM6XG4gKiBEUzEwMjogUmVtb3ZlIHVubmVjZXNzYXJ5IGNvZGUgY3JlYXRlZCBiZWNhdXNlIG9mIGltcGxpY2l0IHJldHVybnNcbiAqIEZ1bGwgZG9jczogaHR0cHM6Ly9naXRodWIuY29tL2RlY2FmZmVpbmF0ZS9kZWNhZmZlaW5hdGUvYmxvYi9tYXN0ZXIvZG9jcy9zdWdnZXN0aW9ucy5tZFxuICovXG4vLyBUaGlzIGZpbGUgaW5jb3Jwb3JhdGVzIGNvZGUgZnJvbSBbbWFya21vbl0oaHR0cHM6Ly9naXRodWIuY29tL3l5amhhby9tYXJrbW9uKVxuLy8gY292ZXJlZCBieSB0aGUgZm9sbG93aW5nIHRlcm1zOlxuLy9cbi8vIENvcHlyaWdodCAoYykgMjAxNCwgWWFvIFl1amlhbiwgaHR0cDovL3lqeWFvLmNvbVxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmxldCBUd29EaW1BcnJheTtcbm1vZHVsZS5leHBvcnRzID0gKFR3b0RpbUFycmF5ID0gY2xhc3MgVHdvRGltQXJyYXkge1xuICBjb25zdHJ1Y3Rvcihyb3dzLCBjb2xzKSB7XG4gICAgdGhpcy5fYXJyID0gbmV3IEFycmF5KHJvd3MqY29scyk7XG4gICAgdGhpcy5yb3cgPSByb3dzO1xuICAgIHRoaXMuY29sID0gY29scztcbiAgfVxuXG4gIGdldEluZChyb3csIGNvbCkge1xuICAgIHJldHVybiAocm93KnRoaXMuY29sKSArIGNvbDtcbiAgfVxuXG4gIGdldDJESW5kKGluZCkge1xuICAgIHJldHVybiB7XG4gICAgICByOiAoaW5kL3RoaXMuY29sKSB8IDAsXG4gICAgICBjOiBpbmQgJSB0aGlzLmNvbFxuICAgIH07XG4gIH1cblxuICBnZXQocm93LCBjb2wpIHtcbiAgICByZXR1cm4gdGhpcy5fYXJyW3RoaXMuZ2V0SW5kKHJvdywgY29sKV07XG4gIH1cblxuICBzZXQocm93LCBjb2wsIHZhbCkge1xuICAgIHRoaXMuX2Fyclsocm93KnRoaXMuY29sKSArIGNvbF0gPSB2YWw7XG4gIH1cblxuICByYXdHZXQoaW5kKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FycltpbmRdO1xuICB9XG59KTtcbiJdfQ==