"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const markdownItModule = require("markdown-it");
let markdownIt = null;
let markdownItOptions = null;
let renderLaTeX = null;
let math = null;
let lazyHeaders = null;
const mathInline = (text) => `<span class='math'><script type='math/tex'>${text}</script></span>`;
const mathBlock = (text) => `<span class='math'><script type='math/tex; mode=display'>${text}</script></span>`;
const mathDollars = {
    inlineOpen: '$',
    inlineClose: '$',
    blockOpen: '$$',
    blockClose: '$$',
    inlineRenderer: mathInline,
    blockRenderer: mathBlock,
};
const mathBrackets = {
    inlineOpen: '\\(',
    inlineClose: '\\)',
    blockOpen: '\\[',
    blockClose: '\\]',
    inlineRenderer: mathInline,
    blockRenderer: mathBlock,
};
const getOptions = () => ({
    html: true,
    xhtmlOut: false,
    breaks: atom.config.get('markdown-preview-plus.breakOnSingleNewline'),
    langPrefix: 'lang-',
    linkify: true,
    typographer: true,
});
const init = function (rL) {
    renderLaTeX = rL;
    markdownItOptions = getOptions();
    markdownIt = markdownItModule(markdownItOptions);
    if (renderLaTeX) {
        if (math == null) {
            math = require('markdown-it-math');
        }
        markdownIt.use(math, mathDollars);
        markdownIt.use(math, mathBrackets);
    }
    lazyHeaders = atom.config.get('markdown-preview-plus.useLazyHeaders');
    if (lazyHeaders) {
        markdownIt.use(require('markdown-it-lazy-headers'));
    }
};
const needsInit = (rL) => markdownIt === null ||
    markdownItOptions === null ||
    markdownItOptions.breaks !==
        atom.config.get('markdown-preview-plus.breakOnSingleNewline') ||
    lazyHeaders !== atom.config.get('markdown-preview-plus.useLazyHeaders') ||
    rL !== renderLaTeX;
function render(text, rL) {
    if (needsInit(rL)) {
        init(rL);
    }
    return markdownIt.render(text);
}
exports.render = render;
function decode(url) {
    if (!markdownIt)
        throw new Error('markdownIt not initialized');
    return markdownIt.normalizeLinkText(url);
}
exports.decode = decode;
function getTokens(text, rL) {
    if (needsInit(rL)) {
        init(rL);
    }
    return markdownIt.parse(text, {});
}
exports.getTokens = getTokens;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Rvd24taXQtaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL21hcmtkb3duLWl0LWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGdEQUFnRDtBQUNoRCxJQUFJLFVBQVUsR0FBdUMsSUFBSSxDQUFBO0FBQ3pELElBQUksaUJBQWlCLEdBQW9DLElBQUksQ0FBQTtBQUM3RCxJQUFJLFdBQVcsR0FBbUIsSUFBSSxDQUFBO0FBQ3RDLElBQUksSUFBSSxHQUFRLElBQUksQ0FBQTtBQUNwQixJQUFJLFdBQVcsR0FBUSxJQUFJLENBQUE7QUFFM0IsTUFBTSxVQUFVLEdBQUcsQ0FBQyxJQUFZLEVBQUUsRUFBRSxDQUNsQyw4Q0FBOEMsSUFBSSxrQkFBa0IsQ0FBQTtBQUN0RSxNQUFNLFNBQVMsR0FBRyxDQUFDLElBQVksRUFBRSxFQUFFLENBQ2pDLDREQUE0RCxJQUFJLGtCQUFrQixDQUFBO0FBRXBGLE1BQU0sV0FBVyxHQUFHO0lBQ2xCLFVBQVUsRUFBRSxHQUFHO0lBQ2YsV0FBVyxFQUFFLEdBQUc7SUFDaEIsU0FBUyxFQUFFLElBQUk7SUFDZixVQUFVLEVBQUUsSUFBSTtJQUNoQixjQUFjLEVBQUUsVUFBVTtJQUMxQixhQUFhLEVBQUUsU0FBUztDQUN6QixDQUFBO0FBRUQsTUFBTSxZQUFZLEdBQUc7SUFDbkIsVUFBVSxFQUFFLEtBQUs7SUFDakIsV0FBVyxFQUFFLEtBQUs7SUFDbEIsU0FBUyxFQUFFLEtBQUs7SUFDaEIsVUFBVSxFQUFFLEtBQUs7SUFDakIsY0FBYyxFQUFFLFVBQVU7SUFDMUIsYUFBYSxFQUFFLFNBQVM7Q0FDekIsQ0FBQTtBQUVELE1BQU0sVUFBVSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDeEIsSUFBSSxFQUFFLElBQUk7SUFDVixRQUFRLEVBQUUsS0FBSztJQUNmLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyw0Q0FBNEMsQ0FBQztJQUNyRSxVQUFVLEVBQUUsT0FBTztJQUNuQixPQUFPLEVBQUUsSUFBSTtJQUNiLFdBQVcsRUFBRSxJQUFJO0NBQ2xCLENBQUMsQ0FBQTtBQUVGLE1BQU0sSUFBSSxHQUFHLFVBQVMsRUFBVztJQUMvQixXQUFXLEdBQUcsRUFBRSxDQUFBO0lBRWhCLGlCQUFpQixHQUFHLFVBQVUsRUFBRSxDQUFBO0lBRWhDLFVBQVUsR0FBRyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO0lBRWhELEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDaEIsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDakIsSUFBSSxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO1FBQ3BDLENBQUM7UUFDRCxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQTtRQUNqQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQTtJQUNwQyxDQUFDO0lBRUQsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxDQUFDLENBQUE7SUFFckUsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUNoQixVQUFVLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQUE7SUFDckQsQ0FBQztBQUNILENBQUMsQ0FBQTtBQUVELE1BQU0sU0FBUyxHQUFHLENBQUMsRUFBVyxFQUFFLEVBQUUsQ0FDaEMsVUFBVSxLQUFLLElBQUk7SUFDbkIsaUJBQWlCLEtBQUssSUFBSTtJQUMxQixpQkFBaUIsQ0FBQyxNQUFNO1FBQ3RCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLDRDQUE0QyxDQUFDO0lBQy9ELFdBQVcsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxzQ0FBc0MsQ0FBQztJQUN2RSxFQUFFLEtBQUssV0FBVyxDQUFBO0FBRXBCLGdCQUF1QixJQUFZLEVBQUUsRUFBVztJQUM5QyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUNWLENBQUM7SUFDRCxNQUFNLENBQUMsVUFBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNqQyxDQUFDO0FBTEQsd0JBS0M7QUFFRCxnQkFBdUIsR0FBVztJQUNoQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztRQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQTtJQUM5RCxNQUFNLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQzFDLENBQUM7QUFIRCx3QkFHQztBQUVELG1CQUEwQixJQUFZLEVBQUUsRUFBVztJQUNqRCxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUNWLENBQUM7SUFDRCxNQUFNLENBQUMsVUFBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUE7QUFDcEMsQ0FBQztBQUxELDhCQUtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1hcmtkb3duSXRNb2R1bGUgPSByZXF1aXJlKCdtYXJrZG93bi1pdCcpXG5sZXQgbWFya2Rvd25JdDogbWFya2Rvd25JdE1vZHVsZS5NYXJrZG93bkl0IHwgbnVsbCA9IG51bGxcbmxldCBtYXJrZG93bkl0T3B0aW9uczogbWFya2Rvd25JdE1vZHVsZS5PcHRpb25zIHwgbnVsbCA9IG51bGxcbmxldCByZW5kZXJMYVRlWDogYm9vbGVhbiB8IG51bGwgPSBudWxsXG5sZXQgbWF0aDogYW55ID0gbnVsbFxubGV0IGxhenlIZWFkZXJzOiBhbnkgPSBudWxsXG5cbmNvbnN0IG1hdGhJbmxpbmUgPSAodGV4dDogc3RyaW5nKSA9PlxuICBgPHNwYW4gY2xhc3M9J21hdGgnPjxzY3JpcHQgdHlwZT0nbWF0aC90ZXgnPiR7dGV4dH08L3NjcmlwdD48L3NwYW4+YFxuY29uc3QgbWF0aEJsb2NrID0gKHRleHQ6IHN0cmluZykgPT5cbiAgYDxzcGFuIGNsYXNzPSdtYXRoJz48c2NyaXB0IHR5cGU9J21hdGgvdGV4OyBtb2RlPWRpc3BsYXknPiR7dGV4dH08L3NjcmlwdD48L3NwYW4+YFxuXG5jb25zdCBtYXRoRG9sbGFycyA9IHtcbiAgaW5saW5lT3BlbjogJyQnLFxuICBpbmxpbmVDbG9zZTogJyQnLFxuICBibG9ja09wZW46ICckJCcsXG4gIGJsb2NrQ2xvc2U6ICckJCcsXG4gIGlubGluZVJlbmRlcmVyOiBtYXRoSW5saW5lLFxuICBibG9ja1JlbmRlcmVyOiBtYXRoQmxvY2ssXG59XG5cbmNvbnN0IG1hdGhCcmFja2V0cyA9IHtcbiAgaW5saW5lT3BlbjogJ1xcXFwoJyxcbiAgaW5saW5lQ2xvc2U6ICdcXFxcKScsXG4gIGJsb2NrT3BlbjogJ1xcXFxbJyxcbiAgYmxvY2tDbG9zZTogJ1xcXFxdJyxcbiAgaW5saW5lUmVuZGVyZXI6IG1hdGhJbmxpbmUsXG4gIGJsb2NrUmVuZGVyZXI6IG1hdGhCbG9jayxcbn1cblxuY29uc3QgZ2V0T3B0aW9ucyA9ICgpID0+ICh7XG4gIGh0bWw6IHRydWUsXG4gIHhodG1sT3V0OiBmYWxzZSxcbiAgYnJlYWtzOiBhdG9tLmNvbmZpZy5nZXQoJ21hcmtkb3duLXByZXZpZXctcGx1cy5icmVha09uU2luZ2xlTmV3bGluZScpLFxuICBsYW5nUHJlZml4OiAnbGFuZy0nLFxuICBsaW5raWZ5OiB0cnVlLFxuICB0eXBvZ3JhcGhlcjogdHJ1ZSxcbn0pXG5cbmNvbnN0IGluaXQgPSBmdW5jdGlvbihyTDogYm9vbGVhbikge1xuICByZW5kZXJMYVRlWCA9IHJMXG5cbiAgbWFya2Rvd25JdE9wdGlvbnMgPSBnZXRPcHRpb25zKClcblxuICBtYXJrZG93bkl0ID0gbWFya2Rvd25JdE1vZHVsZShtYXJrZG93bkl0T3B0aW9ucylcblxuICBpZiAocmVuZGVyTGFUZVgpIHtcbiAgICBpZiAobWF0aCA9PSBudWxsKSB7XG4gICAgICBtYXRoID0gcmVxdWlyZSgnbWFya2Rvd24taXQtbWF0aCcpXG4gICAgfVxuICAgIG1hcmtkb3duSXQudXNlKG1hdGgsIG1hdGhEb2xsYXJzKVxuICAgIG1hcmtkb3duSXQudXNlKG1hdGgsIG1hdGhCcmFja2V0cylcbiAgfVxuXG4gIGxhenlIZWFkZXJzID0gYXRvbS5jb25maWcuZ2V0KCdtYXJrZG93bi1wcmV2aWV3LXBsdXMudXNlTGF6eUhlYWRlcnMnKVxuXG4gIGlmIChsYXp5SGVhZGVycykge1xuICAgIG1hcmtkb3duSXQudXNlKHJlcXVpcmUoJ21hcmtkb3duLWl0LWxhenktaGVhZGVycycpKVxuICB9XG59XG5cbmNvbnN0IG5lZWRzSW5pdCA9IChyTDogYm9vbGVhbikgPT5cbiAgbWFya2Rvd25JdCA9PT0gbnVsbCB8fFxuICBtYXJrZG93bkl0T3B0aW9ucyA9PT0gbnVsbCB8fFxuICBtYXJrZG93bkl0T3B0aW9ucy5icmVha3MgIT09XG4gICAgYXRvbS5jb25maWcuZ2V0KCdtYXJrZG93bi1wcmV2aWV3LXBsdXMuYnJlYWtPblNpbmdsZU5ld2xpbmUnKSB8fFxuICBsYXp5SGVhZGVycyAhPT0gYXRvbS5jb25maWcuZ2V0KCdtYXJrZG93bi1wcmV2aWV3LXBsdXMudXNlTGF6eUhlYWRlcnMnKSB8fFxuICByTCAhPT0gcmVuZGVyTGFUZVhcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcih0ZXh0OiBzdHJpbmcsIHJMOiBib29sZWFuKSB7XG4gIGlmIChuZWVkc0luaXQockwpKSB7XG4gICAgaW5pdChyTClcbiAgfVxuICByZXR1cm4gbWFya2Rvd25JdCEucmVuZGVyKHRleHQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUodXJsOiBzdHJpbmcpIHtcbiAgaWYgKCFtYXJrZG93bkl0KSB0aHJvdyBuZXcgRXJyb3IoJ21hcmtkb3duSXQgbm90IGluaXRpYWxpemVkJylcbiAgcmV0dXJuIG1hcmtkb3duSXQubm9ybWFsaXplTGlua1RleHQodXJsKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9rZW5zKHRleHQ6IHN0cmluZywgckw6IGJvb2xlYW4pIHtcbiAgaWYgKG5lZWRzSW5pdChyTCkpIHtcbiAgICBpbml0KHJMKVxuICB9XG4gIHJldHVybiBtYXJrZG93bkl0IS5wYXJzZSh0ZXh0LCB7fSlcbn1cbiJdfQ==