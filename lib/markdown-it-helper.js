"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const markdownItModule = require("markdown-it");
let markdownIt = null;
let markdownItOptions = null;
let renderLaTeX = null;
let math = null;
let lazyHeaders = null;
const mathInline = (text) => `<span class='math'><script type='math/tex'>${text}</script></span>`;
const mathBlock = (text) => `<span class='math'><script type='math/tex; mode=display'>${text}</script></span>`;
const mathDollars = {
    inlineOpen: '$',
    inlineClose: '$',
    blockOpen: '$$',
    blockClose: '$$',
    inlineRenderer: mathInline,
    blockRenderer: mathBlock
};
const mathBrackets = {
    inlineOpen: '\\(',
    inlineClose: '\\)',
    blockOpen: '\\[',
    blockClose: '\\]',
    inlineRenderer: mathInline,
    blockRenderer: mathBlock
};
const getOptions = () => ({
    html: true,
    xhtmlOut: false,
    breaks: atom.config.get('markdown-preview-plus.breakOnSingleNewline'),
    langPrefix: 'lang-',
    linkify: true,
    typographer: true
});
const init = function (rL) {
    renderLaTeX = rL;
    markdownItOptions = getOptions();
    markdownIt = markdownItModule(markdownItOptions);
    if (renderLaTeX) {
        if (math == null) {
            math = require('markdown-it-math');
        }
        markdownIt.use(math, mathDollars);
        markdownIt.use(math, mathBrackets);
    }
    lazyHeaders = atom.config.get('markdown-preview-plus.useLazyHeaders');
    if (lazyHeaders) {
        markdownIt.use(require('markdown-it-lazy-headers'));
    }
};
const needsInit = (rL) => (markdownIt == null) ||
    (markdownItOptions == null) ||
    (markdownItOptions.breaks !== atom.config.get('markdown-preview-plus.breakOnSingleNewline')) ||
    (lazyHeaders !== atom.config.get('markdown-preview-plus.useLazyHeaders')) ||
    (rL !== renderLaTeX);
function render(text, rL) {
    if (needsInit(rL)) {
        init(rL);
    }
    return markdownIt.render(text);
}
exports.render = render;
;
function decode(url) {
    return markdownIt.normalizeLinkText(url);
}
exports.decode = decode;
function getTokens(text, rL) {
    if (needsInit(rL)) {
        init(rL);
    }
    return markdownIt.parse(text, {});
}
exports.getTokens = getTokens;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Rvd24taXQtaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL21hcmtkb3duLWl0LWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGdEQUFnRDtBQUNoRCxJQUFJLFVBQVUsR0FBdUMsSUFBSSxDQUFDO0FBQzFELElBQUksaUJBQWlCLEdBQW9DLElBQUksQ0FBQztBQUM5RCxJQUFJLFdBQVcsR0FBbUIsSUFBSSxDQUFDO0FBQ3ZDLElBQUksSUFBSSxHQUFRLElBQUksQ0FBQztBQUNyQixJQUFJLFdBQVcsR0FBUSxJQUFJLENBQUM7QUFFNUIsTUFBTSxVQUFVLEdBQUcsQ0FBQyxJQUFZLEVBQUUsRUFBRSxDQUFDLDhDQUE4QyxJQUFJLGtCQUFrQixDQUFDO0FBQzFHLE1BQU0sU0FBUyxHQUFHLENBQUMsSUFBWSxFQUFFLEVBQUUsQ0FBQyw0REFBNEQsSUFBSSxrQkFBa0IsQ0FBQztBQUV2SCxNQUFNLFdBQVcsR0FBRztJQUNsQixVQUFVLEVBQUUsR0FBRztJQUNmLFdBQVcsRUFBRSxHQUFHO0lBQ2hCLFNBQVMsRUFBRSxJQUFJO0lBQ2YsVUFBVSxFQUFFLElBQUk7SUFDaEIsY0FBYyxFQUFFLFVBQVU7SUFDMUIsYUFBYSxFQUFFLFNBQVM7Q0FDekIsQ0FBQztBQUVGLE1BQU0sWUFBWSxHQUFHO0lBQ25CLFVBQVUsRUFBRSxLQUFLO0lBQ2pCLFdBQVcsRUFBRSxLQUFLO0lBQ2xCLFNBQVMsRUFBRSxLQUFLO0lBQ2hCLFVBQVUsRUFBRSxLQUFLO0lBQ2pCLGNBQWMsRUFBRSxVQUFVO0lBQzFCLGFBQWEsRUFBRSxTQUFTO0NBQ3pCLENBQUM7QUFFRixNQUFNLFVBQVUsR0FBRyxHQUFHLEVBQUUsQ0FDdEIsQ0FBQztJQUNDLElBQUksRUFBRSxJQUFJO0lBQ1YsUUFBUSxFQUFFLEtBQUs7SUFDZixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsNENBQTRDLENBQUM7SUFDckUsVUFBVSxFQUFFLE9BQU87SUFDbkIsT0FBTyxFQUFFLElBQUk7SUFDYixXQUFXLEVBQUUsSUFBSTtDQUNsQixDQUFDLENBQ0g7QUFHRCxNQUFNLElBQUksR0FBRyxVQUFTLEVBQVc7SUFFL0IsV0FBVyxHQUFHLEVBQUUsQ0FBQztJQUVqQixpQkFBaUIsR0FBRyxVQUFVLEVBQUUsQ0FBQztJQUVqQyxVQUFVLEdBQUcsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUVqRCxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ2hCLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQUMsQ0FBQztRQUN6RCxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNsQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7SUFFdEUsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUNoQixVQUFVLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztBQUNILENBQUMsQ0FBQztBQUdGLE1BQU0sU0FBUyxHQUFHLENBQUMsRUFBVyxFQUFFLEVBQUUsQ0FDaEMsQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDO0lBQ3BCLENBQUMsaUJBQWlCLElBQUksSUFBSSxDQUFDO0lBQzNCLENBQUMsaUJBQWlCLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7SUFDNUYsQ0FBQyxXQUFXLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsc0NBQXNDLENBQUMsQ0FBQztJQUN6RSxDQUFDLEVBQUUsS0FBSyxXQUFXLENBQUMsQ0FDckI7QUFFRCxnQkFBdUIsSUFBWSxFQUFFLEVBQVc7SUFDOUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUFDLENBQUM7SUFDaEMsTUFBTSxDQUFDLFVBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEMsQ0FBQztBQUhELHdCQUdDO0FBQUEsQ0FBQztBQUVGLGdCQUF1QixHQUFXO0lBQ2hDLE1BQU0sQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDM0MsQ0FBQztBQUZELHdCQUVDO0FBRUQsbUJBQTBCLElBQVksRUFBRSxFQUFXO0lBQ2pELEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFBQyxDQUFDO0lBQ2hDLE1BQU0sQ0FBQyxVQUFXLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNyQyxDQUFDO0FBSEQsOEJBR0M7QUFBQSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1hcmtkb3duSXRNb2R1bGUgPSByZXF1aXJlKCdtYXJrZG93bi1pdCcpXG5sZXQgbWFya2Rvd25JdDogbWFya2Rvd25JdE1vZHVsZS5NYXJrZG93bkl0IHwgbnVsbCA9IG51bGw7XG5sZXQgbWFya2Rvd25JdE9wdGlvbnM6IG1hcmtkb3duSXRNb2R1bGUuT3B0aW9ucyB8IG51bGwgPSBudWxsO1xubGV0IHJlbmRlckxhVGVYOiBib29sZWFuIHwgbnVsbCA9IG51bGw7XG5sZXQgbWF0aDogYW55ID0gbnVsbDtcbmxldCBsYXp5SGVhZGVyczogYW55ID0gbnVsbDtcblxuY29uc3QgbWF0aElubGluZSA9ICh0ZXh0OiBzdHJpbmcpID0+IGA8c3BhbiBjbGFzcz0nbWF0aCc+PHNjcmlwdCB0eXBlPSdtYXRoL3RleCc+JHt0ZXh0fTwvc2NyaXB0Pjwvc3Bhbj5gO1xuY29uc3QgbWF0aEJsb2NrID0gKHRleHQ6IHN0cmluZykgPT4gYDxzcGFuIGNsYXNzPSdtYXRoJz48c2NyaXB0IHR5cGU9J21hdGgvdGV4OyBtb2RlPWRpc3BsYXknPiR7dGV4dH08L3NjcmlwdD48L3NwYW4+YDtcblxuY29uc3QgbWF0aERvbGxhcnMgPSB7XG4gIGlubGluZU9wZW46ICckJyxcbiAgaW5saW5lQ2xvc2U6ICckJyxcbiAgYmxvY2tPcGVuOiAnJCQnLFxuICBibG9ja0Nsb3NlOiAnJCQnLFxuICBpbmxpbmVSZW5kZXJlcjogbWF0aElubGluZSxcbiAgYmxvY2tSZW5kZXJlcjogbWF0aEJsb2NrXG59O1xuXG5jb25zdCBtYXRoQnJhY2tldHMgPSB7XG4gIGlubGluZU9wZW46ICdcXFxcKCcsXG4gIGlubGluZUNsb3NlOiAnXFxcXCknLFxuICBibG9ja09wZW46ICdcXFxcWycsXG4gIGJsb2NrQ2xvc2U6ICdcXFxcXScsXG4gIGlubGluZVJlbmRlcmVyOiBtYXRoSW5saW5lLFxuICBibG9ja1JlbmRlcmVyOiBtYXRoQmxvY2tcbn07XG5cbmNvbnN0IGdldE9wdGlvbnMgPSAoKSA9PlxuICAoe1xuICAgIGh0bWw6IHRydWUsXG4gICAgeGh0bWxPdXQ6IGZhbHNlLFxuICAgIGJyZWFrczogYXRvbS5jb25maWcuZ2V0KCdtYXJrZG93bi1wcmV2aWV3LXBsdXMuYnJlYWtPblNpbmdsZU5ld2xpbmUnKSxcbiAgICBsYW5nUHJlZml4OiAnbGFuZy0nLFxuICAgIGxpbmtpZnk6IHRydWUsXG4gICAgdHlwb2dyYXBoZXI6IHRydWVcbiAgfSlcbjtcblxuXG5jb25zdCBpbml0ID0gZnVuY3Rpb24ockw6IGJvb2xlYW4pIHtcblxuICByZW5kZXJMYVRlWCA9IHJMO1xuXG4gIG1hcmtkb3duSXRPcHRpb25zID0gZ2V0T3B0aW9ucygpO1xuXG4gIG1hcmtkb3duSXQgPSBtYXJrZG93bkl0TW9kdWxlKG1hcmtkb3duSXRPcHRpb25zKTtcblxuICBpZiAocmVuZGVyTGFUZVgpIHtcbiAgICBpZiAobWF0aCA9PSBudWxsKSB7IG1hdGggPSByZXF1aXJlKCdtYXJrZG93bi1pdC1tYXRoJyk7IH1cbiAgICBtYXJrZG93bkl0LnVzZShtYXRoLCBtYXRoRG9sbGFycyk7XG4gICAgbWFya2Rvd25JdC51c2UobWF0aCwgbWF0aEJyYWNrZXRzKTtcbiAgfVxuXG4gIGxhenlIZWFkZXJzID0gYXRvbS5jb25maWcuZ2V0KCdtYXJrZG93bi1wcmV2aWV3LXBsdXMudXNlTGF6eUhlYWRlcnMnKTtcblxuICBpZiAobGF6eUhlYWRlcnMpIHtcbiAgICBtYXJrZG93bkl0LnVzZShyZXF1aXJlKCdtYXJrZG93bi1pdC1sYXp5LWhlYWRlcnMnKSk7XG4gIH1cbn07XG5cblxuY29uc3QgbmVlZHNJbml0ID0gKHJMOiBib29sZWFuKSA9PlxuICAobWFya2Rvd25JdCA9PSBudWxsKSB8fFxuICAobWFya2Rvd25JdE9wdGlvbnMgPT0gbnVsbCkgfHxcbiAgKG1hcmtkb3duSXRPcHRpb25zLmJyZWFrcyAhPT0gYXRvbS5jb25maWcuZ2V0KCdtYXJrZG93bi1wcmV2aWV3LXBsdXMuYnJlYWtPblNpbmdsZU5ld2xpbmUnKSkgfHxcbiAgKGxhenlIZWFkZXJzICE9PSBhdG9tLmNvbmZpZy5nZXQoJ21hcmtkb3duLXByZXZpZXctcGx1cy51c2VMYXp5SGVhZGVycycpKSB8fFxuICAockwgIT09IHJlbmRlckxhVGVYKVxuO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyKHRleHQ6IHN0cmluZywgckw6IGJvb2xlYW4pIHtcbiAgaWYgKG5lZWRzSW5pdChyTCkpIHsgaW5pdChyTCk7IH1cbiAgcmV0dXJuIG1hcmtkb3duSXQhLnJlbmRlcih0ZXh0KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUodXJsOiBzdHJpbmcpe1xuICByZXR1cm4gbWFya2Rvd25JdC5ub3JtYWxpemVMaW5rVGV4dCh1cmwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9rZW5zKHRleHQ6IHN0cmluZywgckw6IGJvb2xlYW4pIHtcbiAgaWYgKG5lZWRzSW5pdChyTCkpIHsgaW5pdChyTCk7IH1cbiAgcmV0dXJuIG1hcmtkb3duSXQhLnBhcnNlKHRleHQsIHt9KTtcbn07XG4iXX0=