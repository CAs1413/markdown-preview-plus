"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const markdownItModule = require("markdown-it");
let markdownIt = null;
let markdownItOptions = null;
let renderLaTeX = null;
let math = null;
let lazyHeaders = null;
const mathInline = (text) => `<span class='math'><script type='math/tex'>${text}</script></span>`;
const mathBlock = (text) => `<span class='math'><script type='math/tex; mode=display'>${text}</script></span>`;
const mathDollars = {
    inlineOpen: "$",
    inlineClose: "$",
    blockOpen: "$$",
    blockClose: "$$",
    inlineRenderer: mathInline,
    blockRenderer: mathBlock
};
const mathBrackets = {
    inlineOpen: "\\(",
    inlineClose: "\\)",
    blockOpen: "\\[",
    blockClose: "\\]",
    inlineRenderer: mathInline,
    blockRenderer: mathBlock
};
const getOptions = () => ({
    html: true,
    xhtmlOut: false,
    breaks: atom.config.get("markdown-preview-plus.breakOnSingleNewline"),
    langPrefix: "lang-",
    linkify: true,
    typographer: true
});
const init = function (rL) {
    renderLaTeX = rL;
    markdownItOptions = getOptions();
    markdownIt = markdownItModule(markdownItOptions);
    if (renderLaTeX) {
        if (math == null) {
            math = require("markdown-it-math");
        }
        markdownIt.use(math, mathDollars);
        markdownIt.use(math, mathBrackets);
    }
    lazyHeaders = atom.config.get("markdown-preview-plus.useLazyHeaders");
    if (lazyHeaders) {
        markdownIt.use(require("markdown-it-lazy-headers"));
    }
};
const needsInit = (rL) => markdownIt == null ||
    markdownItOptions == null ||
    markdownItOptions.breaks !==
        atom.config.get("markdown-preview-plus.breakOnSingleNewline") ||
    lazyHeaders !== atom.config.get("markdown-preview-plus.useLazyHeaders") ||
    rL !== renderLaTeX;
function render(text, rL) {
    if (needsInit(rL)) {
        init(rL);
    }
    return markdownIt.render(text);
}
exports.render = render;
function decode(url) {
    return markdownIt.normalizeLinkText(url);
}
exports.decode = decode;
function getTokens(text, rL) {
    if (needsInit(rL)) {
        init(rL);
    }
    return markdownIt.parse(text, {});
}
exports.getTokens = getTokens;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Rvd24taXQtaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL21hcmtkb3duLWl0LWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGdEQUFnRDtBQUNoRCxJQUFJLFVBQVUsR0FBdUMsSUFBSSxDQUFBO0FBQ3pELElBQUksaUJBQWlCLEdBQW9DLElBQUksQ0FBQTtBQUM3RCxJQUFJLFdBQVcsR0FBbUIsSUFBSSxDQUFBO0FBQ3RDLElBQUksSUFBSSxHQUFRLElBQUksQ0FBQTtBQUNwQixJQUFJLFdBQVcsR0FBUSxJQUFJLENBQUE7QUFFM0IsTUFBTSxVQUFVLEdBQUcsQ0FBQyxJQUFZLEVBQUUsRUFBRSxDQUNsQyw4Q0FBOEMsSUFBSSxrQkFBa0IsQ0FBQTtBQUN0RSxNQUFNLFNBQVMsR0FBRyxDQUFDLElBQVksRUFBRSxFQUFFLENBQ2pDLDREQUE0RCxJQUFJLGtCQUFrQixDQUFBO0FBRXBGLE1BQU0sV0FBVyxHQUFHO0lBQ2xCLFVBQVUsRUFBRSxHQUFHO0lBQ2YsV0FBVyxFQUFFLEdBQUc7SUFDaEIsU0FBUyxFQUFFLElBQUk7SUFDZixVQUFVLEVBQUUsSUFBSTtJQUNoQixjQUFjLEVBQUUsVUFBVTtJQUMxQixhQUFhLEVBQUUsU0FBUztDQUN6QixDQUFBO0FBRUQsTUFBTSxZQUFZLEdBQUc7SUFDbkIsVUFBVSxFQUFFLEtBQUs7SUFDakIsV0FBVyxFQUFFLEtBQUs7SUFDbEIsU0FBUyxFQUFFLEtBQUs7SUFDaEIsVUFBVSxFQUFFLEtBQUs7SUFDakIsY0FBYyxFQUFFLFVBQVU7SUFDMUIsYUFBYSxFQUFFLFNBQVM7Q0FDekIsQ0FBQTtBQUVELE1BQU0sVUFBVSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDeEIsSUFBSSxFQUFFLElBQUk7SUFDVixRQUFRLEVBQUUsS0FBSztJQUNmLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyw0Q0FBNEMsQ0FBQztJQUNyRSxVQUFVLEVBQUUsT0FBTztJQUNuQixPQUFPLEVBQUUsSUFBSTtJQUNiLFdBQVcsRUFBRSxJQUFJO0NBQ2xCLENBQUMsQ0FBQTtBQUVGLE1BQU0sSUFBSSxHQUFHLFVBQVMsRUFBVztJQUMvQixXQUFXLEdBQUcsRUFBRSxDQUFBO0lBRWhCLGlCQUFpQixHQUFHLFVBQVUsRUFBRSxDQUFBO0lBRWhDLFVBQVUsR0FBRyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO0lBRWhELEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDaEIsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDakIsSUFBSSxHQUFHLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO1FBQ3BDLENBQUM7UUFDRCxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQTtRQUNqQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQTtJQUNwQyxDQUFDO0lBRUQsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxDQUFDLENBQUE7SUFFckUsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUNoQixVQUFVLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLENBQUE7SUFDckQsQ0FBQztBQUNILENBQUMsQ0FBQTtBQUVELE1BQU0sU0FBUyxHQUFHLENBQUMsRUFBVyxFQUFFLEVBQUUsQ0FDaEMsVUFBVSxJQUFJLElBQUk7SUFDbEIsaUJBQWlCLElBQUksSUFBSTtJQUN6QixpQkFBaUIsQ0FBQyxNQUFNO1FBQ3RCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLDRDQUE0QyxDQUFDO0lBQy9ELFdBQVcsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxzQ0FBc0MsQ0FBQztJQUN2RSxFQUFFLEtBQUssV0FBVyxDQUFBO0FBRXBCLGdCQUF1QixJQUFZLEVBQUUsRUFBVztJQUM5QyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUNWLENBQUM7SUFDRCxNQUFNLENBQUMsVUFBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNqQyxDQUFDO0FBTEQsd0JBS0M7QUFFRCxnQkFBdUIsR0FBVztJQUNoQyxNQUFNLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQzFDLENBQUM7QUFGRCx3QkFFQztBQUVELG1CQUEwQixJQUFZLEVBQUUsRUFBVztJQUNqRCxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUNWLENBQUM7SUFDRCxNQUFNLENBQUMsVUFBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUE7QUFDcEMsQ0FBQztBQUxELDhCQUtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1hcmtkb3duSXRNb2R1bGUgPSByZXF1aXJlKFwibWFya2Rvd24taXRcIilcbmxldCBtYXJrZG93bkl0OiBtYXJrZG93bkl0TW9kdWxlLk1hcmtkb3duSXQgfCBudWxsID0gbnVsbFxubGV0IG1hcmtkb3duSXRPcHRpb25zOiBtYXJrZG93bkl0TW9kdWxlLk9wdGlvbnMgfCBudWxsID0gbnVsbFxubGV0IHJlbmRlckxhVGVYOiBib29sZWFuIHwgbnVsbCA9IG51bGxcbmxldCBtYXRoOiBhbnkgPSBudWxsXG5sZXQgbGF6eUhlYWRlcnM6IGFueSA9IG51bGxcblxuY29uc3QgbWF0aElubGluZSA9ICh0ZXh0OiBzdHJpbmcpID0+XG4gIGA8c3BhbiBjbGFzcz0nbWF0aCc+PHNjcmlwdCB0eXBlPSdtYXRoL3RleCc+JHt0ZXh0fTwvc2NyaXB0Pjwvc3Bhbj5gXG5jb25zdCBtYXRoQmxvY2sgPSAodGV4dDogc3RyaW5nKSA9PlxuICBgPHNwYW4gY2xhc3M9J21hdGgnPjxzY3JpcHQgdHlwZT0nbWF0aC90ZXg7IG1vZGU9ZGlzcGxheSc+JHt0ZXh0fTwvc2NyaXB0Pjwvc3Bhbj5gXG5cbmNvbnN0IG1hdGhEb2xsYXJzID0ge1xuICBpbmxpbmVPcGVuOiBcIiRcIixcbiAgaW5saW5lQ2xvc2U6IFwiJFwiLFxuICBibG9ja09wZW46IFwiJCRcIixcbiAgYmxvY2tDbG9zZTogXCIkJFwiLFxuICBpbmxpbmVSZW5kZXJlcjogbWF0aElubGluZSxcbiAgYmxvY2tSZW5kZXJlcjogbWF0aEJsb2NrXG59XG5cbmNvbnN0IG1hdGhCcmFja2V0cyA9IHtcbiAgaW5saW5lT3BlbjogXCJcXFxcKFwiLFxuICBpbmxpbmVDbG9zZTogXCJcXFxcKVwiLFxuICBibG9ja09wZW46IFwiXFxcXFtcIixcbiAgYmxvY2tDbG9zZTogXCJcXFxcXVwiLFxuICBpbmxpbmVSZW5kZXJlcjogbWF0aElubGluZSxcbiAgYmxvY2tSZW5kZXJlcjogbWF0aEJsb2NrXG59XG5cbmNvbnN0IGdldE9wdGlvbnMgPSAoKSA9PiAoe1xuICBodG1sOiB0cnVlLFxuICB4aHRtbE91dDogZmFsc2UsXG4gIGJyZWFrczogYXRvbS5jb25maWcuZ2V0KFwibWFya2Rvd24tcHJldmlldy1wbHVzLmJyZWFrT25TaW5nbGVOZXdsaW5lXCIpLFxuICBsYW5nUHJlZml4OiBcImxhbmctXCIsXG4gIGxpbmtpZnk6IHRydWUsXG4gIHR5cG9ncmFwaGVyOiB0cnVlXG59KVxuXG5jb25zdCBpbml0ID0gZnVuY3Rpb24ockw6IGJvb2xlYW4pIHtcbiAgcmVuZGVyTGFUZVggPSByTFxuXG4gIG1hcmtkb3duSXRPcHRpb25zID0gZ2V0T3B0aW9ucygpXG5cbiAgbWFya2Rvd25JdCA9IG1hcmtkb3duSXRNb2R1bGUobWFya2Rvd25JdE9wdGlvbnMpXG5cbiAgaWYgKHJlbmRlckxhVGVYKSB7XG4gICAgaWYgKG1hdGggPT0gbnVsbCkge1xuICAgICAgbWF0aCA9IHJlcXVpcmUoXCJtYXJrZG93bi1pdC1tYXRoXCIpXG4gICAgfVxuICAgIG1hcmtkb3duSXQudXNlKG1hdGgsIG1hdGhEb2xsYXJzKVxuICAgIG1hcmtkb3duSXQudXNlKG1hdGgsIG1hdGhCcmFja2V0cylcbiAgfVxuXG4gIGxhenlIZWFkZXJzID0gYXRvbS5jb25maWcuZ2V0KFwibWFya2Rvd24tcHJldmlldy1wbHVzLnVzZUxhenlIZWFkZXJzXCIpXG5cbiAgaWYgKGxhenlIZWFkZXJzKSB7XG4gICAgbWFya2Rvd25JdC51c2UocmVxdWlyZShcIm1hcmtkb3duLWl0LWxhenktaGVhZGVyc1wiKSlcbiAgfVxufVxuXG5jb25zdCBuZWVkc0luaXQgPSAockw6IGJvb2xlYW4pID0+XG4gIG1hcmtkb3duSXQgPT0gbnVsbCB8fFxuICBtYXJrZG93bkl0T3B0aW9ucyA9PSBudWxsIHx8XG4gIG1hcmtkb3duSXRPcHRpb25zLmJyZWFrcyAhPT1cbiAgICBhdG9tLmNvbmZpZy5nZXQoXCJtYXJrZG93bi1wcmV2aWV3LXBsdXMuYnJlYWtPblNpbmdsZU5ld2xpbmVcIikgfHxcbiAgbGF6eUhlYWRlcnMgIT09IGF0b20uY29uZmlnLmdldChcIm1hcmtkb3duLXByZXZpZXctcGx1cy51c2VMYXp5SGVhZGVyc1wiKSB8fFxuICByTCAhPT0gcmVuZGVyTGFUZVhcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcih0ZXh0OiBzdHJpbmcsIHJMOiBib29sZWFuKSB7XG4gIGlmIChuZWVkc0luaXQockwpKSB7XG4gICAgaW5pdChyTClcbiAgfVxuICByZXR1cm4gbWFya2Rvd25JdCEucmVuZGVyKHRleHQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUodXJsOiBzdHJpbmcpIHtcbiAgcmV0dXJuIG1hcmtkb3duSXQubm9ybWFsaXplTGlua1RleHQodXJsKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9rZW5zKHRleHQ6IHN0cmluZywgckw6IGJvb2xlYW4pIHtcbiAgaWYgKG5lZWRzSW5pdChyTCkpIHtcbiAgICBpbml0KHJMKVxuICB9XG4gIHJldHVybiBtYXJrZG93bkl0IS5wYXJzZSh0ZXh0LCB7fSlcbn1cbiJdfQ==