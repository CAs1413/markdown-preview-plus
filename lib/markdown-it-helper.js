"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const markdownItModule = require("markdown-it");
const twemoji = require("twemoji");
const path = require("path");
const util_1 = require("./util");
const _ = require("lodash");
function mathInline(text) {
    return `<span class='math'><script type='math/tex'>${text}</script></span>`;
}
function mathBlock(text) {
    return `<span class='math'><script type='math/tex; mode=display'>${text}</script></span>`;
}
function getOptions(breaks) {
    return {
        html: true,
        xhtmlOut: false,
        breaks,
        langPrefix: 'lang-',
        linkify: true,
        typographer: true,
    };
}
function currentConfig(rL) {
    const config = atom.config.get('markdown-preview-plus');
    return {
        renderLaTeX: rL,
        lazyHeaders: config.useLazyHeaders,
        checkBoxes: config.useCheckBoxes,
        emoji: config.useEmoji,
        breaks: config.breakOnSingleNewline,
        inlineMathSeparators: config.inlineMathSeparators,
        blockMathSeparators: config.blockMathSeparators,
    };
}
function init(initState) {
    const markdownIt = markdownItModule(getOptions(initState.breaks));
    if (initState.renderLaTeX) {
        const inlineDelim = util_1.pairUp(initState.inlineMathSeparators, 'inlineMathSeparators');
        const blockDelim = util_1.pairUp(initState.blockMathSeparators, 'blockMathSeparators');
        markdownIt.use(require('./markdown-it-math').math_plugin, {
            inlineDelim,
            blockDelim,
            inlineRenderer: mathInline,
            blockRenderer: mathBlock,
        });
    }
    if (initState.lazyHeaders)
        markdownIt.use(require('markdown-it-lazy-headers'));
    if (initState.checkBoxes)
        markdownIt.use(require('markdown-it-task-lists'));
    if (initState.emoji) {
        markdownIt.use(require('markdown-it-emoji'));
        markdownIt.renderer.rules.emoji = function (token, idx) {
            return twemoji.parse(token[idx].content, {
                folder: 'svg',
                ext: '.svg',
                base: path.dirname(require.resolve('twemoji')) + path.sep,
            });
        };
    }
    return markdownIt;
}
function wrapInitIfNeeded(initf) {
    let markdownIt = null;
    let initState = null;
    return function (newState) {
        if (markdownIt === null || !_.isEqual(initState, newState)) {
            initState = newState;
            console.error('initialized');
            markdownIt = initf(newState);
        }
        return markdownIt;
    };
}
const initIfNeeded = wrapInitIfNeeded(init);
function render(text, rL) {
    const markdownIt = initIfNeeded(currentConfig(rL));
    return markdownIt.render(text);
}
exports.render = render;
function getTokens(text, rL) {
    const markdownIt = initIfNeeded(currentConfig(rL));
    return markdownIt.parse(text, {});
}
exports.getTokens = getTokens;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Rvd24taXQtaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL21hcmtkb3duLWl0LWhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGdEQUFnRDtBQUNoRCxtQ0FBa0M7QUFDbEMsNkJBQTRCO0FBQzVCLGlDQUErQjtBQUMvQiw0QkFBMkI7QUFjM0Isb0JBQW9CLElBQVk7SUFDOUIsT0FBTyw4Q0FBOEMsSUFBSSxrQkFBa0IsQ0FBQTtBQUM3RSxDQUFDO0FBRUQsbUJBQW1CLElBQVk7SUFDN0IsT0FBTyw0REFBNEQsSUFBSSxrQkFBa0IsQ0FBQTtBQUMzRixDQUFDO0FBRUQsb0JBQW9CLE1BQWU7SUFDakMsT0FBTztRQUNMLElBQUksRUFBRSxJQUFJO1FBQ1YsUUFBUSxFQUFFLEtBQUs7UUFDZixNQUFNO1FBQ04sVUFBVSxFQUFFLE9BQU87UUFDbkIsT0FBTyxFQUFFLElBQUk7UUFDYixXQUFXLEVBQUUsSUFBSTtLQUNsQixDQUFBO0FBQ0gsQ0FBQztBQUVELHVCQUF1QixFQUFXO0lBQ2hDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUE7SUFDdkQsT0FBTztRQUNMLFdBQVcsRUFBRSxFQUFFO1FBQ2YsV0FBVyxFQUFFLE1BQU0sQ0FBQyxjQUFjO1FBQ2xDLFVBQVUsRUFBRSxNQUFNLENBQUMsYUFBYTtRQUNoQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFFBQVE7UUFDdEIsTUFBTSxFQUFFLE1BQU0sQ0FBQyxvQkFBb0I7UUFDbkMsb0JBQW9CLEVBQUUsTUFBTSxDQUFDLG9CQUFvQjtRQUNqRCxtQkFBbUIsRUFBRSxNQUFNLENBQUMsbUJBQW1CO0tBQ2hELENBQUE7QUFDSCxDQUFDO0FBRUQsY0FBYyxTQUFvQjtJQUNoQyxNQUFNLFVBQVUsR0FBRyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUE7SUFFakUsSUFBSSxTQUFTLENBQUMsV0FBVyxFQUFFO1FBQ3pCLE1BQU0sV0FBVyxHQUFHLGFBQU0sQ0FDeEIsU0FBUyxDQUFDLG9CQUFvQixFQUM5QixzQkFBc0IsQ0FDdkIsQ0FBQTtRQUNELE1BQU0sVUFBVSxHQUFHLGFBQU0sQ0FDdkIsU0FBUyxDQUFDLG1CQUFtQixFQUM3QixxQkFBcUIsQ0FDdEIsQ0FBQTtRQUVELFVBQVUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsV0FBVyxFQUFFO1lBQ3hELFdBQVc7WUFDWCxVQUFVO1lBQ1YsY0FBYyxFQUFFLFVBQVU7WUFDMUIsYUFBYSxFQUFFLFNBQVM7U0FDekIsQ0FBQyxDQUFBO0tBQ0g7SUFFRCxJQUFJLFNBQVMsQ0FBQyxXQUFXO1FBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxDQUFBO0lBQzlFLElBQUksU0FBUyxDQUFDLFVBQVU7UUFBRSxVQUFVLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUE7SUFFM0UsSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFO1FBQ25CLFVBQVUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQTtRQUM1QyxVQUFVLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsVUFBUyxLQUFLLEVBQUUsR0FBRztZQUNuRCxPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRTtnQkFDdkMsTUFBTSxFQUFFLEtBQUs7Z0JBQ2IsR0FBRyxFQUFFLE1BQU07Z0JBQ1gsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHO2FBQzFELENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQTtLQUNGO0lBRUQsT0FBTyxVQUFVLENBQUE7QUFDbkIsQ0FBQztBQUVELDBCQUEwQixLQUFrQjtJQUMxQyxJQUFJLFVBQVUsR0FBdUMsSUFBSSxDQUFBO0lBQ3pELElBQUksU0FBUyxHQUFxQixJQUFJLENBQUE7SUFFdEMsT0FBTyxVQUFTLFFBQW1CO1FBQ2pDLElBQUksVUFBVSxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxFQUFFO1lBQzFELFNBQVMsR0FBRyxRQUFRLENBQUE7WUFDcEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQTtZQUM1QixVQUFVLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1NBQzdCO1FBQ0QsT0FBTyxVQUFVLENBQUE7SUFDbkIsQ0FBQyxDQUFBO0FBQ0gsQ0FBQztBQUVELE1BQU0sWUFBWSxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFBO0FBRTNDLGdCQUF1QixJQUFZLEVBQUUsRUFBVztJQUM5QyxNQUFNLFVBQVUsR0FBRyxZQUFZLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDbEQsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ2hDLENBQUM7QUFIRCx3QkFHQztBQUVELG1CQUEwQixJQUFZLEVBQUUsRUFBVztJQUNqRCxNQUFNLFVBQVUsR0FBRyxZQUFZLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDbEQsT0FBTyxVQUFXLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUNwQyxDQUFDO0FBSEQsOEJBR0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbWFya2Rvd25JdE1vZHVsZSA9IHJlcXVpcmUoJ21hcmtkb3duLWl0JylcbmltcG9ydCAqIGFzIHR3ZW1vamkgZnJvbSAndHdlbW9qaSdcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCdcbmltcG9ydCB7IHBhaXJVcCB9IGZyb20gJy4vdXRpbCdcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0IHsgQ29uZmlnVmFsdWVzIH0gZnJvbSAnYXRvbSdcblxudHlwZSBDb25maWcgPSBDb25maWdWYWx1ZXNbJ21hcmtkb3duLXByZXZpZXctcGx1cyddXG50eXBlIEluaXRTdGF0ZSA9IFJlYWRvbmx5PHtcbiAgcmVuZGVyTGFUZVg6IGJvb2xlYW5cbiAgbGF6eUhlYWRlcnM6IENvbmZpZ1sndXNlTGF6eUhlYWRlcnMnXVxuICBjaGVja0JveGVzOiBDb25maWdbJ3VzZUNoZWNrQm94ZXMnXVxuICBlbW9qaTogQ29uZmlnWyd1c2VFbW9qaSddXG4gIGJyZWFrczogQ29uZmlnWydicmVha09uU2luZ2xlTmV3bGluZSddXG4gIGlubGluZU1hdGhTZXBhcmF0b3JzOiBDb25maWdbJ2lubGluZU1hdGhTZXBhcmF0b3JzJ11cbiAgYmxvY2tNYXRoU2VwYXJhdG9yczogQ29uZmlnWydibG9ja01hdGhTZXBhcmF0b3JzJ11cbn0+XG5cbmZ1bmN0aW9uIG1hdGhJbmxpbmUodGV4dDogc3RyaW5nKSB7XG4gIHJldHVybiBgPHNwYW4gY2xhc3M9J21hdGgnPjxzY3JpcHQgdHlwZT0nbWF0aC90ZXgnPiR7dGV4dH08L3NjcmlwdD48L3NwYW4+YFxufVxuXG5mdW5jdGlvbiBtYXRoQmxvY2sodGV4dDogc3RyaW5nKSB7XG4gIHJldHVybiBgPHNwYW4gY2xhc3M9J21hdGgnPjxzY3JpcHQgdHlwZT0nbWF0aC90ZXg7IG1vZGU9ZGlzcGxheSc+JHt0ZXh0fTwvc2NyaXB0Pjwvc3Bhbj5gXG59XG5cbmZ1bmN0aW9uIGdldE9wdGlvbnMoYnJlYWtzOiBib29sZWFuKSB7XG4gIHJldHVybiB7XG4gICAgaHRtbDogdHJ1ZSxcbiAgICB4aHRtbE91dDogZmFsc2UsXG4gICAgYnJlYWtzLFxuICAgIGxhbmdQcmVmaXg6ICdsYW5nLScsXG4gICAgbGlua2lmeTogdHJ1ZSxcbiAgICB0eXBvZ3JhcGhlcjogdHJ1ZSxcbiAgfVxufVxuXG5mdW5jdGlvbiBjdXJyZW50Q29uZmlnKHJMOiBib29sZWFuKTogSW5pdFN0YXRlIHtcbiAgY29uc3QgY29uZmlnID0gYXRvbS5jb25maWcuZ2V0KCdtYXJrZG93bi1wcmV2aWV3LXBsdXMnKVxuICByZXR1cm4ge1xuICAgIHJlbmRlckxhVGVYOiByTCxcbiAgICBsYXp5SGVhZGVyczogY29uZmlnLnVzZUxhenlIZWFkZXJzLFxuICAgIGNoZWNrQm94ZXM6IGNvbmZpZy51c2VDaGVja0JveGVzLFxuICAgIGVtb2ppOiBjb25maWcudXNlRW1vamksXG4gICAgYnJlYWtzOiBjb25maWcuYnJlYWtPblNpbmdsZU5ld2xpbmUsXG4gICAgaW5saW5lTWF0aFNlcGFyYXRvcnM6IGNvbmZpZy5pbmxpbmVNYXRoU2VwYXJhdG9ycyxcbiAgICBibG9ja01hdGhTZXBhcmF0b3JzOiBjb25maWcuYmxvY2tNYXRoU2VwYXJhdG9ycyxcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0KGluaXRTdGF0ZTogSW5pdFN0YXRlKTogbWFya2Rvd25JdE1vZHVsZS5NYXJrZG93bkl0IHtcbiAgY29uc3QgbWFya2Rvd25JdCA9IG1hcmtkb3duSXRNb2R1bGUoZ2V0T3B0aW9ucyhpbml0U3RhdGUuYnJlYWtzKSlcblxuICBpZiAoaW5pdFN0YXRlLnJlbmRlckxhVGVYKSB7XG4gICAgY29uc3QgaW5saW5lRGVsaW0gPSBwYWlyVXAoXG4gICAgICBpbml0U3RhdGUuaW5saW5lTWF0aFNlcGFyYXRvcnMsXG4gICAgICAnaW5saW5lTWF0aFNlcGFyYXRvcnMnLFxuICAgIClcbiAgICBjb25zdCBibG9ja0RlbGltID0gcGFpclVwKFxuICAgICAgaW5pdFN0YXRlLmJsb2NrTWF0aFNlcGFyYXRvcnMsXG4gICAgICAnYmxvY2tNYXRoU2VwYXJhdG9ycycsXG4gICAgKVxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnNhZmUtYW55XG4gICAgbWFya2Rvd25JdC51c2UocmVxdWlyZSgnLi9tYXJrZG93bi1pdC1tYXRoJykubWF0aF9wbHVnaW4sIHtcbiAgICAgIGlubGluZURlbGltLFxuICAgICAgYmxvY2tEZWxpbSxcbiAgICAgIGlubGluZVJlbmRlcmVyOiBtYXRoSW5saW5lLFxuICAgICAgYmxvY2tSZW5kZXJlcjogbWF0aEJsb2NrLFxuICAgIH0pXG4gIH1cblxuICBpZiAoaW5pdFN0YXRlLmxhenlIZWFkZXJzKSBtYXJrZG93bkl0LnVzZShyZXF1aXJlKCdtYXJrZG93bi1pdC1sYXp5LWhlYWRlcnMnKSlcbiAgaWYgKGluaXRTdGF0ZS5jaGVja0JveGVzKSBtYXJrZG93bkl0LnVzZShyZXF1aXJlKCdtYXJrZG93bi1pdC10YXNrLWxpc3RzJykpXG5cbiAgaWYgKGluaXRTdGF0ZS5lbW9qaSkge1xuICAgIG1hcmtkb3duSXQudXNlKHJlcXVpcmUoJ21hcmtkb3duLWl0LWVtb2ppJykpXG4gICAgbWFya2Rvd25JdC5yZW5kZXJlci5ydWxlcy5lbW9qaSA9IGZ1bmN0aW9uKHRva2VuLCBpZHgpIHtcbiAgICAgIHJldHVybiB0d2Vtb2ppLnBhcnNlKHRva2VuW2lkeF0uY29udGVudCwge1xuICAgICAgICBmb2xkZXI6ICdzdmcnLFxuICAgICAgICBleHQ6ICcuc3ZnJyxcbiAgICAgICAgYmFzZTogcGF0aC5kaXJuYW1lKHJlcXVpcmUucmVzb2x2ZSgndHdlbW9qaScpKSArIHBhdGguc2VwLFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWFya2Rvd25JdFxufVxuXG5mdW5jdGlvbiB3cmFwSW5pdElmTmVlZGVkKGluaXRmOiB0eXBlb2YgaW5pdCk6IHR5cGVvZiBpbml0IHtcbiAgbGV0IG1hcmtkb3duSXQ6IG1hcmtkb3duSXRNb2R1bGUuTWFya2Rvd25JdCB8IG51bGwgPSBudWxsXG4gIGxldCBpbml0U3RhdGU6IEluaXRTdGF0ZSB8IG51bGwgPSBudWxsXG5cbiAgcmV0dXJuIGZ1bmN0aW9uKG5ld1N0YXRlOiBJbml0U3RhdGUpIHtcbiAgICBpZiAobWFya2Rvd25JdCA9PT0gbnVsbCB8fCAhXy5pc0VxdWFsKGluaXRTdGF0ZSwgbmV3U3RhdGUpKSB7XG4gICAgICBpbml0U3RhdGUgPSBuZXdTdGF0ZVxuICAgICAgY29uc29sZS5lcnJvcignaW5pdGlhbGl6ZWQnKVxuICAgICAgbWFya2Rvd25JdCA9IGluaXRmKG5ld1N0YXRlKVxuICAgIH1cbiAgICByZXR1cm4gbWFya2Rvd25JdFxuICB9XG59XG5cbmNvbnN0IGluaXRJZk5lZWRlZCA9IHdyYXBJbml0SWZOZWVkZWQoaW5pdClcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcih0ZXh0OiBzdHJpbmcsIHJMOiBib29sZWFuKSB7XG4gIGNvbnN0IG1hcmtkb3duSXQgPSBpbml0SWZOZWVkZWQoY3VycmVudENvbmZpZyhyTCkpXG4gIHJldHVybiBtYXJrZG93bkl0LnJlbmRlcih0ZXh0KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9rZW5zKHRleHQ6IHN0cmluZywgckw6IGJvb2xlYW4pIHtcbiAgY29uc3QgbWFya2Rvd25JdCA9IGluaXRJZk5lZWRlZChjdXJyZW50Q29uZmlnKHJMKSlcbiAgcmV0dXJuIG1hcmtkb3duSXQhLnBhcnNlKHRleHQsIHt9KVxufVxuIl19