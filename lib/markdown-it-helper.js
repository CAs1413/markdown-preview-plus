"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const markdownItModule = require("markdown-it");
const twemoji = require("twemoji");
const path = require("path");
let markdownIt = null;
let markdownItOptions = null;
let renderLaTeX = null;
let math = null;
let lazyHeaders = null;
let checkBoxes = null;
let emoji = null;
const mathInline = (text) => `<span class='math'><script type='math/tex'>${text}</script></span>`;
const mathBlock = (text) => `<span class='math'><script type='math/tex; mode=display'>${text}</script></span>`;
const mathDollars = {
    inlineOpen: '$',
    inlineClose: '$',
    blockOpen: '$$',
    blockClose: '$$',
    inlineRenderer: mathInline,
    blockRenderer: mathBlock,
};
const mathBrackets = {
    inlineOpen: '\\(',
    inlineClose: '\\)',
    blockOpen: '\\[',
    blockClose: '\\]',
    inlineRenderer: mathInline,
    blockRenderer: mathBlock,
};
const getOptions = () => ({
    html: true,
    xhtmlOut: false,
    breaks: atom.config.get('markdown-preview-plus.breakOnSingleNewline'),
    langPrefix: 'lang-',
    linkify: true,
    typographer: true,
});
const init = function (rL) {
    renderLaTeX = rL;
    markdownItOptions = getOptions();
    markdownIt = markdownItModule(markdownItOptions);
    if (renderLaTeX) {
        if (math == null) {
            math = require('markdown-it-math');
        }
        markdownIt.use(math, mathDollars);
        markdownIt.use(math, mathBrackets);
    }
    lazyHeaders = atom.config.get('markdown-preview-plus.useLazyHeaders');
    if (lazyHeaders) {
        markdownIt.use(require('markdown-it-lazy-headers'));
    }
    checkBoxes = atom.config.get('markdown-preview-plus.useCheckBoxes');
    if (checkBoxes) {
        markdownIt.use(require('markdown-it-task-lists'));
    }
    emoji = atom.config.get('markdown-preview-plus.useEmoji');
    if (emoji) {
        markdownIt.use(require('markdown-it-emoji'));
        markdownIt.renderer.rules.emoji = function (token, idx) {
            return twemoji.parse(token[idx].content, {
                folder: 'svg',
                ext: '.svg',
                base: path.dirname(require.resolve('twemoji')) + path.sep,
            });
        };
    }
};
const needsInit = (rL) => markdownIt === null ||
    markdownItOptions === null ||
    markdownItOptions.breaks !==
        atom.config.get('markdown-preview-plus.breakOnSingleNewline') ||
    lazyHeaders !== atom.config.get('markdown-preview-plus.useLazyHeaders') ||
    checkBoxes !== atom.config.get('markdown-preview-plus.useCheckBoxes') ||
    emoji !== atom.config.get('markdown-preview-plus.emoji') ||
    rL !== renderLaTeX;
function render(text, rL) {
    if (needsInit(rL)) {
        init(rL);
    }
    return markdownIt.render(text);
}
exports.render = render;
function decode(url) {
    if (!markdownIt)
        throw new Error('markdownIt not initialized');
    return markdownIt.normalizeLinkText(url);
}
exports.decode = decode;
function getTokens(text, rL) {
    if (needsInit(rL)) {
        init(rL);
    }
    return markdownIt.parse(text, {});
}
exports.getTokens = getTokens;
//# sourceMappingURL=data:application/json;base64,