"use strict";
const { $ } = require('atom-space-pen-views');
const path = require('path');
const CSON = require('season');
const fs = require('fs-plus');
const _ = require('lodash');
const namePattern = new RegExp(`\
^[^a-zA-Z\\d\\s]$\
|\
^[a-zA-Z]*$\
`);
const getUserMacrosPath = function () {
    const userMacrosPath = CSON.resolve(path.join(atom.getConfigDirPath(), 'markdown-preview-plus'));
    return userMacrosPath != null ? userMacrosPath : path.join(atom.getConfigDirPath(), 'markdown-preview-plus.cson');
};
const loadMacrosFile = function (filePath) {
    if (!CSON.isObjectPath(filePath)) {
        return {};
    }
    return CSON.readFileSync(filePath, function (error, object) {
        if (object == null) {
            object = {};
        }
        if (error != null) {
            console.warn(`Error reading Latex Macros file '${filePath}': ${error.stack != null ? error.stack : error}`);
            if (atom.notifications != null) {
                atom.notifications.addError(`Failed to load Latex Macros from '${filePath}'`, { detail: error.message, dismissable: true });
            }
        }
        return object;
    });
};
const loadUserMacros = function () {
    let result;
    const userMacrosPath = getUserMacrosPath();
    if (fs.isFileSync(userMacrosPath)) {
        return result = loadMacrosFile(userMacrosPath);
    }
    else {
        console.log("Creating markdown-preview-plus.cson, this is a one-time operation.");
        createMacrosTemplate(userMacrosPath);
        return result = loadMacrosFile(userMacrosPath);
    }
};
var createMacrosTemplate = function (filePath) {
    const templatePath = path.join(__dirname, "../assets/macros-template.cson");
    const templateFile = fs.readFileSync(templatePath, 'utf8');
    return fs.writeFileSync(filePath, templateFile);
};
const checkMacros = function (macrosObject) {
    for (let name in macrosObject) {
        const value = macrosObject[name];
        if (!name.match(namePattern) || !valueMatchesPattern(value)) {
            delete macrosObject[name];
            if (atom.notifications != null) {
                atom.notifications.addError(`Failed to load LaTeX macro named '${name}'. Please see the [LaTeX guide](https://github.com/Galadirith/markdown-preview-plus/blob/master/LATEX.md#macro-names)`, { dismissable: true });
            }
        }
    }
    return macrosObject;
};
var valueMatchesPattern = function (value) {
    switch (false) {
        case Object.prototype.toString.call(value) !== '[object Array]':
            var macroDefinition = value[0];
            var numberOfArgs = value[1];
            if (typeof numberOfArgs === 'number') {
                return ((numberOfArgs % 1) === 0) && (typeof macroDefinition === 'string');
            }
            else {
                return false;
            }
        case typeof value !== 'string':
            return true;
        default: return false;
    }
};
const configureMathJax = function () {
    let userMacros = loadUserMacros();
    if (userMacros) {
        userMacros = checkMacros(userMacros);
    }
    else {
        userMacros = {};
    }
    MathJax.Hub.Config({
        jax: [
            "input/TeX",
            "output/HTML-CSS"
        ],
        extensions: [],
        TeX: {
            extensions: [
                "AMSmath.js",
                "AMSsymbols.js",
                "noErrors.js",
                "noUndefined.js"
            ],
            Macros: userMacros
        },
        "HTML-CSS": {
            availableFonts: [],
            webFont: "TeX"
        },
        messageStyle: "none",
        showMathMenu: false,
        skipStartupTypeset: true
    });
    MathJax.Hub.Configured();
    if (atom.inDevMode()) {
        atom.notifications.addSuccess("Loaded maths rendering engine MathJax");
    }
};
var attachMathJax = function () {
    if (atom.inDevMode()) {
        atom.notifications.addInfo("Loading maths rendering engine MathJax");
    }
    const script = document.createElement("script");
    script.src = `${require.resolve('MathJax')}?delayStartupUntil=configured`;
    script.type = "text/javascript";
    script.addEventListener("load", () => configureMathJax());
    document.getElementsByTagName("head")[0].appendChild(script);
    return script;
};
function __guard__(value, transform) {
    return (typeof value !== 'undefined' && value !== null) ? transform(value) : undefined;
}
module.exports = {
    loadMathJax(listener) {
        const script = this.attachMathJax();
        if (listener != null) {
            script.addEventListener("load", () => listener());
        }
    },
    attachMathJax: _.once(() => attachMathJax()),
    resetMathJax() {
        $('script[src*="MathJax.js"]').remove();
        window.MathJax = undefined;
        return this.attachMathJax = _.once(() => attachMathJax());
    },
    mathProcessor(domElements) {
        if (typeof MathJax !== 'undefined' && MathJax !== null) {
            MathJax.Hub.Queue(["Typeset", MathJax.Hub, domElements]);
        }
        else {
            this.loadMathJax(() => MathJax.Hub.Queue(["Typeset", MathJax.Hub, domElements]));
        }
    },
    processHTMLString(html, callback) {
        const element = document.createElement('div');
        element.innerHTML = html;
        const compileProcessedHTMLString = function () {
            const svgGlyphs = __guard__(document.getElementById('MathJax_SVG_Hidden'), x => x.parentNode.cloneNode(true));
            if (svgGlyphs != null) {
                element.insertBefore(svgGlyphs, element.firstChild);
            }
            return element.innerHTML;
        };
        const queueProcessHTMLString = () => MathJax.Hub.Queue(["setRenderer", MathJax.Hub, "SVG"], ["Typeset", MathJax.Hub, element], ["setRenderer", MathJax.Hub, "HTML-CSS"], [() => callback(compileProcessedHTMLString())]);
        if (typeof MathJax !== 'undefined' && MathJax !== null) {
            queueProcessHTMLString();
        }
        else {
            this.loadMathJax(queueProcessHTMLString);
        }
    }
};
//# sourceMappingURL=data:application/json;base64,