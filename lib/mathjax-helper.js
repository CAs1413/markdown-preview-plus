"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const CSON = require("season");
const fs = require("fs");
const util_1 = require("./util");
let isMathJaxDisabled = false;
async function mathProcessor(frame, domElements) {
    if (isMathJaxDisabled)
        return;
    const jax = await loadMathJax(frame);
    jax.queueTypeset(domElements);
}
exports.mathProcessor = mathProcessor;
async function processHTMLString(frame, html) {
    if (isMathJaxDisabled) {
        return html;
    }
    const element = document.createElement('div');
    element.innerHTML = html;
    const jax = await loadMathJax(frame);
    await new Promise((resolve) => {
        jax.queueProcessHTMLString(element, resolve);
    });
    const msvgh = frame.contentDocument.getElementById('MathJax_SVG_Hidden');
    const svgGlyphs = msvgh && msvgh.parentNode.cloneNode(true);
    if (svgGlyphs !== null) {
        element.insertBefore(svgGlyphs, element.firstChild);
    }
    return element.innerHTML;
}
exports.processHTMLString = processHTMLString;
function disableMathJax(disable) {
    isMathJaxDisabled = disable;
}
async function loadMathJax(frame) {
    if (frame.contentWindow.mathJaxStub)
        return frame.contentWindow.mathJaxStub;
    if (frame.contentDocument.querySelector('head')) {
        return attachMathJax(frame);
    }
    else {
        return new Promise((resolve) => {
            const onload = () => {
                frame.removeEventListener('load', onload);
                resolve(loadMathJax(frame));
            };
            frame.addEventListener('load', onload);
        });
    }
}
async function attachMathJax(frame) {
    if (!frame.contentDocument.querySelector('script[src*="MathJax.js"]')) {
        return attachMathJaxInternal(frame);
    }
    throw new Error('Duplicate attachMathJax call');
}
exports.testing = {
    loadMathJax,
    disableMathJax,
};
const namePattern = new RegExp(`\
^[^a-zA-Z\\d\\s]$\
|\
^[a-zA-Z]*$\
`);
function getUserMacrosPath() {
    const userMacrosPath = CSON.resolve(path.join(atom.getConfigDirPath(), 'markdown-preview-plus'));
    return userMacrosPath != null
        ? userMacrosPath
        : path.join(atom.getConfigDirPath(), 'markdown-preview-plus.cson');
}
function loadMacrosFile(filePath) {
    if (!CSON.isObjectPath(filePath)) {
        return {};
    }
    return CSON.readFileSync(filePath, function (error, object) {
        if (object === undefined) {
            object = {};
        }
        if (error !== undefined) {
            console.warn(`Error reading Latex Macros file '${filePath}': ${error.stack !== undefined ? error.stack : error}`);
            atom.notifications.addError(`Failed to load Latex Macros from '${filePath}'`, { detail: error.message, dismissable: true });
        }
        return object;
    });
}
function loadUserMacros() {
    const userMacrosPath = getUserMacrosPath();
    if (util_1.isFileSync(userMacrosPath)) {
        return loadMacrosFile(userMacrosPath);
    }
    else {
        console.debug('Creating markdown-preview-plus.cson, this is a one-time operation.');
        createMacrosTemplate(userMacrosPath);
        return loadMacrosFile(userMacrosPath);
    }
}
function createMacrosTemplate(filePath) {
    const templatePath = path.join(__dirname, '../assets/macros-template.cson');
    const templateFile = fs.readFileSync(templatePath, 'utf8');
    fs.writeFileSync(filePath, templateFile);
}
function checkMacros(macrosObject) {
    for (const name in macrosObject) {
        const value = macrosObject[name];
        if (!name.match(namePattern) || !valueMatchesPattern(value)) {
            delete macrosObject[name];
            atom.notifications.addError(`Failed to load LaTeX macro named '${name}'. Please see the [LaTeX guide](https://github.com/Galadirith/markdown-preview-plus/blob/master/LATEX.md#macro-names)`, { dismissable: true });
        }
    }
    return macrosObject;
}
function valueMatchesPattern(value) {
    if (Array.isArray(value)) {
        const macroDefinition = value[0];
        const numberOfArgs = value[1];
        if (typeof numberOfArgs === 'number') {
            return numberOfArgs % 1 === 0 && typeof macroDefinition === 'string';
        }
        else {
            return false;
        }
    }
    else if (typeof value === 'string') {
        return true;
    }
    else {
        return false;
    }
}
const configureMathJax = function (jax) {
    let userMacros = loadUserMacros();
    if (userMacros) {
        userMacros = checkMacros(userMacros);
    }
    else {
        userMacros = {};
    }
    jax.jaxConfigure(userMacros);
    if (atom.inDevMode()) {
        atom.notifications.addSuccess('Loaded maths rendering engine MathJax');
    }
};
async function attachMathJaxInternal(frame) {
    if (atom.inDevMode()) {
        atom.notifications.addInfo('Loading maths rendering engine MathJax');
    }
    await Promise.all([
        injectScript(frame.contentDocument, `${require.resolve('MathJax')}?delayStartupUntil=configured`),
        injectScript(frame.contentDocument, require.resolve('./mathjax-stub')),
    ]);
    configureMathJax(frame.contentWindow.mathJaxStub);
    return frame.contentWindow.mathJaxStub;
}
async function injectScript(doc, scriptSrc) {
    const script = doc.createElement('script');
    script.src = scriptSrc;
    script.type = 'text/javascript';
    doc.querySelector('head').appendChild(script);
    return new Promise((resolve) => {
        script.addEventListener('load', () => resolve());
    });
}
//# sourceMappingURL=data:application/json;base64,