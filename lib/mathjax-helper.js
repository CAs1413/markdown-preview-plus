"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const CSON = require("season");
const fs = require("fs");
const util_1 = require("./util");
let isMathJaxDisabled = false;
async function mathProcessor(frame, domElements) {
    if (isMathJaxDisabled)
        return;
    const jax = await loadMathJax(frame, atom.config.get('markdown-preview-plus.latexRenderer'));
    await jax.queueTypeset(domElements);
}
exports.mathProcessor = mathProcessor;
async function processHTMLString(frame, element) {
    if (isMathJaxDisabled) {
        return element.innerHTML;
    }
    const jax = await loadMathJax(frame, 'SVG');
    await jax.queueTypeset([element]);
    const msvgh = frame.contentDocument.getElementById('MathJax_SVG_Hidden');
    const svgGlyphs = msvgh && msvgh.parentNode.cloneNode(true);
    if (svgGlyphs !== null) {
        element.insertBefore(svgGlyphs, element.firstChild);
    }
    return element.innerHTML;
}
exports.processHTMLString = processHTMLString;
function disableMathJax(disable) {
    isMathJaxDisabled = disable;
}
async function loadMathJax(frame, renderer) {
    if (frame.contentWindow.mathJaxStub)
        return frame.contentWindow.mathJaxStub;
    if (frame.contentDocument.querySelector('head')) {
        return attachMathJax(frame, renderer);
    }
    else {
        return new Promise((resolve) => {
            const onload = () => {
                frame.removeEventListener('load', onload);
                resolve(loadMathJax(frame, renderer));
            };
            frame.addEventListener('load', onload);
        });
    }
}
exports.testing = {
    loadMathJax,
    disableMathJax,
};
const namePattern = new RegExp(`\
^[^a-zA-Z\\d\\s]$\
|\
^[a-zA-Z]*$\
`);
function getUserMacrosPath() {
    const userMacrosPath = CSON.resolve(path.join(atom.getConfigDirPath(), 'markdown-preview-plus'));
    return userMacrosPath != null
        ? userMacrosPath
        : path.join(atom.getConfigDirPath(), 'markdown-preview-plus.cson');
}
function loadMacrosFile(filePath) {
    if (!CSON.isObjectPath(filePath)) {
        return {};
    }
    return CSON.readFileSync(filePath, function (error, object) {
        if (object === undefined) {
            object = {};
        }
        if (error !== undefined) {
            console.warn(`Error reading Latex Macros file '${filePath}': ${error.stack !== undefined ? error.stack : error}`);
            atom.notifications.addError(`Failed to load Latex Macros from '${filePath}'`, { detail: error.message, dismissable: true });
        }
        return object;
    });
}
function loadUserMacros() {
    const userMacrosPath = getUserMacrosPath();
    if (util_1.isFileSync(userMacrosPath)) {
        return loadMacrosFile(userMacrosPath);
    }
    else {
        console.debug('Creating markdown-preview-plus.cson, this is a one-time operation.');
        createMacrosTemplate(userMacrosPath);
        return loadMacrosFile(userMacrosPath);
    }
}
function createMacrosTemplate(filePath) {
    const templatePath = path.join(__dirname, '../assets/macros-template.cson');
    const templateFile = fs.readFileSync(templatePath, 'utf8');
    fs.writeFileSync(filePath, templateFile);
}
function checkMacros(macrosObject) {
    for (const name in macrosObject) {
        const value = macrosObject[name];
        if (!name.match(namePattern) || !valueMatchesPattern(value)) {
            delete macrosObject[name];
            atom.notifications.addError(`Failed to load LaTeX macro named '${name}'. Please see the [LaTeX guide](https://github.com/Galadirith/markdown-preview-plus/blob/master/LATEX.md#macro-names)`, { dismissable: true });
        }
    }
    return macrosObject;
}
function valueMatchesPattern(value) {
    if (Array.isArray(value)) {
        const macroDefinition = value[0];
        const numberOfArgs = value[1];
        if (typeof numberOfArgs === 'number') {
            return numberOfArgs % 1 === 0 && typeof macroDefinition === 'string';
        }
        else {
            return false;
        }
    }
    else if (typeof value === 'string') {
        return true;
    }
    else {
        return false;
    }
}
const configureMathJax = function (jax, renderer) {
    let userMacros = loadUserMacros();
    if (userMacros) {
        userMacros = checkMacros(userMacros);
    }
    else {
        userMacros = {};
    }
    jax.jaxConfigure(userMacros, renderer);
    if (atom.inDevMode()) {
        atom.notifications.addSuccess('Loaded maths rendering engine MathJax');
    }
};
async function attachMathJax(frame, renderer) {
    if (atom.inDevMode()) {
        atom.notifications.addInfo('Loading maths rendering engine MathJax');
    }
    await Promise.all([
        injectScript(frame.contentDocument, `${require.resolve('MathJax')}?delayStartupUntil=configured`),
        injectScript(frame.contentDocument, require.resolve('./mathjax-stub')),
    ]);
    configureMathJax(frame.contentWindow.mathJaxStub, renderer);
    return frame.contentWindow.mathJaxStub;
}
async function injectScript(doc, scriptSrc) {
    const script = doc.createElement('script');
    script.src = scriptSrc;
    script.type = 'text/javascript';
    doc.head.appendChild(script);
    return new Promise((resolve) => {
        script.addEventListener('load', () => resolve());
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0aGpheC1oZWxwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbWF0aGpheC1oZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFPQSw2QkFBNkI7QUFDN0IsK0JBQStCO0FBQy9CLHlCQUF5QjtBQUN6QixpQ0FBbUM7QUFFbkMsSUFBSSxpQkFBaUIsR0FBRyxLQUFLLENBQUE7QUFTdEIsS0FBSyx3QkFDVixLQUF3QixFQUN4QixXQUFtQjtJQUVuQixFQUFFLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQztRQUFDLE1BQU0sQ0FBQTtJQUM3QixNQUFNLEdBQUcsR0FBRyxNQUFNLFdBQVcsQ0FDM0IsS0FBSyxFQUNMLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHFDQUFxQyxDQUFDLENBQ3ZELENBQUE7SUFDRCxNQUFNLEdBQUcsQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUE7QUFDckMsQ0FBQztBQVZELHNDQVVDO0FBU00sS0FBSyw0QkFDVixLQUF3QixFQUN4QixPQUFvQjtJQUVwQixFQUFFLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUE7SUFDMUIsQ0FBQztJQUNELE1BQU0sR0FBRyxHQUFHLE1BQU0sV0FBVyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQTtJQUMzQyxNQUFNLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO0lBRWpDLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDLG9CQUFvQixDQUFDLENBQUE7SUFDeEUsTUFBTSxTQUFTLEdBQUcsS0FBSyxJQUFJLEtBQUssQ0FBQyxVQUFXLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzVELEVBQUUsQ0FBQyxDQUFDLFNBQVMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLE9BQU8s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Q0FBQyxDQUFBO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vXG4vLyBtYXRoamF4LWhlbHBlclxuLy9cbi8vIFRoaXMgbW9kdWxlIHdpbGwgaGFuZGxlIGxvYWRpbmcgdGhlIE1hdGhKYXggZW52aXJvbm1lbnQgYW5kIHByb3ZpZGUgYSB3cmFwcGVyXG4vLyBmb3IgY2FsbHMgdG8gTWF0aEpheCB0byBwcm9jZXNzIExhVGVYIGVxdWF0aW9ucy5cbi8vXG5cbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpXG5pbXBvcnQgQ1NPTiA9IHJlcXVpcmUoJ3NlYXNvbicpXG5pbXBvcnQgZnMgPSByZXF1aXJlKCdmcycpXG5pbXBvcnQgeyBpc0ZpbGVTeW5jIH0gZnJvbSAnLi91dGlsJ1xuXG5sZXQgaXNNYXRoSmF4RGlzYWJsZWQgPSBmYWxzZVxuXG4vL1xuLy8gUHJvY2VzcyBET00gZWxlbWVudHMgZm9yIExhVGVYIGVxdWF0aW9ucyB3aXRoIE1hdGhKYXhcbi8vXG4vLyBAcGFyYW0gZG9tRWxlbWVudHMgQW4gYXJyYXkgb2YgRE9NIGVsZW1lbnRzIHRvIGJlIHByb2Nlc3NlZCBieSBNYXRoSmF4LiBTZWVcbi8vICAgW2VsZW1lbnRdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9lbGVtZW50KSBmb3Jcbi8vICAgZGV0YWlscyBvbiBET00gZWxlbWVudHMuXG4vL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1hdGhQcm9jZXNzb3IoXG4gIGZyYW1lOiBIVE1MSUZyYW1lRWxlbWVudCxcbiAgZG9tRWxlbWVudHM6IE5vZGVbXSxcbikge1xuICBpZiAoaXNNYXRoSmF4RGlzYWJsZWQpIHJldHVyblxuICBjb25zdCBqYXggPSBhd2FpdCBsb2FkTWF0aEpheChcbiAgICBmcmFtZSxcbiAgICBhdG9tLmNvbmZpZy5nZXQoJ21hcmtkb3duLXByZXZpZXctcGx1cy5sYXRleFJlbmRlcmVyJyksXG4gIClcbiAgYXdhaXQgamF4LnF1ZXVlVHlwZXNldChkb21FbGVtZW50cylcbn1cblxuLy9cbi8vIFByb2Nlc3MgbWF0aHMgaW4gSFRNTCBmcmFnbWVudCB3aXRoIE1hdGhKYXhcbi8vXG4vLyBAcGFyYW0gaHRtbCBBIEhUTUwgZnJhZ21lbnQgc3RyaW5nXG4vLyBAcGFyYW0gY2FsbGJhY2sgQSBjYWxsYmFjayBtZXRob2QgdGhhdCBhY2NlcHRzIGEgc2luZ2xlIHBhcmFtZXRlciwgYSBIVE1MXG4vLyAgIGZyYWdtZW50IHN0cmluZyB0aGF0IGlzIHRoZSByZXN1bHQgb2YgaHRtbCBwcm9jZXNzZWQgYnkgTWF0aEpheFxuLy9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcm9jZXNzSFRNTFN0cmluZyhcbiAgZnJhbWU6IEhUTUxJRnJhbWVFbGVtZW50LFxuICBlbGVtZW50OiBIVE1MRWxlbWVudCxcbikge1xuICBpZiAoaXNNYXRoSmF4RGlzYWJsZWQpIHtcbiAgICByZXR1cm4gZWxlbWVudC5pbm5lckhUTUxcbiAgfVxuICBjb25zdCBqYXggPSBhd2FpdCBsb2FkTWF0aEpheChmcmFtZSwgJ1NWRycpXG4gIGF3YWl0IGpheC5xdWV1ZVR5cGVzZXQoW2VsZW1lbnRdKVxuXG4gIGNvbnN0IG1zdmdoID0gZnJhbWUuY29udGVudERvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdNYXRoSmF4X1NWR19IaWRkZW4nKVxuICBjb25zdCBzdmdHbHlwaHMgPSBtc3ZnaCAmJiBtc3ZnaC5wYXJlbnROb2RlIS5jbG9uZU5vZGUodHJ1ZSlcbiAgaWYgKHN2Z0dseXBocyAhPT0gbnVsbCkge1xuICAgIGVsZW1lbnQuaW5zZXJ0QmVmb3JlKHN2Z0dseXBocywgZWxlbWVudC5maXJzdENoaWxkKVxuICB9XG4gIHJldHVybiBlbGVtZW50LmlubmVySFRNTFxufVxuXG4vLyBGb3IgdGVzdGluZ1xuZnVuY3Rpb24gZGlzYWJsZU1hdGhKYXgoZGlzYWJsZTogYm9vbGVhbikge1xuICBpc01hdGhKYXhEaXNhYmxlZCA9IGRpc2FibGVcbn1cblxuLy9cbi8vIExvYWQgTWF0aEpheCBlbnZpcm9ubWVudFxuLy9cbi8vIEBwYXJhbSBsaXN0ZW5lciBtZXRob2QgdG8gY2FsbCB3aGVuIHRoZSBNYXRoSmF4IHNjcmlwdCB3YXMgYmVlblxuLy8gICBsb2FkZWQgdG8gdGhlIHdpbmRvdy4gVGhlIG1ldGhvZCBpcyBwYXNzZWQgbm8gYXJndW1lbnRzLlxuLy9cbmFzeW5jIGZ1bmN0aW9uIGxvYWRNYXRoSmF4KFxuICBmcmFtZTogSFRNTElGcmFtZUVsZW1lbnQsXG4gIHJlbmRlcmVyOiBNYXRoSmF4UmVuZGVyZXIsXG4pOiBQcm9taXNlPE1hdGhKYXhTdHViPiB7XG4gIGlmIChmcmFtZS5jb250ZW50V2luZG93Lm1hdGhKYXhTdHViKSByZXR1cm4gZnJhbWUuY29udGVudFdpbmRvdy5tYXRoSmF4U3R1YlxuICBpZiAoZnJhbWUuY29udGVudERvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKSkge1xuICAgIHJldHVybiBhdHRhY2hNYXRoSmF4KGZyYW1lLCByZW5kZXJlcilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8TWF0aEpheFN0dWI+KChyZXNvbHZlKSA9PiB7XG4gICAgICBjb25zdCBvbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgIGZyYW1lLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBvbmxvYWQpXG4gICAgICAgIHJlc29sdmUobG9hZE1hdGhKYXgoZnJhbWUsIHJlbmRlcmVyKSlcbiAgICAgIH1cbiAgICAgIGZyYW1lLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBvbmxvYWQpXG4gICAgfSlcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgdGVzdGluZyA9IHtcbiAgbG9hZE1hdGhKYXgsXG4gIGRpc2FibGVNYXRoSmF4LFxufVxuXG4vLyBwcml2YXRlXG5cbi8vXG4vLyBEZWZpbmUgc29tZSBmdW5jdGlvbnMgdG8gaGVscCBnZXQgYSBob2xkIG9mIHRoZSB1c2VyJ3MgTGF0ZXhcbi8vIE1hY3Jvcy5cbi8vXG5jb25zdCBuYW1lUGF0dGVybiA9IG5ldyBSZWdFeHAoYFxcXG5eW15hLXpBLVpcXFxcZFxcXFxzXSRcXFxufFxcXG5eW2EtekEtWl0qJFxcXG5gKSAvLyBsZXR0ZXJzLCBidXQgbm8gbnVtZXJhbHMuXG5cbmZ1bmN0aW9uIGdldFVzZXJNYWNyb3NQYXRoKCk6IHN0cmluZyB7XG4gIGNvbnN0IHVzZXJNYWNyb3NQYXRoOiBzdHJpbmcgfCB1bmRlZmluZWQgfCBudWxsID0gQ1NPTi5yZXNvbHZlKFxuICAgIHBhdGguam9pbihhdG9tLmdldENvbmZpZ0RpclBhdGgoKSwgJ21hcmtkb3duLXByZXZpZXctcGx1cycpLFxuICApXG4gIHJldHVybiB1c2VyTWFjcm9zUGF0aCAhPSBudWxsXG4gICAgPyB1c2VyTWFjcm9zUGF0aFxuICAgIDogcGF0aC5qb2luKGF0b20uZ2V0Q29uZmlnRGlyUGF0aCgpLCAnbWFya2Rvd24tcHJldmlldy1wbHVzLmNzb24nKVxufVxuXG5mdW5jdGlvbiBsb2FkTWFjcm9zRmlsZShmaWxlUGF0aDogc3RyaW5nKTogb2JqZWN0IHtcbiAgaWYgKCFDU09OLmlzT2JqZWN0UGF0aChmaWxlUGF0aCkpIHtcbiAgICByZXR1cm4ge31cbiAgfVxuICByZXR1cm4gQ1NPTi5yZWFkRmlsZVN5bmMoZmlsZVBhdGgsIGZ1bmN0aW9uKGVycm9yPzogRXJyb3IsIG9iamVjdD86IG9iamVjdCkge1xuICAgIGlmIChvYmplY3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JqZWN0ID0ge31cbiAgICB9XG4gICAgaWYgKGVycm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgYEVycm9yIHJlYWRpbmcgTGF0ZXggTWFjcm9zIGZpbGUgJyR7ZmlsZVBhdGh9JzogJHtcbiAgICAgICAgICBlcnJvci5zdGFjayAhPT0gdW5kZWZpbmVkID8gZXJyb3Iuc3RhY2sgOiBlcnJvclxuICAgICAgICB9YCxcbiAgICAgIClcbiAgICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRFcnJvcihcbiAgICAgICAgYEZhaWxlZCB0byBsb2FkIExhdGV4IE1hY3JvcyBmcm9tICcke2ZpbGVQYXRofSdgLFxuICAgICAgICB7IGRldGFpbDogZXJyb3IubWVzc2FnZSwgZGlzbWlzc2FibGU6IHRydWUgfSxcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdFxuICB9KVxufVxuXG5mdW5jdGlvbiBsb2FkVXNlck1hY3JvcygpIHtcbiAgY29uc3QgdXNlck1hY3Jvc1BhdGggPSBnZXRVc2VyTWFjcm9zUGF0aCgpXG4gIGlmIChpc0ZpbGVTeW5jKHVzZXJNYWNyb3NQYXRoKSkge1xuICAgIHJldHVybiBsb2FkTWFjcm9zRmlsZSh1c2VyTWFjcm9zUGF0aClcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmRlYnVnKFxuICAgICAgJ0NyZWF0aW5nIG1hcmtkb3duLXByZXZpZXctcGx1cy5jc29uLCB0aGlzIGlzIGEgb25lLXRpbWUgb3BlcmF0aW9uLicsXG4gICAgKVxuICAgIGNyZWF0ZU1hY3Jvc1RlbXBsYXRlKHVzZXJNYWNyb3NQYXRoKVxuICAgIHJldHVybiBsb2FkTWFjcm9zRmlsZSh1c2VyTWFjcm9zUGF0aClcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVNYWNyb3NUZW1wbGF0ZShmaWxlUGF0aDogc3RyaW5nKSB7XG4gIGNvbnN0IHRlbXBsYXRlUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi9hc3NldHMvbWFjcm9zLXRlbXBsYXRlLmNzb24nKVxuICBjb25zdCB0ZW1wbGF0ZUZpbGUgPSBmcy5yZWFkRmlsZVN5bmModGVtcGxhdGVQYXRoLCAndXRmOCcpXG4gIGZzLndyaXRlRmlsZVN5bmMoZmlsZVBhdGgsIHRlbXBsYXRlRmlsZSlcbn1cblxuZnVuY3Rpb24gY2hlY2tNYWNyb3MobWFjcm9zT2JqZWN0OiBvYmplY3QpIHtcbiAgZm9yIChjb25zdCBuYW1lIGluIG1hY3Jvc09iamVjdCkge1xuICAgIGNvbnN0IHZhbHVlID0gbWFjcm9zT2JqZWN0W25hbWVdXG4gICAgaWYgKCFuYW1lLm1hdGNoKG5hbWVQYXR0ZXJuKSB8fCAhdmFsdWVNYXRjaGVzUGF0dGVybih2YWx1ZSkpIHtcbiAgICAgIGRlbGV0ZSBtYWNyb3NPYmplY3RbbmFtZV1cbiAgICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRFcnJvcihcbiAgICAgICAgYEZhaWxlZCB0byBsb2FkIExhVGVYIG1hY3JvIG5hbWVkICcke25hbWV9Jy4gUGxlYXNlIHNlZSB0aGUgW0xhVGVYIGd1aWRlXShodHRwczovL2dpdGh1Yi5jb20vR2FsYWRpcml0aC9tYXJrZG93bi1wcmV2aWV3LXBsdXMvYmxvYi9tYXN0ZXIvTEFURVgubWQjbWFjcm8tbmFtZXMpYCxcbiAgICAgICAgeyBkaXNtaXNzYWJsZTogdHJ1ZSB9LFxuICAgICAgKVxuICAgIH1cbiAgfVxuICByZXR1cm4gbWFjcm9zT2JqZWN0XG59XG5cbmZ1bmN0aW9uIHZhbHVlTWF0Y2hlc1BhdHRlcm4odmFsdWU6IGFueSkge1xuICAvLyBEaWZmZXJlbnQgY2hlY2sgYmFzZWQgb24gd2hldGhlciB2YWx1ZSBpcyBzdHJpbmcgb3IgYXJyYXlcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgY29uc3QgbWFjcm9EZWZpbml0aW9uID0gdmFsdWVbMF1cbiAgICBjb25zdCBudW1iZXJPZkFyZ3MgPSB2YWx1ZVsxXVxuICAgIGlmICh0eXBlb2YgbnVtYmVyT2ZBcmdzID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIG51bWJlck9mQXJncyAlIDEgPT09IDAgJiYgdHlwZW9mIG1hY3JvRGVmaW5pdGlvbiA9PT0gJ3N0cmluZydcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbi8vIENvbmZpZ3VyZSBNYXRoSmF4IGVudmlyb25tZW50LiBTaW1pbGFyIHRvIHRoZSBUZVgtQU1TX0hUTUwgY29uZmlndXJhdGlvbiB3aXRoXG4vLyBhIGZldyB1bm5lY2Vzc2FyeSBmZWF0dXJlcyBzdHJpcHBlZCBhd2F5XG4vL1xuY29uc3QgY29uZmlndXJlTWF0aEpheCA9IGZ1bmN0aW9uKGpheDogTWF0aEpheFN0dWIsIHJlbmRlcmVyOiBNYXRoSmF4UmVuZGVyZXIpIHtcbiAgbGV0IHVzZXJNYWNyb3MgPSBsb2FkVXNlck1hY3JvcygpXG4gIGlmICh1c2VyTWFjcm9zKSB7XG4gICAgdXNlck1hY3JvcyA9IGNoZWNrTWFjcm9zKHVzZXJNYWNyb3MpXG4gIH0gZWxzZSB7XG4gICAgdXNlck1hY3JvcyA9IHt9XG4gIH1cblxuICBqYXguamF4Q29uZmlndXJlKHVzZXJNYWNyb3MsIHJlbmRlcmVyKVxuXG4gIC8vIE5vdGlmeSB1c2VyIE1hdGhKYXggaGFzIGxvYWRlZFxuICBpZiAoYXRvbS5pbkRldk1vZGUoKSkge1xuICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRTdWNjZXNzKCdMb2FkZWQgbWF0aHMgcmVuZGVyaW5nIGVuZ2luZSBNYXRoSmF4JylcbiAgfVxufVxuXG4vL1xuLy8gQXR0YWNoIG1haW4gTWF0aEpheCBzY3JpcHQgdG8gdGhlIGRvY3VtZW50XG4vL1xuYXN5bmMgZnVuY3Rpb24gYXR0YWNoTWF0aEpheChcbiAgZnJhbWU6IEhUTUxJRnJhbWVFbGVtZW50LFxuICByZW5kZXJlcjogTWF0aEpheFJlbmRlcmVyLFxuKTogUHJvbWlzZTxNYXRoSmF4U3R1Yj4ge1xuICAvLyBOb3RpZnkgdXNlciBNYXRoSmF4IGlzIGxvYWRpbmdcbiAgaWYgKGF0b20uaW5EZXZNb2RlKCkpIHtcbiAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkSW5mbygnTG9hZGluZyBtYXRocyByZW5kZXJpbmcgZW5naW5lIE1hdGhKYXgnKVxuICB9XG5cbiAgLy8gQXR0YWNoIE1hdGhKYXggc2NyaXB0XG4gIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICBpbmplY3RTY3JpcHQoXG4gICAgICBmcmFtZS5jb250ZW50RG9jdW1lbnQsXG4gICAgICBgJHtyZXF1aXJlLnJlc29sdmUoJ01hdGhKYXgnKX0/ZGVsYXlTdGFydHVwVW50aWw9Y29uZmlndXJlZGAsXG4gICAgKSxcbiAgICBpbmplY3RTY3JpcHQoZnJhbWUuY29udGVudERvY3VtZW50LCByZXF1aXJlLnJlc29sdmUoJy4vbWF0aGpheC1zdHViJykpLFxuICBdKVxuICBjb25maWd1cmVNYXRoSmF4KGZyYW1lLmNvbnRlbnRXaW5kb3cubWF0aEpheFN0dWIsIHJlbmRlcmVyKVxuICByZXR1cm4gZnJhbWUuY29udGVudFdpbmRvdy5tYXRoSmF4U3R1YlxufVxuXG5hc3luYyBmdW5jdGlvbiBpbmplY3RTY3JpcHQoZG9jOiBIVE1MRG9jdW1lbnQsIHNjcmlwdFNyYzogc3RyaW5nKSB7XG4gIGNvbnN0IHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKVxuICBzY3JpcHQuc3JjID0gc2NyaXB0U3JjXG4gIHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCdcbiAgZG9jLmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KVxuICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUpID0+IHtcbiAgICBzY3JpcHQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHJlc29sdmUoKSlcbiAgfSlcbn1cbiJdfQ==