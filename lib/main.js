"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const url = require("url");
const fs = require("fs-plus");
const markdown_preview_view_1 = require("./markdown-preview-view");
const renderer = require("./renderer");
const mathjaxHelper = require("./mathjax-helper");
const cast_1 = require("./cast");
const atom_1 = require("atom");
const util_1 = require("./util");
var config_1 = require("./config");
exports.config = config_1.config;
let disposables;
function activate() {
    disposables = new atom_1.CompositeDisposable();
    disposables.add(atom.commands.add('atom-workspace', {
        'markdown-preview-plus:toggle-break-on-single-newline'() {
            const keyPath = 'markdown-preview-plus.breakOnSingleNewline';
            atom.config.set(keyPath, !atom.config.get(keyPath));
        },
    }), atom.commands.add('atom-text-editor', {
        'markdown-preview-plus:toggle': (e) => {
            toggle(e.currentTarget.getModel());
        },
        'markdown-preview-plus:copy-html': (e) => {
            util_1.handlePromise(copyHtml(e.currentTarget.getModel()));
        },
    }), atom.commands.add('.markdown-preview', {
        'markdown-preview-plus:toggle': close,
    }), atom.commands.add('.tree-view .file .name[data-name$=\\.markdown]', 'markdown-preview-plus:preview-file', previewFile), atom.commands.add('.tree-view .file .name[data-name$=\\.md]', 'markdown-preview-plus:preview-file', previewFile), atom.commands.add('.tree-view .file .name[data-name$=\\.mdown]', 'markdown-preview-plus:preview-file', previewFile), atom.commands.add('.tree-view .file .name[data-name$=\\.mkd]', 'markdown-preview-plus:preview-file', previewFile), atom.commands.add('.tree-view .file .name[data-name$=\\.mkdown]', 'markdown-preview-plus:preview-file', previewFile), atom.commands.add('.tree-view .file .name[data-name$=\\.ron]', 'markdown-preview-plus:preview-file', previewFile), atom.commands.add('.tree-view .file .name[data-name$=\\.txt]', 'markdown-preview-plus:preview-file', previewFile), atom.workspace.addOpener((uriToOpen) => {
        try {
            var { protocol, host, pathname } = url.parse(uriToOpen);
        }
        catch (e) {
            console.error(e);
            return undefined;
        }
        if (protocol !== 'markdown-preview-plus:')
            return undefined;
        if (pathname === undefined)
            return undefined;
        try {
            pathname = decodeURI(pathname);
        }
        catch (e) {
            console.error(e);
            return undefined;
        }
        if (host === 'editor') {
            return new markdown_preview_view_1.MarkdownPreviewView({
                editorId: parseInt(pathname.substring(1), 10),
            });
        }
        else {
            return new markdown_preview_view_1.MarkdownPreviewView({ filePath: pathname });
        }
    }));
}
exports.activate = activate;
function deactivate() {
    disposables && disposables.dispose();
}
exports.deactivate = deactivate;
function createMarkdownPreviewView(state) {
    if (state.editorId !== undefined ||
        (state.filePath && fs.isFileSync(state.filePath))) {
        return new markdown_preview_view_1.MarkdownPreviewView(state, true);
    }
    return undefined;
}
exports.createMarkdownPreviewView = createMarkdownPreviewView;
async function close(event) {
    const item = event.currentTarget.getModel();
    const pane = atom.workspace.paneForItem(item);
    if (!pane)
        return undefined;
    return pane.destroyItem(item);
}
function toggle(editor) {
    const grammars = atom.config.get('markdown-preview-plus.grammars') || [];
    const scope = editor.getGrammar().scopeName;
    if (!grammars.includes(scope)) {
        return;
    }
    if (!removePreviewForEditor(editor)) {
        addPreviewForEditor(editor);
    }
}
exports.toggle = toggle;
function uriForEditor(editor) {
    return `markdown-preview-plus://editor/${editor.id}`;
}
exports.uriForEditor = uriForEditor;
function removePreviewForEditor(editor) {
    const uri = uriForEditor(editor);
    const previewPane = atom.workspace.paneForURI(uri);
    if (previewPane !== undefined) {
        const preview = previewPane.itemForURI(uri);
        if (preview === undefined)
            return false;
        if (preview !== previewPane.getActiveItem()) {
            previewPane.activateItem(preview);
            return false;
        }
        util_1.handlePromise(previewPane.destroyItem(preview));
        return true;
    }
    else {
        return false;
    }
}
exports.removePreviewForEditor = removePreviewForEditor;
function addPreviewForEditor(editor) {
    const uri = uriForEditor(editor);
    const previousActivePane = atom.workspace.getActivePane();
    const options = { searchAllPanes: true };
    if (atom.config.get('markdown-preview-plus.openPreviewInSplitPane')) {
        options.split = atom.config.get('markdown-preview-plus.previewSplitPaneDir');
    }
    util_1.handlePromise(atom.workspace.open(uri, options).then(function (markdownPreviewView) {
        if (cast_1.isMarkdownPreviewView(markdownPreviewView)) {
            previousActivePane.activate();
        }
    }));
}
exports.addPreviewForEditor = addPreviewForEditor;
function previewFile({ currentTarget }) {
    const filePath = currentTarget.dataset.path;
    if (!filePath) {
        return;
    }
    for (const editor of atom.workspace.getTextEditors()) {
        if (editor.getPath() === filePath) {
            addPreviewForEditor(editor);
            return;
        }
    }
    util_1.handlePromise(atom.workspace.open(`markdown-preview-plus://${encodeURI(filePath)}`, {
        searchAllPanes: true,
    }));
}
exports.previewFile = previewFile;
const clipboardCopy = (text) => {
    atom.clipboard.write(text);
};
async function copyHtml(editor, callback = clipboardCopy, scaleMath = 100) {
    const text = editor.getSelectedText() || editor.getText();
    const renderLaTeX = atom.config.get('markdown-preview-plus.enableLatexRenderingByDefault');
    return renderer.toHTML(text, editor.getPath(), editor.getGrammar(), !!renderLaTeX, true, function (error, html) {
        if (error) {
            console.warn('Copying Markdown as HTML failed', error);
        }
        else if (renderLaTeX) {
            mathjaxHelper.processHTMLString(html, function (proHTML) {
                proHTML = proHTML.replace(/MathJax\_SVG.*?font\-size\: 100%/g, (match) => match.replace(/font\-size\: 100%/, `font-size: ${scaleMath}%`));
                callback(proHTML);
            });
        }
        else {
            callback(html);
        }
    });
}
exports.copyHtml = copyHtml;
//# sourceMappingURL=data:application/json;base64,