"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const url = require("url");
const fs = require("fs-plus");
const markdown_preview_view_1 = require("./markdown-preview-view");
const renderer = require("./renderer");
const mathjaxHelper = require("./mathjax-helper");
const cast_1 = require("./cast");
var config_1 = require("./config");
exports.config = config_1.config;
function activate() {
    atom.commands.add('atom-workspace', {
        'markdown-preview-plus:toggle': toggle,
        'markdown-preview-plus:copy-html': () => {
            copyHtml();
        },
        'markdown-preview-plus:toggle-break-on-single-newline'() {
            const keyPath = 'markdown-preview-plus.breakOnSingleNewline';
            atom.config.set(keyPath, !atom.config.get(keyPath));
        },
    });
    atom.commands.add('.tree-view .file .name[data-name$=\\.markdown]', 'markdown-preview-plus:preview-file', previewFile);
    atom.commands.add('.tree-view .file .name[data-name$=\\.md]', 'markdown-preview-plus:preview-file', previewFile);
    atom.commands.add('.tree-view .file .name[data-name$=\\.mdown]', 'markdown-preview-plus:preview-file', previewFile);
    atom.commands.add('.tree-view .file .name[data-name$=\\.mkd]', 'markdown-preview-plus:preview-file', previewFile);
    atom.commands.add('.tree-view .file .name[data-name$=\\.mkdown]', 'markdown-preview-plus:preview-file', previewFile);
    atom.commands.add('.tree-view .file .name[data-name$=\\.ron]', 'markdown-preview-plus:preview-file', previewFile);
    atom.commands.add('.tree-view .file .name[data-name$=\\.txt]', 'markdown-preview-plus:preview-file', previewFile);
    atom.workspace.addOpener((uriToOpen) => {
        try {
            var { protocol, host, pathname } = url.parse(uriToOpen);
        }
        catch (e) {
            console.error(e);
            return undefined;
        }
        if (protocol !== 'markdown-preview-plus:')
            return undefined;
        if (pathname === undefined)
            return undefined;
        try {
            pathname = decodeURI(pathname);
        }
        catch (e) {
            console.error(e);
            return undefined;
        }
        if (host === 'editor') {
            return createMarkdownPreviewView({
                editorId: parseInt(pathname.substring(1), 10),
            });
        }
        else {
            return createMarkdownPreviewView({ filePath: pathname });
        }
    });
}
exports.activate = activate;
function createMarkdownPreviewView(state) {
    if (state.editorId !== undefined ||
        (state.filePath && fs.isFileSync(state.filePath))) {
        return new markdown_preview_view_1.MarkdownPreviewView(state);
    }
    return undefined;
}
exports.createMarkdownPreviewView = createMarkdownPreviewView;
function toggle() {
    if (cast_1.isMarkdownPreviewView(atom.workspace.getActivePaneItem())) {
        atom.workspace.destroyActivePaneItem();
        return;
    }
    const editor = atom.workspace.getActiveTextEditor();
    if (editor === undefined) {
        return;
    }
    const grammars = atom.config.get('markdown-preview-plus.grammars') || [];
    const scope = editor.getGrammar().scopeName;
    if (!grammars.includes(scope)) {
        return;
    }
    if (!removePreviewForEditor(editor)) {
        addPreviewForEditor(editor);
    }
}
exports.toggle = toggle;
function uriForEditor(editor) {
    return `markdown-preview-plus://editor/${editor.id}`;
}
exports.uriForEditor = uriForEditor;
function removePreviewForEditor(editor) {
    const uri = uriForEditor(editor);
    const previewPane = atom.workspace.paneForURI(uri);
    if (previewPane !== undefined) {
        const preview = previewPane.itemForURI(uri);
        if (preview === undefined)
            return false;
        if (preview !== previewPane.getActiveItem()) {
            previewPane.activateItem(preview);
            return false;
        }
        previewPane.destroyItem(preview);
        return true;
    }
    else {
        return false;
    }
}
exports.removePreviewForEditor = removePreviewForEditor;
function addPreviewForEditor(editor) {
    const uri = uriForEditor(editor);
    const previousActivePane = atom.workspace.getActivePane();
    const options = { searchAllPanes: true };
    if (atom.config.get('markdown-preview-plus.openPreviewInSplitPane')) {
        options.split = atom.config.get('markdown-preview-plus.previewSplitPaneDir');
    }
    atom.workspace.open(uri, options).then(function (markdownPreviewView) {
        if (cast_1.isMarkdownPreviewView(markdownPreviewView)) {
            previousActivePane.activate();
        }
    });
}
exports.addPreviewForEditor = addPreviewForEditor;
function previewFile({ currentTarget }) {
    const filePath = currentTarget.dataset.path;
    if (!filePath) {
        return;
    }
    for (const editor of atom.workspace.getTextEditors()) {
        if (editor.getPath() === filePath) {
            addPreviewForEditor(editor);
            return;
        }
    }
    atom.workspace.open(`markdown-preview-plus://${encodeURI(filePath)}`, {
        searchAllPanes: true,
    });
}
exports.previewFile = previewFile;
const clipboardCopy = (text) => {
    atom.clipboard.write(text);
};
function copyHtml(callback = clipboardCopy, scaleMath = 100) {
    const editor = atom.workspace.getActiveTextEditor();
    if (editor === undefined) {
        return;
    }
    const text = editor.getSelectedText() || editor.getText();
    const renderLaTeX = atom.config.get('markdown-preview-plus.enableLatexRenderingByDefault');
    renderer.toHTML(text, editor.getPath(), editor.getGrammar(), !!renderLaTeX, true, function (error, html) {
        if (error) {
            console.warn('Copying Markdown as HTML failed', error);
        }
        else if (renderLaTeX) {
            mathjaxHelper.processHTMLString(html, function (proHTML) {
                proHTML = proHTML.replace(/MathJax\_SVG.*?font\-size\: 100%/g, (match) => match.replace(/font\-size\: 100%/, `font-size: ${scaleMath}%`));
                callback(proHTML);
            });
        }
        else {
            callback(html);
        }
    });
}
exports.copyHtml = copyHtml;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkJBQTJCO0FBQzNCLDhCQUE4QjtBQUU5QixtRUFBd0U7QUFDeEUsdUNBQXVDO0FBQ3ZDLGtEQUFrRDtBQUNsRCxpQ0FBOEM7QUFHOUMsbUNBQWlDO0FBQXhCLDBCQUFBLE1BQU0sQ0FBQTtBQUVmO0lBQ0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUU7UUFDbEMsOEJBQThCLEVBQUUsTUFBTTtRQUN0QyxpQ0FBaUMsRUFBRSxHQUFHLEVBQUU7WUFDdEMsUUFBUSxFQUFFLENBQUE7UUFDWixDQUFDO1FBQ0Qsc0RBQXNEO1lBQ3BELE1BQU0sT0FBTyxHQUFHLDRDQUE0QyxDQUFBO1lBQzVELElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUE7UUFDckQsQ0FBQztLQUNGLENBQUMsQ0FBQTtJQUVGLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUNmLGdEQUFnRCxFQUNoRCxvQ0FBb0MsRUFDcEMsV0FBVyxDQUNaLENBQUE7SUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FDZiwwQ0FBMEMsRUFDMUMsb0NBQW9DLEVBQ3BDLFdBQVcsQ0FDWixDQUFBO0lBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQ2YsNkNBQTZDLEVBQzdDLG9DQUFvQyxFQUNwQyxXQUFXLENBQ1osQ0FBQTtJQUNELElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUNmLDJDQUEyQyxFQUMzQyxvQ0FBb0MsRUFDcEMsV0FBVyxDQUNaLENBQUE7SUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FDZiw4Q0FBOEMsRUFDOUMsb0NBQW9DLEVBQ3BDLFdBQVcsQ0FDWixDQUFBO0lB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LEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FDdkIsbUNBQW1DLEVBQ25DLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FDUixLQUFLLENBQUMsT0FBTyxDQUFDLG1CQUFtQixFQUFFLGNBQWMsU0FBUyxHQUFHLENBQUMsQ0FDakUsQ0FBQTtnQkFDRCxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUE7WUFDbkIsQ0FBQyxDQUFDLENBQUE7UUFDSixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixRQUFRLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDaEIsQ0FBQztJQUNILENBQUMsQ0FDRixDQUFBO0FBQ0gsQ0FBQztBQXBDRCw0QkFvQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdXJsID0gcmVxdWlyZSgndXJsJylcbmltcG9ydCBmcyA9IHJlcXVpcmUoJ2ZzLXBsdXMnKVxuXG5pbXBvcnQgeyBNYXJrZG93blByZXZpZXdWaWV3LCBNUFZQYXJhbXMgfSBmcm9tICcuL21hcmtkb3duLXByZXZpZXctdmlldydcbmltcG9ydCByZW5kZXJlciA9IHJlcXVpcmUoJy4vcmVuZGVyZXInKVxuaW1wb3J0IG1hdGhqYXhIZWxwZXIgPSByZXF1aXJlKCcuL21hdGhqYXgtaGVscGVyJylcbmltcG9ydCB7IGlzTWFya2Rvd25QcmV2aWV3VmlldyB9IGZyb20gJy4vY2FzdCdcbmltcG9ydCB7IFRleHRFZGl0b3IsIFdvcmtzcGFjZU9wZW5PcHRpb25zLCBDb21tYW5kRXZlbnQgfSBmcm9tICdhdG9tJ1xuXG5leHBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZydcblxuZXhwb3J0IGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICBhdG9tLmNvbW1hbmRzLmFkZCgnYXRvbS13b3Jrc3BhY2UnLCB7XG4gICAgJ21hcmtkb3duLXByZXZpZXctcGx1czp0b2dnbGUnOiB0b2dnbGUsXG4gICAgJ21hcmtkb3duLXByZXZpZXctcGx1czpjb3B5LWh0bWwnOiAoKSA9PiB7XG4gICAgICBjb3B5SHRtbCgpXG4gICAgfSxcbiAgICAnbWFya2Rvd24tcHJldmlldy1wbHVzOnRvZ2dsZS1icmVhay1vbi1zaW5nbGUtbmV3bGluZScoKSB7XG4gICAgICBjb25zdCBrZXlQYXRoID0gJ21hcmtkb3duLXByZXZpZXctcGx1cy5icmVha09uU2luZ2xlTmV3bGluZSdcbiAgICAgIGF0b20uY29uZmlnLnNldChrZXlQYXRoLCAhYXRvbS5jb25maWcuZ2V0KGtleVBhdGgpKVxuICAgIH0sXG4gIH0pXG5cbiAgYXRvbS5jb21tYW5kcy5hZGQoXG4gICAgJy50cmVlLXZpZXcgLmZpbGUgLm5hbWVbZGF0YS1uYW1lJD1cXFxcLm1hcmtkb3duXScsXG4gICAgJ21hcmtkb3duLXByZXZpZXctcGx1czpwcmV2aWV3LWZpbGUnLFxuICAgIHByZXZpZXdGaWxlLFxuICApXG4gIGF0b20uY29tbWFuZHMuYWRkKFxuICAgICcudHJlZS12aWV3IC5maWxlIC5uYW1lW2RhdGEtbmFtZSQ9XFxcXC5tZF0nLFxuICAgICdtYXJrZG93bi1wcmV2aWV3LXBsdXM6cHJldmlldy1maWxlJyxcbiAgICBwcmV2aWV3RmlsZSxcbiAgKVxuICBhdG9tLmNvbW1hbmRzLmFkZChcbiAgICAnLnRyZWUtdmlldyAuZmlsZSAubmFtZVtkYXRhLW5hbWUkPVxcXFwubWRvd25dJyxcbiAgICAnbWFya2Rvd24tcHJldmlldy1wbHVzOnByZXZpZXctZmlsZScsXG4gICAgcHJldmlld0ZpbGUsXG4gIClcbiAgYXRvbS5jb21tYW5kcy5hZGQoXG4gICAgJy50cmVlLXZpZXcgLmZpbGUgLm5hbWVbZGF0YS1uYW1lJD1cXFxcLm1rZF0nLFxuICAgICdtYXJrZG93bi1wcmV2aWV3LXBsdXM6cHJldmlldy1maWxlJyxcbiAgICBwcmV2aWV3RmlsZSxcbiAgKVxuICBhdG9tLmNvbW1hbmRzLmFkZChcbiAgICAnLnRyZWUtdmlldyAuZmlsZSAubmFtZVtkYXRhLW5hbWUkPVxcXFwubWtkb3duXScsXG4gICAgJ21hcmtkb3duLXByZXZpZXctcGx1czpwcmV2aWV3LWZpbGUnLFxuICAgIHByZXZpZXdGaWxlLFxuICApXG4gIGF0b20uY29tbWFuZHMuYWRkKFxuICAgICcudHJlZS12aWV3IC5maWxlIC5uYW1lW2RhdGEtbmFtZSQ9XFxcXC5yb25dJyxcbiAgICAnbWFya2Rvd24tcHJldmlldy1wbHVzOnByZXZpZXctZmlsZScsXG4gICAgcHJldmlld0ZpbGUsXG4gIClcbiAgYXRvbS5jb21tYW5kcy5hZGQoXG4gICAgJy50cmVlLXZpZXcgLmZpbGUgLm5hbWVbZGF0YS1uYW1lJD1cXFxcLnR4dF0nLFxuICAgICdtYXJrZG93bi1wcmV2aWV3LXBsdXM6cHJldmlldy1maWxlJyxcbiAgICBwcmV2aWV3RmlsZSxcbiAgKVxuXG4gIGF0b20ud29ya3NwYWNlLmFkZE9wZW5lcigodXJpVG9PcGVuKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby12YXIta2V5d29yZCBwcmVmZXItY29uc3RcbiAgICAgIHZhciB7IHByb3RvY29sLCBob3N0LCBwYXRobmFtZSB9ID0gdXJsLnBhcnNlKHVyaVRvT3BlbilcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGUpXG4gICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfVxuXG4gICAgaWYgKHByb3RvY29sICE9PSAnbWFya2Rvd24tcHJldmlldy1wbHVzOicpIHJldHVybiB1bmRlZmluZWRcbiAgICBpZiAocGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHVuZGVmaW5lZFxuXG4gICAgdHJ5IHtcbiAgICAgIHBhdGhuYW1lID0gZGVjb2RlVVJJKHBhdGhuYW1lKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSlcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG5cbiAgICBpZiAoaG9zdCA9PT0gJ2VkaXRvcicpIHtcbiAgICAgIHJldHVybiBjcmVhdGVNYXJrZG93blByZXZpZXdWaWV3KHtcbiAgICAgICAgZWRpdG9ySWQ6IHBhcnNlSW50KHBhdGhuYW1lLnN1YnN0cmluZygxKSwgMTApLFxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNyZWF0ZU1hcmtkb3duUHJldmlld1ZpZXcoeyBmaWxlUGF0aDogcGF0aG5hbWUgfSlcbiAgICB9XG4gIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNYXJrZG93blByZXZpZXdWaWV3KHN0YXRlOiBNUFZQYXJhbXMpIHtcbiAgaWYgKFxuICAgIHN0YXRlLmVkaXRvcklkICE9PSB1bmRlZmluZWQgfHxcbiAgICAoc3RhdGUuZmlsZVBhdGggJiYgZnMuaXNGaWxlU3luYyhzdGF0ZS5maWxlUGF0aCkpXG4gICkge1xuICAgIHJldHVybiBuZXcgTWFya2Rvd25QcmV2aWV3VmlldyhzdGF0ZSlcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gIGlmIChpc01hcmtkb3duUHJldmlld1ZpZXcoYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlUGFuZUl0ZW0oKSkpIHtcbiAgICBhdG9tLndvcmtzcGFjZS5kZXN0cm95QWN0aXZlUGFuZUl0ZW0oKVxuICAgIHJldHVyblxuICB9XG5cbiAgY29uc3QgZWRpdG9yID0gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpXG4gIGlmIChlZGl0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgY29uc3QgZ3JhbW1hcnMgPSBhdG9tLmNvbmZpZy5nZXQoJ21hcmtkb3duLXByZXZpZXctcGx1cy5ncmFtbWFycycpIHx8IFtdXG4gIGNvbnN0IHNjb3BlID0gZWRpdG9yLmdldEdyYW1tYXIoKS5zY29wZU5hbWVcbiAgaWYgKCFncmFtbWFycy5pbmNsdWRlcyhzY29wZSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmICghcmVtb3ZlUHJldmlld0ZvckVkaXRvcihlZGl0b3IpKSB7XG4gICAgYWRkUHJldmlld0ZvckVkaXRvcihlZGl0b3IpXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVyaUZvckVkaXRvcihlZGl0b3I6IFRleHRFZGl0b3IpIHtcbiAgcmV0dXJuIGBtYXJrZG93bi1wcmV2aWV3LXBsdXM6Ly9lZGl0b3IvJHtlZGl0b3IuaWR9YFxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlUHJldmlld0ZvckVkaXRvcihlZGl0b3I6IFRleHRFZGl0b3IpIHtcbiAgY29uc3QgdXJpID0gdXJpRm9yRWRpdG9yKGVkaXRvcilcbiAgY29uc3QgcHJldmlld1BhbmUgPSBhdG9tLndvcmtzcGFjZS5wYW5lRm9yVVJJKHVyaSlcbiAgaWYgKHByZXZpZXdQYW5lICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBwcmV2aWV3ID0gcHJldmlld1BhbmUuaXRlbUZvclVSSSh1cmkpXG4gICAgaWYgKHByZXZpZXcgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZhbHNlXG4gICAgaWYgKHByZXZpZXcgIT09IHByZXZpZXdQYW5lLmdldEFjdGl2ZUl0ZW0oKSkge1xuICAgICAgcHJldmlld1BhbmUuYWN0aXZhdGVJdGVtKHByZXZpZXcpXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWZsb2F0aW5nLXByb21pc2VzXG4gICAgcHJldmlld1BhbmUuZGVzdHJveUl0ZW0ocHJldmlldylcbiAgICByZXR1cm4gdHJ1ZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRQcmV2aWV3Rm9yRWRpdG9yKGVkaXRvcjogVGV4dEVkaXRvcikge1xuICBjb25zdCB1cmkgPSB1cmlGb3JFZGl0b3IoZWRpdG9yKVxuICBjb25zdCBwcmV2aW91c0FjdGl2ZVBhbmUgPSBhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVQYW5lKClcbiAgY29uc3Qgb3B0aW9uczogV29ya3NwYWNlT3Blbk9wdGlvbnMgPSB7IHNlYXJjaEFsbFBhbmVzOiB0cnVlIH1cbiAgaWYgKGF0b20uY29uZmlnLmdldCgnbWFya2Rvd24tcHJldmlldy1wbHVzLm9wZW5QcmV2aWV3SW5TcGxpdFBhbmUnKSkge1xuICAgIG9wdGlvbnMuc3BsaXQgPSBhdG9tLmNvbmZpZy5nZXQoXG4gICAgICAnbWFya2Rvd24tcHJldmlldy1wbHVzLnByZXZpZXdTcGxpdFBhbmVEaXInLFxuICAgICkhXG4gIH1cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWZsb2F0aW5nLXByb21pc2VzXG4gIGF0b20ud29ya3NwYWNlLm9wZW4odXJpLCBvcHRpb25zKS50aGVuKGZ1bmN0aW9uKG1hcmtkb3duUHJldmlld1ZpZXcpIHtcbiAgICBpZiAoaXNNYXJrZG93blByZXZpZXdWaWV3KG1hcmtkb3duUHJldmlld1ZpZXcpKSB7XG4gICAgICBwcmV2aW91c0FjdGl2ZVBhbmUuYWN0aXZhdGUoKVxuICAgIH1cbiAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXZpZXdGaWxlKHsgY3VycmVudFRhcmdldCB9OiBDb21tYW5kRXZlbnQpIHtcbiAgY29uc3QgZmlsZVBhdGggPSAoY3VycmVudFRhcmdldCBhcyBIVE1MRWxlbWVudCkuZGF0YXNldC5wYXRoXG4gIGlmICghZmlsZVBhdGgpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGZvciAoY29uc3QgZWRpdG9yIG9mIGF0b20ud29ya3NwYWNlLmdldFRleHRFZGl0b3JzKCkpIHtcbiAgICBpZiAoZWRpdG9yLmdldFBhdGgoKSA9PT0gZmlsZVBhdGgpIHtcbiAgICAgIGFkZFByZXZpZXdGb3JFZGl0b3IoZWRpdG9yKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICB9XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWZsb2F0aW5nLXByb21pc2VzXG4gIGF0b20ud29ya3NwYWNlLm9wZW4oYG1hcmtkb3duLXByZXZpZXctcGx1czovLyR7ZW5jb2RlVVJJKGZpbGVQYXRoKX1gLCB7XG4gICAgc2VhcmNoQWxsUGFuZXM6IHRydWUsXG4gIH0pXG59XG5cbmNvbnN0IGNsaXBib2FyZENvcHkgPSAodGV4dDogc3RyaW5nKSA9PiB7XG4gIGF0b20uY2xpcGJvYXJkLndyaXRlKHRleHQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5SHRtbChcbiAgY2FsbGJhY2s6ICh0ZXh0OiBzdHJpbmcpID0+IGFueSA9IGNsaXBib2FyZENvcHksXG4gIHNjYWxlTWF0aCA9IDEwMCxcbik6IHZvaWQge1xuICBjb25zdCBlZGl0b3IgPSBhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVUZXh0RWRpdG9yKClcbiAgaWYgKGVkaXRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBjb25zdCB0ZXh0ID0gZWRpdG9yLmdldFNlbGVjdGVkVGV4dCgpIHx8IGVkaXRvci5nZXRUZXh0KClcbiAgY29uc3QgcmVuZGVyTGFUZVggPSBhdG9tLmNvbmZpZy5nZXQoXG4gICAgJ21hcmtkb3duLXByZXZpZXctcGx1cy5lbmFibGVMYXRleFJlbmRlcmluZ0J5RGVmYXVsdCcsXG4gIClcbiAgcmVuZGVyZXIudG9IVE1MKFxuICAgIHRleHQsXG4gICAgZWRpdG9yLmdldFBhdGgoKSxcbiAgICBlZGl0b3IuZ2V0R3JhbW1hcigpLFxuICAgICEhcmVuZGVyTGFUZVgsXG4gICAgdHJ1ZSxcbiAgICBmdW5jdGlvbihlcnJvcjogRXJyb3IgfCBudWxsLCBodG1sOiBzdHJpbmcpIHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0NvcHlpbmcgTWFya2Rvd24gYXMgSFRNTCBmYWlsZWQnLCBlcnJvcilcbiAgICAgIH0gZWxzZSBpZiAocmVuZGVyTGFUZVgpIHtcbiAgICAgICAgbWF0aGpheEhlbHBlci5wcm9jZXNzSFRNTFN0cmluZyhodG1sLCBmdW5jdGlvbihwcm9IVE1MOiBzdHJpbmcpIHtcbiAgICAgICAgICBwcm9IVE1MID0gcHJvSFRNTC5yZXBsYWNlKFxuICAgICAgICAgICAgL01hdGhKYXhcXF9TVkcuKj9mb250XFwtc2l6ZVxcOiAxMDAlL2csXG4gICAgICAgICAgICAobWF0Y2gpID0+XG4gICAgICAgICAgICAgIG1hdGNoLnJlcGxhY2UoL2ZvbnRcXC1zaXplXFw6IDEwMCUvLCBgZm9udC1zaXplOiAke3NjYWxlTWF0aH0lYCksXG4gICAgICAgICAgKVxuICAgICAgICAgIGNhbGxiYWNrKHByb0hUTUwpXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhodG1sKVxuICAgICAgfVxuICAgIH0sXG4gIClcbn1cbiJdfQ==