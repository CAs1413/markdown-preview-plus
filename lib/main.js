"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const url = require("url");
const markdown_preview_view_1 = require("./markdown-preview-view");
const renderer = require("./renderer");
const mathjaxHelper = require("./mathjax-helper");
const cast_1 = require("./cast");
const atom_1 = require("atom");
const util_1 = require("./util");
const placeholder_view_1 = require("./placeholder-view");
var config_1 = require("./config");
exports.config = config_1.config;
let disposables;
async function activate() {
    if (atom.packages.isPackageActive('markdown-preview')) {
        await atom.packages.deactivatePackage('markdown-preview');
        atom.notifications.addInfo('Markdown-preview-plus has deactivated markdown-preview package.' +
            'You may want to disable it manually to avoid this message.');
    }
    disposables = new atom_1.CompositeDisposable();
    disposables.add(atom.commands.add('atom-workspace', {
        'markdown-preview-plus:toggle-break-on-single-newline': function () {
            const keyPath = 'markdown-preview-plus.breakOnSingleNewline';
            atom.config.set(keyPath, !atom.config.get(keyPath));
        },
    }), atom.commands.add('.markdown-preview-plus', {
        'markdown-preview-plus:toggle': close,
    }), atom.workspace.addOpener(opener), atom.config.observe('markdown-preview-plus.grammars', configObserver(registerGrammars)), atom.config.observe('markdown-preview-plus.extensions', configObserver(registerExtensions)));
}
exports.activate = activate;
function deactivate() {
    disposables && disposables.dispose();
}
exports.deactivate = deactivate;
function createMarkdownPreviewView(state) {
    if (state.editorId !== undefined) {
        return new placeholder_view_1.PlaceholderView(state.editorId);
    }
    else if (state.filePath && util_1.isFileSync(state.filePath)) {
        return markdown_preview_view_1.MarkdownPreviewView.create({ filePath: state.filePath });
    }
    return undefined;
}
exports.createMarkdownPreviewView = createMarkdownPreviewView;
function copyHtml(_callback, _scale) {
    const editor = atom.workspace.getActiveTextEditor();
    if (!editor)
        return;
    util_1.handlePromise(copyHtmlInternal(editor));
}
exports.copyHtml = copyHtml;
function close(event) {
    const item = event.currentTarget.getModel();
    const pane = atom.workspace.paneForItem(item);
    if (!pane)
        return undefined;
    return pane.destroyItem(item);
}
function toggle(editor) {
    if (!removePreviewForEditor(editor)) {
        addPreviewForEditor(editor);
    }
}
function removePreviewForEditor(editor) {
    const item = markdown_preview_view_1.MarkdownPreviewView.viewForEditor(editor);
    if (!item)
        return false;
    const previewPane = atom.workspace.paneForItem(item);
    if (!previewPane)
        return false;
    if (item !== previewPane.getActiveItem()) {
        previewPane.activateItem(item);
        return false;
    }
    util_1.handlePromise(previewPane.destroyItem(item));
    return true;
}
function addPreviewForEditor(editor) {
    const previousActivePane = atom.workspace.getActivePane();
    const options = { searchAllPanes: true };
    if (atom.config.get('markdown-preview-plus.openPreviewInSplitPane')) {
        options.split = atom.config.get('markdown-preview-plus.previewSplitPaneDir');
    }
    util_1.handlePromise(atom.workspace
        .open(markdown_preview_view_1.MarkdownPreviewView.create({ editor }), options)
        .then(function (markdownPreviewView) {
        if (cast_1.isMarkdownPreviewView(markdownPreviewView)) {
            previousActivePane.activate();
        }
    }));
}
function previewFile({ currentTarget }) {
    const filePath = currentTarget.dataset.path;
    if (!filePath) {
        return;
    }
    for (const editor of atom.workspace.getTextEditors()) {
        if (editor.getPath() === filePath) {
            addPreviewForEditor(editor);
            return;
        }
    }
    util_1.handlePromise(atom.workspace.open(`markdown-preview-plus://file/${encodeURI(filePath)}`, {
        searchAllPanes: true,
    }));
}
async function copyHtmlInternal(editor) {
    const text = editor.getSelectedText() || editor.getText();
    const renderLaTeX = atom.config.get('markdown-preview-plus.enableLatexRenderingByDefault');
    const html = await renderer.toHTML(text, editor.getPath(), editor.getGrammar(), !!renderLaTeX, true);
    if (renderLaTeX) {
        const frame = document.createElement('iframe');
        frame.src = 'about:blank';
        frame.style.display = 'none';
        frame.addEventListener('load', async () => {
            const proHTML = await mathjaxHelper.processHTMLString(frame, html.body);
            frame.remove();
            atom.clipboard.write(proHTML);
        });
        document.body.appendChild(frame);
    }
    else {
        atom.clipboard.write(html.body.innerHTML);
    }
}
function configObserver(f) {
    let configDisposables;
    return function (value) {
        if (!disposables)
            return;
        if (configDisposables) {
            configDisposables.dispose();
            disposables.remove(configDisposables);
        }
        configDisposables = new atom_1.CompositeDisposable();
        const contextMenu = {};
        f(value, configDisposables, contextMenu);
        configDisposables.add(atom.contextMenu.add(contextMenu));
        disposables.add(configDisposables);
    };
}
function registerExtensions(extensions, disp, cm) {
    for (const ext of extensions) {
        const selector = `.tree-view .file .name[data-name$=".${ext}"]`;
        disp.add(atom.commands.add(selector, 'markdown-preview-plus:preview-file', previewFile));
        cm[selector] = [
            {
                label: 'Markdown Preview',
                command: 'markdown-preview-plus:preview-file',
            },
        ];
    }
}
function registerGrammars(grammars, disp, cm) {
    for (const gr of grammars) {
        const grs = gr.replace(/\./g, ' ');
        const selector = `atom-text-editor[data-grammar="${grs}"]`;
        disp.add(atom.commands.add(selector, {
            'markdown-preview-plus:toggle': (e) => {
                toggle(e.currentTarget.getModel());
            },
            'markdown-preview-plus:copy-html': (e) => {
                util_1.handlePromise(copyHtmlInternal(e.currentTarget.getModel()));
            },
        }));
        cm[selector] = [
            {
                label: 'Sync Preview',
                command: 'markdown-preview-plus:sync-preview',
            },
        ];
    }
}
function opener(uriToOpen) {
    try {
        var uri = new url.URL(uriToOpen);
    }
    catch (e) {
        console.error(e);
        return undefined;
    }
    if (uri.protocol !== 'markdown-preview-plus:')
        return undefined;
    try {
        var pathname = decodeURI(uri.pathname);
    }
    catch (e) {
        console.error(e);
        return undefined;
    }
    if (uri.hostname === 'file') {
        return markdown_preview_view_1.MarkdownPreviewView.create({ filePath: pathname });
    }
    else {
        throw new Error(`Tried to open markdown-preview-plus with uri ${uriToOpen}. This is not supported. Please report this error.`);
    }
}
//# sourceMappingURL=data:application/json;base64,