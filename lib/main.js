"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const url = require("url");
const fs = require("fs-plus");
const markdown_preview_view_1 = require("./markdown-preview-view");
const renderer = require("./renderer");
const mathjaxHelper = require("./mathjax-helper");
const cast_1 = require("./cast");
var config_1 = require("./config");
exports.config = config_1.config;
function activate() {
    atom.commands.add("atom-workspace", {
        "markdown-preview-plus:toggle": toggle,
        "markdown-preview-plus:copy-html": () => copyHtml(),
        "markdown-preview-plus:toggle-break-on-single-newline"() {
            const keyPath = "markdown-preview-plus.breakOnSingleNewline";
            return atom.config.set(keyPath, !atom.config.get(keyPath));
        }
    });
    atom.commands.add(".tree-view .file .name[data-name$=\\.markdown]", "markdown-preview-plus:preview-file", previewFile);
    atom.commands.add(".tree-view .file .name[data-name$=\\.md]", "markdown-preview-plus:preview-file", previewFile);
    atom.commands.add(".tree-view .file .name[data-name$=\\.mdown]", "markdown-preview-plus:preview-file", previewFile);
    atom.commands.add(".tree-view .file .name[data-name$=\\.mkd]", "markdown-preview-plus:preview-file", previewFile);
    atom.commands.add(".tree-view .file .name[data-name$=\\.mkdown]", "markdown-preview-plus:preview-file", previewFile);
    atom.commands.add(".tree-view .file .name[data-name$=\\.ron]", "markdown-preview-plus:preview-file", previewFile);
    atom.commands.add(".tree-view .file .name[data-name$=\\.txt]", "markdown-preview-plus:preview-file", previewFile);
    return atom.workspace.addOpener(uriToOpen => {
        let host, pathname, protocol;
        try {
            ;
            ({ protocol, host, pathname } = url.parse(uriToOpen));
        }
        catch (e) {
            console.error(e);
            return;
        }
        if (protocol !== "markdown-preview-plus:") {
            return;
        }
        try {
            if (pathname) {
                pathname = decodeURI(pathname);
            }
        }
        catch (e) {
            console.error(e);
            return;
        }
        if (host === "editor") {
            return createMarkdownPreviewView({
                editorId: parseInt(pathname.substring(1), 10)
            });
        }
        else {
            return createMarkdownPreviewView({ filePath: pathname });
        }
    });
}
exports.activate = activate;
function createMarkdownPreviewView(state) {
    if (state.editorId || fs.isFileSync(state.filePath)) {
        return new markdown_preview_view_1.MarkdownPreviewView(state);
    }
    return undefined;
}
exports.createMarkdownPreviewView = createMarkdownPreviewView;
function toggle() {
    let needle;
    if (cast_1.isMarkdownPreviewView(atom.workspace.getActivePaneItem())) {
        atom.workspace.destroyActivePaneItem();
        return;
    }
    const editor = atom.workspace.getActiveTextEditor();
    if (editor == null) {
        return;
    }
    const grammars = atom.config.get("markdown-preview-plus.grammars") || [];
    if (((needle = editor.getGrammar().scopeName), !grammars.includes(needle))) {
        return;
    }
    if (!removePreviewForEditor(editor)) {
        addPreviewForEditor(editor);
    }
}
exports.toggle = toggle;
function uriForEditor(editor) {
    return `markdown-preview-plus://editor/${editor.id}`;
}
exports.uriForEditor = uriForEditor;
function removePreviewForEditor(editor) {
    const uri = uriForEditor(editor);
    const previewPane = atom.workspace.paneForURI(uri);
    if (previewPane != null) {
        const preview = previewPane.itemForURI(uri);
        if (preview === undefined)
            return false;
        if (preview !== previewPane.getActiveItem()) {
            previewPane.activateItem(preview);
            return false;
        }
        previewPane.destroyItem(preview);
        return true;
    }
    else {
        return false;
    }
}
exports.removePreviewForEditor = removePreviewForEditor;
function addPreviewForEditor(editor) {
    const uri = uriForEditor(editor);
    const previousActivePane = atom.workspace.getActivePane();
    const options = { searchAllPanes: true };
    if (atom.config.get("markdown-preview-plus.openPreviewInSplitPane")) {
        options.split = atom.config.get("markdown-preview-plus.previewSplitPaneDir");
    }
    return atom.workspace.open(uri, options).then(function (markdownPreviewView) {
        if (cast_1.isMarkdownPreviewView(markdownPreviewView)) {
            return previousActivePane.activate();
        }
    });
}
exports.addPreviewForEditor = addPreviewForEditor;
function previewFile({ currentTarget }) {
    const filePath = currentTarget.dataset.path;
    if (!filePath) {
        return;
    }
    for (let editor of atom.workspace.getTextEditors()) {
        if (editor.getPath() === filePath) {
            addPreviewForEditor(editor);
            return;
        }
    }
    return atom.workspace.open(`markdown-preview-plus://${encodeURI(filePath)}`, {
        searchAllPanes: true
    });
}
exports.previewFile = previewFile;
const clipboardCopy = (text) => atom.clipboard.write(text);
function copyHtml(callback = clipboardCopy, scaleMath = 100) {
    const editor = atom.workspace.getActiveTextEditor();
    if (editor == null) {
        return;
    }
    const text = editor.getSelectedText() || editor.getText();
    const renderLaTeX = atom.config.get("markdown-preview-plus.enableLatexRenderingByDefault");
    return renderer.toHTML(text, editor.getPath(), editor.getGrammar(), renderLaTeX, true, function (error, html) {
        if (error) {
            return console.warn("Copying Markdown as HTML failed", error);
        }
        else if (renderLaTeX) {
            return mathjaxHelper.processHTMLString(html, function (proHTML) {
                proHTML = proHTML.replace(/MathJax\_SVG.*?font\-size\: 100%/g, match => match.replace(/font\-size\: 100%/, `font-size: ${scaleMath}%`));
                return callback(proHTML);
            });
        }
        else {
            return callback(html);
        }
    });
}
exports.copyHtml = copyHtml;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBTUEsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQzFCLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUU3QixtRUFBd0U7QUFDeEUsdUNBQXVDO0FBQ3ZDLGtEQUFrRDtBQUNsRCxpQ0FBOEM7QUFLOUMsbUNBQWlDO0FBQXhCLDBCQUFBLE1BQU0sQ0FBQTtBQUVmO0lBQ0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUU7UUFDbEMsOEJBQThCLEVBQUUsTUFBTTtRQUN0QyxpQ0FBaUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUU7UUFDbkQsc0RBQXNEO1lBQ3BELE1BQU0sT0FBTyxHQUFHLDRDQUE0QyxDQUFBO1lBQzVELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO1FBQzVELENBQUM7S0FDRixDQUFDLENBQUE7SUFFRixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FDZixnREFBZ0QsRUFDaEQsb0NBQW9DLEVBQ3BDLFdBQVcsQ0FDWixDQUFBO0lBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQ2YsMENBQTBDLEVBQzFDLG9DQUFvQyxFQUNwQyxXQUFXLENBQ1osQ0FBQTtJQUNELElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUNmLDZDQUE2QyxFQUM3QyxvQ0FBb0MsRUFDcEMsV0FBVyxDQUNaLENBQUE7SUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FDZiwyQ0FBMkMsRUFDM0Msb0NBQW9DLEVBQ3BDLFdBQVcsQ0FDWixDQUFBO0lBQ0QsSUFBSSxDQUFDLFFB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SUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDdkIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsVUFBUyxPQUFlO2dCQUNuRSxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FDdkIsbUNBQW1DLEVBQ25DLEtBQUssQ0FBQyxFQUFFLENBQ04sS0FBSyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsRUFBRSxjQUFjLFNBQVMsR0FBRyxDQUFDLENBQ2pFLENBQUE7Z0JBQ0QsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUMxQixDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDdkIsQ0FBQztJQUNILENBQUMsQ0FDRixDQUFBO0FBQ0gsQ0FBQztBQXBDRCw0QkFvQ0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogZGVjYWZmZWluYXRlIHN1Z2dlc3Rpb25zOlxuICogRFMxMDI6IFJlbW92ZSB1bm5lY2Vzc2FyeSBjb2RlIGNyZWF0ZWQgYmVjYXVzZSBvZiBpbXBsaWNpdCByZXR1cm5zXG4gKiBEUzEwNDogQXZvaWQgaW5saW5lIGFzc2lnbm1lbnRzXG4gKiBGdWxsIGRvY3M6IGh0dHBzOi8vZ2l0aHViLmNvbS9kZWNhZmZlaW5hdGUvZGVjYWZmZWluYXRlL2Jsb2IvbWFzdGVyL2RvY3Mvc3VnZ2VzdGlvbnMubWRcbiAqL1xuY29uc3QgdXJsID0gcmVxdWlyZShcInVybFwiKVxuY29uc3QgZnMgPSByZXF1aXJlKFwiZnMtcGx1c1wiKVxuXG5pbXBvcnQgeyBNYXJrZG93blByZXZpZXdWaWV3LCBNUFZQYXJhbXMgfSBmcm9tIFwiLi9tYXJrZG93bi1wcmV2aWV3LXZpZXdcIlxuaW1wb3J0IHJlbmRlcmVyID0gcmVxdWlyZShcIi4vcmVuZGVyZXJcIilcbmltcG9ydCBtYXRoamF4SGVscGVyID0gcmVxdWlyZShcIi4vbWF0aGpheC1oZWxwZXJcIilcbmltcG9ydCB7IGlzTWFya2Rvd25QcmV2aWV3VmlldyB9IGZyb20gXCIuL2Nhc3RcIlxuaW1wb3J0IHsgVGV4dEVkaXRvciB9IGZyb20gXCJhdG9tXCJcbmltcG9ydCB7IFdvcmtzcGFjZU9wZW5PcHRpb25zIH0gZnJvbSBcImF0b21cIlxuaW1wb3J0IHsgQ29tbWFuZEV2ZW50IH0gZnJvbSBcImF0b21cIlxuXG5leHBvcnQgeyBjb25maWcgfSBmcm9tIFwiLi9jb25maWdcIlxuXG5leHBvcnQgZnVuY3Rpb24gYWN0aXZhdGUoKSB7XG4gIGF0b20uY29tbWFuZHMuYWRkKFwiYXRvbS13b3Jrc3BhY2VcIiwge1xuICAgIFwibWFya2Rvd24tcHJldmlldy1wbHVzOnRvZ2dsZVwiOiB0b2dnbGUsXG4gICAgXCJtYXJrZG93bi1wcmV2aWV3LXBsdXM6Y29weS1odG1sXCI6ICgpID0+IGNvcHlIdG1sKCksXG4gICAgXCJtYXJrZG93bi1wcmV2aWV3LXBsdXM6dG9nZ2xlLWJyZWFrLW9uLXNpbmdsZS1uZXdsaW5lXCIoKSB7XG4gICAgICBjb25zdCBrZXlQYXRoID0gXCJtYXJrZG93bi1wcmV2aWV3LXBsdXMuYnJlYWtPblNpbmdsZU5ld2xpbmVcIlxuICAgICAgcmV0dXJuIGF0b20uY29uZmlnLnNldChrZXlQYXRoLCAhYXRvbS5jb25maWcuZ2V0KGtleVBhdGgpKVxuICAgIH1cbiAgfSlcblxuICBhdG9tLmNvbW1hbmRzLmFkZChcbiAgICBcIi50cmVlLXZpZXcgLmZpbGUgLm5hbWVbZGF0YS1uYW1lJD1cXFxcLm1hcmtkb3duXVwiLFxuICAgIFwibWFya2Rvd24tcHJldmlldy1wbHVzOnByZXZpZXctZmlsZVwiLFxuICAgIHByZXZpZXdGaWxlXG4gIClcbiAgYXRvbS5jb21tYW5kcy5hZGQoXG4gICAgXCIudHJlZS12aWV3IC5maWxlIC5uYW1lW2RhdGEtbmFtZSQ9XFxcXC5tZF1cIixcbiAgICBcIm1hcmtkb3duLXByZXZpZXctcGx1czpwcmV2aWV3LWZpbGVcIixcbiAgICBwcmV2aWV3RmlsZVxuICApXG4gIGF0b20uY29tbWFuZHMuYWRkKFxuICAgIFwiLnRyZWUtdmlldyAuZmlsZSAubmFtZVtkYXRhLW5hbWUkPVxcXFwubWRvd25dXCIsXG4gICAgXCJtYXJrZG93bi1wcmV2aWV3LXBsdXM6cHJldmlldy1maWxlXCIsXG4gICAgcHJldmlld0ZpbGVcbiAgKVxuICBhdG9tLmNvbW1hbmRzLmFkZChcbiAgICBcIi50cmVlLXZpZXcgLmZpbGUgLm5hbWVbZGF0YS1uYW1lJD1cXFxcLm1rZF1cIixcbiAgICBcIm1hcmtkb3duLXByZXZpZXctcGx1czpwcmV2aWV3LWZpbGVcIixcbiAgICBwcmV2aWV3RmlsZVxuICApXG4gIGF0b20uY29tbWFuZHMuYWRkKFxuICAgIFwiLnRyZWUtdmlldyAuZmlsZSAubmFtZVtkYXRhLW5hbWUkPVxcXFwubWtkb3duXVwiLFxuICAgIFwibWFya2Rvd24tcHJldmlldy1wbHVzOnByZXZpZXctZmlsZVwiLFxuICAgIHByZXZpZXdGaWxlXG4gIClcbiAgYXRvbS5jb21tYW5kcy5hZGQoXG4gICAgXCIudHJlZS12aWV3IC5maWxlIC5uYW1lW2RhdGEtbmFtZSQ9XFxcXC5yb25dXCIsXG4gICAgXCJtYXJrZG93bi1wcmV2aWV3LXBsdXM6cHJldmlldy1maWxlXCIsXG4gICAgcHJldmlld0ZpbGVcbiAgKVxuICBhdG9tLmNvbW1hbmRzLmFkZChcbiAgICBcIi50cmVlLXZpZXcgLmZpbGUgLm5hbWVbZGF0YS1uYW1lJD1cXFxcLnR4dF1cIixcbiAgICBcIm1hcmtkb3duLXByZXZpZXctcGx1czpwcmV2aWV3LWZpbGVcIixcbiAgICBwcmV2aWV3RmlsZVxuICApXG5cbiAgcmV0dXJuIGF0b20ud29ya3NwYWNlLmFkZE9wZW5lcih1cmlUb09wZW4gPT4ge1xuICAgIGxldCBob3N0LCBwYXRobmFtZSwgcHJvdG9jb2xcbiAgICB0cnkge1xuICAgICAgOyh7IHByb3RvY29sLCBob3N0LCBwYXRobmFtZSB9ID0gdXJsLnBhcnNlKHVyaVRvT3BlbikpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihlKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgaWYgKHByb3RvY29sICE9PSBcIm1hcmtkb3duLXByZXZpZXctcGx1czpcIikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlmIChwYXRobmFtZSkge1xuICAgICAgICBwYXRobmFtZSA9IGRlY29kZVVSSShwYXRobmFtZSlcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGUpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoaG9zdCA9PT0gXCJlZGl0b3JcIikge1xuICAgICAgcmV0dXJuIGNyZWF0ZU1hcmtkb3duUHJldmlld1ZpZXcoe1xuICAgICAgICBlZGl0b3JJZDogcGFyc2VJbnQocGF0aG5hbWUuc3Vic3RyaW5nKDEpLCAxMClcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjcmVhdGVNYXJrZG93blByZXZpZXdWaWV3KHsgZmlsZVBhdGg6IHBhdGhuYW1lIH0pXG4gICAgfVxuICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTWFya2Rvd25QcmV2aWV3VmlldyhzdGF0ZTogTVBWUGFyYW1zKSB7XG4gIGlmIChzdGF0ZS5lZGl0b3JJZCB8fCBmcy5pc0ZpbGVTeW5jKHN0YXRlLmZpbGVQYXRoKSkge1xuICAgIHJldHVybiBuZXcgTWFya2Rvd25QcmV2aWV3VmlldyhzdGF0ZSlcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gIGxldCBuZWVkbGVcbiAgaWYgKGlzTWFya2Rvd25QcmV2aWV3VmlldyhhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVQYW5lSXRlbSgpKSkge1xuICAgIGF0b20ud29ya3NwYWNlLmRlc3Ryb3lBY3RpdmVQYW5lSXRlbSgpXG4gICAgcmV0dXJuXG4gIH1cblxuICBjb25zdCBlZGl0b3IgPSBhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVUZXh0RWRpdG9yKClcbiAgaWYgKGVkaXRvciA9PSBudWxsKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBjb25zdCBncmFtbWFycyA9IGF0b20uY29uZmlnLmdldChcIm1hcmtkb3duLXByZXZpZXctcGx1cy5ncmFtbWFyc1wiKSB8fCBbXVxuICBpZiAoKChuZWVkbGUgPSBlZGl0b3IuZ2V0R3JhbW1hcigpLnNjb3BlTmFtZSksICFncmFtbWFycy5pbmNsdWRlcyhuZWVkbGUpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKCFyZW1vdmVQcmV2aWV3Rm9yRWRpdG9yKGVkaXRvcikpIHtcbiAgICBhZGRQcmV2aWV3Rm9yRWRpdG9yKGVkaXRvcilcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXJpRm9yRWRpdG9yKGVkaXRvcjogVGV4dEVkaXRvcikge1xuICByZXR1cm4gYG1hcmtkb3duLXByZXZpZXctcGx1czovL2VkaXRvci8ke2VkaXRvci5pZH1gXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVQcmV2aWV3Rm9yRWRpdG9yKGVkaXRvcjogVGV4dEVkaXRvcikge1xuICBjb25zdCB1cmkgPSB1cmlGb3JFZGl0b3IoZWRpdG9yKVxuICBjb25zdCBwcmV2aWV3UGFuZSA9IGF0b20ud29ya3NwYWNlLnBhbmVGb3JVUkkodXJpKVxuICBpZiAocHJldmlld1BhbmUgIT0gbnVsbCkge1xuICAgIGNvbnN0IHByZXZpZXcgPSBwcmV2aWV3UGFuZS5pdGVtRm9yVVJJKHVyaSlcbiAgICBpZiAocHJldmlldyA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZmFsc2VcbiAgICBpZiAocHJldmlldyAhPT0gcHJldmlld1BhbmUuZ2V0QWN0aXZlSXRlbSgpKSB7XG4gICAgICBwcmV2aWV3UGFuZS5hY3RpdmF0ZUl0ZW0ocHJldmlldylcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBwcmV2aWV3UGFuZS5kZXN0cm95SXRlbShwcmV2aWV3KVxuICAgIHJldHVybiB0cnVlXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFByZXZpZXdGb3JFZGl0b3IoZWRpdG9yOiBUZXh0RWRpdG9yKSB7XG4gIGNvbnN0IHVyaSA9IHVyaUZvckVkaXRvcihlZGl0b3IpXG4gIGNvbnN0IHByZXZpb3VzQWN0aXZlUGFuZSA9IGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVBhbmUoKVxuICBjb25zdCBvcHRpb25zOiBXb3Jrc3BhY2VPcGVuT3B0aW9ucyA9IHsgc2VhcmNoQWxsUGFuZXM6IHRydWUgfVxuICBpZiAoYXRvbS5jb25maWcuZ2V0KFwibWFya2Rvd24tcHJldmlldy1wbHVzLm9wZW5QcmV2aWV3SW5TcGxpdFBhbmVcIikpIHtcbiAgICBvcHRpb25zLnNwbGl0ID0gYXRvbS5jb25maWcuZ2V0KFwibWFya2Rvd24tcHJldmlldy1wbHVzLnByZXZpZXdTcGxpdFBhbmVEaXJcIilcbiAgfVxuICByZXR1cm4gYXRvbS53b3Jrc3BhY2Uub3Blbih1cmksIG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24obWFya2Rvd25QcmV2aWV3Vmlldykge1xuICAgIGlmIChpc01hcmtkb3duUHJldmlld1ZpZXcobWFya2Rvd25QcmV2aWV3VmlldykpIHtcbiAgICAgIHJldHVybiBwcmV2aW91c0FjdGl2ZVBhbmUuYWN0aXZhdGUoKVxuICAgIH1cbiAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXZpZXdGaWxlKHsgY3VycmVudFRhcmdldCB9OiBDb21tYW5kRXZlbnQpIHtcbiAgY29uc3QgZmlsZVBhdGggPSBjdXJyZW50VGFyZ2V0LmRhdGFzZXQucGF0aFxuICBpZiAoIWZpbGVQYXRoKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBmb3IgKGxldCBlZGl0b3Igb2YgYXRvbS53b3Jrc3BhY2UuZ2V0VGV4dEVkaXRvcnMoKSkge1xuICAgIGlmIChlZGl0b3IuZ2V0UGF0aCgpID09PSBmaWxlUGF0aCkge1xuICAgICAgYWRkUHJldmlld0ZvckVkaXRvcihlZGl0b3IpXG4gICAgICByZXR1cm5cbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXRvbS53b3Jrc3BhY2Uub3BlbihgbWFya2Rvd24tcHJldmlldy1wbHVzOi8vJHtlbmNvZGVVUkkoZmlsZVBhdGgpfWAsIHtcbiAgICBzZWFyY2hBbGxQYW5lczogdHJ1ZVxuICB9KVxufVxuXG5jb25zdCBjbGlwYm9hcmRDb3B5ID0gKHRleHQ6IHN0cmluZykgPT4gYXRvbS5jbGlwYm9hcmQud3JpdGUodGV4dClcblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHlIdG1sKGNhbGxiYWNrPzogdW5kZWZpbmVkLCBzY2FsZU1hdGg/OiBudW1iZXIpOiB2b2lkXG5leHBvcnQgZnVuY3Rpb24gY29weUh0bWw8VD4oXG4gIGNhbGxiYWNrPzogKHRleHQ6IHN0cmluZykgPT4gVCxcbiAgc2NhbGVNYXRoPzogbnVtYmVyXG4pOiBUXG5leHBvcnQgZnVuY3Rpb24gY29weUh0bWwoXG4gIGNhbGxiYWNrOiAodGV4dDogc3RyaW5nKSA9PiBhbnkgPSBjbGlwYm9hcmRDb3B5LFxuICBzY2FsZU1hdGggPSAxMDBcbik6IGFueSB7XG4gIGNvbnN0IGVkaXRvciA9IGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVRleHRFZGl0b3IoKVxuICBpZiAoZWRpdG9yID09IG51bGwpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGNvbnN0IHRleHQgPSBlZGl0b3IuZ2V0U2VsZWN0ZWRUZXh0KCkgfHwgZWRpdG9yLmdldFRleHQoKVxuICBjb25zdCByZW5kZXJMYVRlWCA9IGF0b20uY29uZmlnLmdldChcbiAgICBcIm1hcmtkb3duLXByZXZpZXctcGx1cy5lbmFibGVMYXRleFJlbmRlcmluZ0J5RGVmYXVsdFwiXG4gIClcbiAgcmV0dXJuIHJlbmRlcmVyLnRvSFRNTChcbiAgICB0ZXh0LFxuICAgIGVkaXRvci5nZXRQYXRoKCksXG4gICAgZWRpdG9yLmdldEdyYW1tYXIoKSxcbiAgICByZW5kZXJMYVRlWCxcbiAgICB0cnVlLFxuICAgIGZ1bmN0aW9uKGVycm9yOiBFcnJvciB8IG51bGwsIGh0bWw6IHN0cmluZykge1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBjb25zb2xlLndhcm4oXCJDb3B5aW5nIE1hcmtkb3duIGFzIEhUTUwgZmFpbGVkXCIsIGVycm9yKVxuICAgICAgfSBlbHNlIGlmIChyZW5kZXJMYVRlWCkge1xuICAgICAgICByZXR1cm4gbWF0aGpheEhlbHBlci5wcm9jZXNzSFRNTFN0cmluZyhodG1sLCBmdW5jdGlvbihwcm9IVE1MOiBzdHJpbmcpIHtcbiAgICAgICAgICBwcm9IVE1MID0gcHJvSFRNTC5yZXBsYWNlKFxuICAgICAgICAgICAgL01hdGhKYXhcXF9TVkcuKj9mb250XFwtc2l6ZVxcOiAxMDAlL2csXG4gICAgICAgICAgICBtYXRjaCA9PlxuICAgICAgICAgICAgICBtYXRjaC5yZXBsYWNlKC9mb250XFwtc2l6ZVxcOiAxMDAlLywgYGZvbnQtc2l6ZTogJHtzY2FsZU1hdGh9JWApXG4gICAgICAgICAgKVxuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhwcm9IVE1MKVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGh0bWwpXG4gICAgICB9XG4gICAgfVxuICApXG59XG4iXX0=